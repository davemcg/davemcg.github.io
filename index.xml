<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eye Bioinformatician on eye Bioinformatician</title>
    <link>/./</link>
    <description>Recent content in eye Bioinformatician on eye Bioinformatician</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0100</lastBuildDate>
    <atom:link href="//" rel="self" type="application/rss+xml" />
    
    <item>
      <title>#GI2018 - Day One</title>
      <link>/./post/gi2018-day-one/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/gi2018-day-one/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section&#34;&gt;2018-09-17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sarah-teichmann-teichmann-lab&#34;&gt;Sarah Teichmann (Teichmann Lab)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#girgio-gonnella-stefan-kurtz&#34;&gt;Girgio Gonnella (Stefan Kurtz)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#luke-zappia-oshlack&#34;&gt;Luke Zappia (Oshlack?)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#laura-huerta-papatheodorou&#34;&gt;Laura Huerta (Papatheodorou)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#casey-greene-greene&#34;&gt;Casey Greene (Greene)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sergei-yakneen&#34;&gt;Sergei Yakneen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;intro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Very sparse and poorly written notes covering &lt;a href=&#34;https://twitter.com/hashtag/GI2018?src=hash&#34;&gt;#GI2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typos everywhere. Things may change dramatically over time as I scan back through notes.&lt;/p&gt;
&lt;p&gt;I’ve tried to respect #notwitter. Will be updated periodically.&lt;/p&gt;
&lt;p&gt;Speaker (Lab | Group)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BOLDED is voice&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;section&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;2018-09-17&lt;/h1&gt;
&lt;/div&gt;
&lt;div id=&#34;sarah-teichmann-teichmann-lab&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sarah Teichmann (Teichmann Lab)&lt;/h1&gt;
&lt;p&gt;Cell Atlas Technologies and the Maternal-Fetal Interface&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;humancellatlas.org&#34;&gt;Human Cell Atlas plug&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;600 scientists&lt;/li&gt;
&lt;li&gt;scRNAseq + spatial methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scRNA works OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70%+ pearson cor (among genes?)&lt;/li&gt;
&lt;li&gt;Detection limit pretty good after 1 million reads&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.biorxiv.org/content/early/2016/09/08/073692&#34;&gt;Svensson and Teichmann preprint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spatial Tech&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i.e. gene expression at voxel resolution in a non-destroyed tissue
&lt;ul&gt;
&lt;li&gt;1 voxel ~ 20 cells&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hope to ID spatially variable genes
&lt;ul&gt;
&lt;li&gt;[github.com/TeichLab/SpatialDE]&lt;/li&gt;
&lt;li&gt;Svensson and Teichmann&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Braga and Stegle: Merge Spatial TX with scRNA&lt;/p&gt;
&lt;p&gt;Future stuffs: Histology merged with scRNA&lt;/p&gt;
&lt;p&gt;Back to HCA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many tissues, many scientists, many countries&lt;/li&gt;
&lt;li&gt;curious if any integration with Chan-Zuckerberg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moving onto to Maternal-fetal interface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tricky area&lt;/li&gt;
&lt;li&gt;immune component&lt;/li&gt;
&lt;li&gt;two organisms&lt;/li&gt;
&lt;li&gt;&lt;em&gt;tumor like&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;scRNA + WGS resolved fetal/maternal adn cell tyes&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;girgio-gonnella-stefan-kurtz&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Girgio Gonnella (Stefan Kurtz)&lt;/h1&gt;
&lt;p&gt;Flexible and interactive visualization of GFA sequence graphs&lt;/p&gt;
&lt;p&gt;Graphical Fragment Assembly&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;format for representing sequence graphs&lt;/li&gt;
&lt;li&gt;contig output not as informative as graphs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GFA1 proposal format from Heng Li releaseed in 2016-09&lt;/p&gt;
&lt;p&gt;GFA2 2017-01 more general&lt;/p&gt;
&lt;p&gt;Today more assemblers are using&lt;/p&gt;
&lt;p&gt;GFA2 format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;sequences&lt;/li&gt;
&lt;li&gt;relationships&lt;/li&gt;
&lt;li&gt;RGFA (Ruby)&lt;/li&gt;
&lt;li&gt;Gfapy (python)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GfaViz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visualization of GFA2 (and GFA1)&lt;/li&gt;
&lt;li&gt;C++, QT, OGDF&lt;/li&gt;
&lt;li&gt;GUI and CLI&lt;/li&gt;
&lt;li&gt;Two layouts, many options to customize views&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaffolding graphs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dealing with pos gaps (missing seq) and neg gaps (contig overlap by repeats)&lt;/li&gt;
&lt;li&gt;Show how it looks with Bandage, no gap info&lt;/li&gt;
&lt;li&gt;much busier with GfaViz
&lt;ul&gt;
&lt;li&gt;but now can see gap info between the pieces&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Long reads&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local alignments are messy (noisy data)&lt;/li&gt;
&lt;li&gt;GFA2 has &lt;em&gt;internal&lt;/em&gt; alignments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Release is &lt;em&gt;later this year&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ggonnella on github&lt;/li&gt;
&lt;li&gt;email: &lt;a href=&#34;mailto:gonnella@zbh.uni-hamburg.de&#34;&gt;gonnella@zbh.uni-hamburg.de&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;luke-zappia-oshlack&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Luke Zappia (Oshlack?)&lt;/h1&gt;
&lt;p&gt;Using clustering trees to visualize scRNA-seq data&lt;/p&gt;
&lt;p&gt;(caps my own) &lt;strong&gt;SO MANY CLUSTERING TOOLS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T-SNE IS NOT CLUSTERING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How do we decide how many clusters?&lt;/p&gt;
&lt;p&gt;When deciding k (cluster num) you can think of a graph and with edge weights to assess interesting groups&lt;/p&gt;
&lt;p&gt;Cells on edge / num of cells in high res cluster&lt;/p&gt;
&lt;p&gt;Above equation good way to think about usefulness of cluster groups&lt;/p&gt;
&lt;p&gt;As we increase k, we can see how the graph changes and can get a sense of whether k should be changed&lt;/p&gt;
&lt;p&gt;Real data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;used Seurat to cluster&lt;/li&gt;
&lt;li&gt;see a branch with is distinct and doesn’t interact with anything else&lt;/li&gt;
&lt;li&gt;also see a stable region&lt;/li&gt;
&lt;li&gt;see low proportion edges if you really increase the k&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I can’t doodle on the computer, which would be helpful here but this stuff looks really helpful&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using edge porportion (above eq.) and cluster relatinoships you get a decent sense of whether the clustering makes sense&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHAT SO COOL&lt;/strong&gt; (overlap of cluster trees on t-SNE)&lt;/p&gt;
&lt;p&gt;Q: could this be used to magic pick a k? A: Everyone asks this….please don’t….no idea what would happen&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;laura-huerta-papatheodorou&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Laura Huerta (Papatheodorou)&lt;/h1&gt;
&lt;p&gt;Data curation integration and visualization&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oh boy, a viz talk that I’m going to cover with words&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expression Atlas&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open science resource for holding expression data&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;super useful resource, unfortunately in my experience pain to get data into R with their R packages&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I find it easier to just find the tsv output link and then slurp that into R&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;big value in consistent computational workflows&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;3,300&lt;/code&gt; datasets, from all the big consortia (GTEx, FANTOM, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;clusterSeq package&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;missed what this does but looks like a good thing to check out…&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;from bioconductor page: &lt;em&gt;Identification of clusters of co-expressed genes based on their expression across multiple (replicated) biological samples.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can embed Expression Atlas data on other pages (ensembl does this)&lt;/p&gt;
&lt;p&gt;scRNA-seq data also - again public data, consistent processing (extension of iRAP) - can see whether gene is considered a &lt;em&gt;marker&lt;/em&gt; gene (&lt;strong&gt;not sure how this is picked&lt;/strong&gt;) - have a t-SNE(?) interactive plot view and shows your favorite gene colored&lt;/p&gt;
&lt;p&gt;Future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;merge bulk and scRNA data&lt;/li&gt;
&lt;li&gt;….something else I missed about metadata?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q: How is data updated with genome build change? A: In lock step, can view old versions&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;casey-greene-greene&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Casey Greene (Greene)&lt;/h1&gt;
&lt;p&gt;Can “big data” help us tackle rare diseases?&lt;/p&gt;
&lt;p&gt;~3.7 million assays / datasets&lt;/p&gt;
&lt;p&gt;~3.8 billion USD&lt;/p&gt;
&lt;p&gt;Really tough to compare &lt;em&gt;across&lt;/em&gt; datasets with the “modular” approach&lt;/p&gt;
&lt;p&gt;PLIER: decompose dataset into latent variables by genes and sample:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mao et al biorxiv 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Latent variables in individual datasets not helpful for dataset comparison - but could you run PLIER on datasetS and see whether it “works” - with SLE (lupus)….yes - with only 7 datasets, can find vars that are NOT dataset specific&lt;/p&gt;
&lt;p&gt;Can you learn patterns from large datasets then &lt;em&gt;transfer&lt;/em&gt; to individual dataset / problem?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bit.ly/MultiPLIER&#34;&gt;MultiPLIER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ran with recount2 data on SLE (looking at ANC-associated)&lt;/li&gt;
&lt;li&gt;top loadings known info&lt;/li&gt;
&lt;li&gt;see how loading score drops in other (non SLE) tissues&lt;/li&gt;
&lt;li&gt;slides: &lt;a href=&#34;https://www.dropbox.com/sh/j0ysaojqmac29qv/AADBHy-3y8qzWHr34F7M39QIa?dl=0&#34; class=&#34;uri&#34;&gt;https://www.dropbox.com/sh/j0ysaojqmac29qv/AADBHy-3y8qzWHr34F7M39QIa?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pitch for &lt;a href=&#34;http://researchparasite.com&#34; class=&#34;uri&#34;&gt;http://researchparasite.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sergei-yakneen&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sergei Yakneen&lt;/h1&gt;
&lt;p&gt;Butler: a framework for large-scale scientific analysis on the cloud&lt;/p&gt;
&lt;p&gt;[github.com/llevar/butler]&lt;/p&gt;
&lt;p&gt;PCAWG&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pan cancer analysis of whole genomes&lt;/li&gt;
&lt;li&gt;2,834 donors, 70,313 files, 729 TB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Show graph scaling off as pipelines choke as more samples get added&lt;/p&gt;
&lt;p&gt;If progress was linear, &lt;em&gt;years&lt;/em&gt; of compute (?) time could be saved&lt;/p&gt;
&lt;p&gt;Key needs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provisioning&lt;/li&gt;
&lt;li&gt;config management&lt;/li&gt;
&lt;li&gt;workflow&lt;/li&gt;
&lt;li&gt;operations management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tried to use “off the shelf” infrastructure / processes to build Butler&lt;/p&gt;
&lt;p&gt;Workflows are … CWL?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This seems targeted towards a pretty small audience - people running huge compute platforms?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** I guess you could use this for a smaller projects and deploy to cloud, but I would think that the overhead of learning this would likely overwhelm the potential savings relative to using Snakemake / Docker / Conda. **&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Onboarding</title>
      <link>/./culture/onboarding/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/./culture/onboarding/</guid>
      <description>&lt;div id=&#34;points-of-contact&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Points of Contact&lt;/h2&gt;
&lt;p&gt;Administrative&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jairo Meija
&lt;ul&gt;
&lt;li&gt;Jairo (“Hi Ro”) is the administrative manager for the OGVFB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cathy Geer
&lt;ul&gt;
&lt;li&gt;The administrative assistant for the branch&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you have any admin-related questions, shoot one of them an email or go chat with them in 10N109&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Brian Brooks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The boss. He is the NEI Clinical Director and the head of the OGVFB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tiziana Cogliati&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;She is Brian’s lab manager. She does the day to day administration of Brian’s research lab and guides the research along with Brian&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cesar Perez-Gonzalez&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NEI Scientific Program Administrator&lt;/li&gt;
&lt;li&gt;He is the guy who oversees all trainees in NEI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;before-the-first-day&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Before the first day&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You should have made an appointment to get a NIH badge
&lt;ul&gt;
&lt;li&gt;If this doesn’t make any sense then &lt;a href=&#34;https://ned.nih.gov/search/ViewDetails.aspx?NIHID=0011297616&#34;&gt;contact&lt;/a&gt; Jairo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;nih-training&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;NIH training&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.safetytraining.nih.gov/TrainingRequirements.aspx&#34; class=&#34;uri&#34;&gt;https://www.safetytraining.nih.gov/TrainingRequirements.aspx&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;only required if you &lt;strong&gt;know&lt;/strong&gt; you are doing bench work&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://irtsectraining.nih.gov&#34; class=&#34;uri&#34;&gt;https://irtsectraining.nih.gov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://researchethics.od.nih.gov&#34; class=&#34;uri&#34;&gt;https://researchethics.od.nih.gov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;nih-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;NIH resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://neinet.nei.nih.gov&#34;&gt;NEI Intranet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;only available after you get here&lt;/li&gt;
&lt;li&gt;internal page with org chart, meeting scheduling, etc et.c&lt;/li&gt;
&lt;li&gt;(&lt;a href=&#34;http://neinet.nei.nih.gov/intramural/FellowsStudents/postbac.asp&#34; class=&#34;uri&#34;&gt;http://neinet.nei.nih.gov/intramural/FellowsStudents/postbac.asp&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ned.nih.gov/search/&#34;&gt;NIH Phone Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Programming Practices</title>
      <link>/./culture/practices/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/./culture/practices/</guid>
      <description>&lt;div id=&#34;version-tracking&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Version Tracking&lt;/h2&gt;
&lt;p&gt;We use git.&lt;/p&gt;
&lt;p&gt;You will use git.&lt;/p&gt;
&lt;p&gt;You will have your own github.com (or equivalent, like gitlab) account.&lt;/p&gt;
&lt;p&gt;Your projects will each have their own repository on github.com.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;language&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Language&lt;/h2&gt;
&lt;p&gt;I use a combination of R, python, Snakemake, awk, and bash. I lean heavily on R to produce visualizations and interactive documents/sites and Snakemake to reproducibly process data in projects.&lt;/p&gt;
&lt;p&gt;Projects you do with me will likely have to be written in some combination of the above languages, so they can be supported after you leave (or you’ll have to talk me into learning language X).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reproducibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reproducibility&lt;/h2&gt;
&lt;p&gt;Everything you do is to be written in code. The expectation is you can run (ideally one) script/Snakemake file and reproduce virtually all of the downstream analyses from the &lt;strong&gt;raw&lt;/strong&gt; data.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Quick Guide to Gene Name Conversion</title>
      <link>/./post/quick-guide-to-gene-name-conversion/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/quick-guide-to-gene-name-conversion/</guid>
      <description>&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;There are several popular naming systems for (human) genes:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;RefSeq (&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/nuccore/NM_000350&#34;&gt;NM_000350&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ensembl (&lt;a href=&#34;https://useast.ensembl.org/Homo_sapiens/Gene/Summary?g=ENSG00000198691;r=1:93992835-94121132&#34;&gt;ENSG00000198691&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HGNC Symbol (&lt;a href=&#34;https://www.genenames.org/cgi-bin/gene_symbol_report?hgnc_id=HGNC:34&#34;&gt;ABCA4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Entrez (&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/gene/24&#34;&gt;24&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given enough time in &lt;code&gt;#bioinformatics&lt;/code&gt;, you will have to do every possible combination of conversions.&lt;/p&gt;
&lt;p&gt;This post will very briefly explain the most expedient way to automatically convert between these formats with &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-exhaustive-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More exhaustive resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://crazyhottommy.blogspot.com/2014/09/converting-gene-ids-using-bioconductor.html&#34; class=&#34;uri&#34;&gt;http://crazyhottommy.blogspot.com/2014/09/converting-gene-ids-using-bioconductor.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://davetang.org/muse/2013/11/25/thoughts-converting-gene-identifiers/&#34; class=&#34;uri&#34;&gt;https://davetang.org/muse/2013/11/25/thoughts-converting-gene-identifiers/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ensembl---hgnc---entrez&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ensembl &amp;lt;-&amp;gt; HGNC &amp;lt;-&amp;gt; Entrez&lt;/h2&gt;
&lt;p&gt;Stephen Turner has built a small set of data frames (well, tibbles) with core information, including transcript &amp;lt;-&amp;gt; gene info. You just install the library, run &lt;code&gt;library(annotables)&lt;/code&gt; and you have tibbles for the info. Super easy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/stephenturner/annotables&#34; class=&#34;uri&#34;&gt;https://github.com/stephenturner/annotables&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## install steps, run once
# install.packages(&amp;quot;devtools&amp;quot;)
# devtools::install_github(&amp;quot;stephenturner/annotables&amp;quot;)

library(annotables)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.4
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grch38 %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   ensgene  entrez symbol chr    start    end strand biotype description   
##   &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;         
## 1 ENSG000…   7105 TSPAN6 X     1.01e8 1.01e8     -1 protei… tetraspanin 6…
## 2 ENSG000…  64102 TNMD   X     1.01e8 1.01e8      1 protei… tenomodulin […
## 3 ENSG000…   8813 DPM1   20    5.09e7 5.10e7     -1 protei… dolichyl-phos…
## 4 ENSG000…  57147 SCYL3  1     1.70e8 1.70e8     -1 protei… SCY1 like pse…
## 5 ENSG000…  55732 C1orf… 1     1.70e8 1.70e8      1 protei… chromosome 1 …
## 6 ENSG000…   2268 FGR    1     2.76e7 2.76e7     -1 protei… FGR proto-onc…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or grch37, grcm38, rnor6, galgal5, wbcel235, bdgp6, mmul801&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, he did not add Refseq names. So if you need to get RefSeq names into one of the others, you’ll have to do another step.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;biomart-refseq---ensembl---hgnc---entrez&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;biomaRt (RefSeq &amp;lt;-&amp;gt; (Ensembl &amp;lt;-&amp;gt; HGNC &amp;lt;-&amp;gt; Entrez))&lt;/h2&gt;
&lt;p&gt;Ensembl’s biomaRt tool is super powerful. And very annoying to use for me, as I find the syntax impossible to remember. Also it takes over the dplyr &lt;code&gt;select&lt;/code&gt; function with its own &lt;code&gt;select&lt;/code&gt;. You’ll notice here I do not load biomaRt.&lt;/p&gt;
&lt;p&gt;But it can convert just about anything to anything.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## install steps, run once
# source(&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;)
# biocLite(&amp;quot;biomaRt&amp;quot;)
# library(biomaRt) # &amp;lt;- don&amp;#39;t load!, just use the :: 
mart&amp;lt;- biomaRt::useMart(biomart = &amp;#39;ensembl&amp;#39;, dataset = &amp;#39;hsapiens_gene_ensembl&amp;#39;)
# mapping example
refseq_ids &amp;lt;- c(&amp;quot;NM_006573&amp;quot;, &amp;quot;NM_002985&amp;quot;, &amp;quot;NM_032965&amp;quot;, &amp;quot;NM_002987&amp;quot;, &amp;quot;NM_006274&amp;quot;, &amp;quot;NM_004591&amp;quot;, &amp;quot;NM_002990&amp;quot;)
  
refseq_mapping &amp;lt;- biomaRt::getBM(attributes = c(&amp;quot;refseq_mrna&amp;quot;,&amp;quot;hgnc_symbol&amp;quot;), 
                        filters=&amp;quot;refseq_mrna&amp;quot;, # you swap out of this filter for whatever your input is
                        values=refseq_ids, # vector of your NMf
                        mart=mart)

refseq_mapping &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   refseq_mrna hgnc_symbol
## 1   NM_002985        CCL5
## 2   NM_002987       CCL17
## 3   NM_002990       CCL22
## 4   NM_004591       CCL20
## 5   NM_006274       CCL19
## 6   NM_006573    TNFSF13B
## 7   NM_032965       CCL15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to get the rest of the info in Annotables matched up with the RefSeq NM, then just do a &lt;code&gt;left_join&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;left_join(refseq_mapping %&amp;gt;% select(refseq_mrna, symbol = hgnc_symbol), grch37)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;symbol&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   refseq_mrna   symbol         ensgene entrez         chr     start
## 1   NM_002985     CCL5 ENSG00000161570   6352          17  34198495
## 2   NM_002985     CCL5 ENSG00000271503   6352 HG385_PATCH  34198510
## 3   NM_002987    CCL17 ENSG00000102970   6361          16  57438679
## 4   NM_002990    CCL22 ENSG00000102962   6367          16  57392684
## 5   NM_004591    CCL20 ENSG00000115009   6364           2 228678558
## 6   NM_006274    CCL19 ENSG00000172724   6363           9  34689564
## 7   NM_006573 TNFSF13B ENSG00000102524  10673          13 108903588
## 8   NM_032965    CCL15 ENSG00000267596   6359          17  34323476
##         end strand        biotype
## 1  34207797     -1 protein_coding
## 2  34207812     -1 protein_coding
## 3  57449974      1 protein_coding
## 4  57400102      1 protein_coding
## 5 228682272      1 protein_coding
## 6  34691274     -1 protein_coding
## 7 108960832      1 protein_coding
## 8  34329084     -1 protein_coding
##                                                                             description
## 1                         chemokine (C-C motif) ligand 5 [Source:HGNC Symbol;Acc:10632]
## 2                         chemokine (C-C motif) ligand 5 [Source:HGNC Symbol;Acc:10632]
## 3                        chemokine (C-C motif) ligand 17 [Source:HGNC Symbol;Acc:10615]
## 4                        chemokine (C-C motif) ligand 22 [Source:HGNC Symbol;Acc:10621]
## 5                        chemokine (C-C motif) ligand 20 [Source:HGNC Symbol;Acc:10619]
## 6                        chemokine (C-C motif) ligand 19 [Source:HGNC Symbol;Acc:10617]
## 7 tumor necrosis factor (ligand) superfamily, member 13b [Source:HGNC Symbol;Acc:11929]
## 8                        chemokine (C-C motif) ligand 15 [Source:HGNC Symbol;Acc:10613]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# we have 8 rows now becuase CCL5 has two matching ensgenes mapped to different locations&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sessioninfo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;sessionInfo&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       America/New_York            
##  date     2018-07-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package       * version   date      
##  annotables    * 0.1.91    2018-06-18
##  AnnotationDbi   1.42.1    2018-05-08
##  assertthat      0.2.0     2017-04-11
##  backports       1.1.2     2017-12-13
##  base          * 3.5.0     2018-04-24
##  bindr           0.1.1     2018-03-13
##  bindrcpp        0.2.2     2018-03-29
##  Biobase         2.40.0    2018-05-01
##  BiocGenerics    0.26.0    2018-05-01
##  biomaRt         2.36.1    2018-05-24
##  bit             1.1-13    2018-05-15
##  bit64           0.9-7     2017-05-08
##  bitops          1.0-6     2013-08-17
##  blob            1.1.1     2018-03-25
##  blogdown        0.8.1     2018-07-16
##  bookdown        0.7       2018-02-18
##  broom           0.4.4     2018-03-29
##  cellranger      1.1.0     2016-07-27
##  cli             1.0.0     2017-11-05
##  colorspace      1.3-2     2016-12-14
##  compiler        3.5.0     2018-04-24
##  crayon          1.3.4     2017-09-16
##  curl            3.2       2018-03-28
##  datasets      * 3.5.0     2018-04-24
##  DBI             1.0.0     2018-05-02
##  devtools        1.13.5    2018-02-18
##  digest          0.6.15    2018-01-28
##  dplyr         * 0.7.6     2018-06-29
##  evaluate        0.10.1    2017-06-24
##  forcats       * 0.3.0     2018-02-19
##  foreign         0.8-70    2017-11-28
##  ggplot2       * 3.0.0     2018-07-03
##  glue            1.2.0     2017-10-29
##  graphics      * 3.5.0     2018-04-24
##  grDevices     * 3.5.0     2018-04-24
##  grid            3.5.0     2018-04-24
##  gtable          0.2.0     2016-02-26
##  haven           1.1.1     2018-01-18
##  hms             0.4.2     2018-03-10
##  htmltools       0.3.6     2017-04-28
##  httr            1.3.1     2017-08-20
##  IRanges         2.14.10   2018-05-16
##  jsonlite        1.5       2017-06-01
##  knitr           1.20      2018-02-20
##  lattice         0.20-35   2017-03-25
##  lazyeval        0.2.1     2017-10-29
##  lubridate       1.7.4     2018-04-11
##  magrittr        1.5       2014-11-22
##  memoise         1.1.0     2017-04-21
##  methods       * 3.5.0     2018-04-24
##  mnormt          1.5-5     2016-10-15
##  modelr          0.1.2     2018-05-11
##  munsell         0.4.3     2016-02-13
##  nlme            3.1-137   2018-04-07
##  parallel        3.5.0     2018-04-24
##  pillar          1.2.3     2018-05-25
##  pkgconfig       2.0.1     2017-03-21
##  plyr            1.8.4     2016-06-08
##  prettyunits     1.0.2     2015-07-13
##  progress        1.1.2     2016-12-14
##  psych           1.8.4     2018-05-06
##  purrr         * 0.2.4     2017-10-18
##  R6              2.2.2     2017-06-17
##  Rcpp            0.12.17   2018-05-18
##  RCurl           1.95-4.10 2018-01-04
##  readr         * 1.1.1     2017-05-16
##  readxl          1.1.0     2018-04-20
##  reshape2        1.4.3     2017-12-11
##  rlang           0.2.1     2018-05-30
##  rmarkdown       1.10      2018-06-11
##  rprojroot       1.3-2     2018-01-03
##  RSQLite         2.1.1     2018-05-06
##  rstudioapi      0.7       2017-09-07
##  rvest           0.3.2     2016-06-17
##  S4Vectors       0.18.2    2018-05-16
##  scales          0.5.0     2017-08-24
##  stats         * 3.5.0     2018-04-24
##  stats4          3.5.0     2018-04-24
##  stringi         1.2.2     2018-05-02
##  stringr       * 1.3.1     2018-05-10
##  tibble        * 1.4.2     2018-01-22
##  tidyr         * 0.8.1     2018-05-18
##  tidyselect      0.2.4     2018-02-26
##  tidyverse     * 1.2.1     2017-11-14
##  tools           3.5.0     2018-04-24
##  utf8            1.1.4     2018-05-24
##  utils         * 3.5.0     2018-04-24
##  withr           2.1.2     2018-03-15
##  xfun            0.3       2018-07-06
##  XML             3.98-1.11 2018-04-16
##  xml2            1.2.0     2018-01-24
##  yaml            2.1.19    2018-05-01
##  source                                   
##  Github (stephenturner/annotables@958545a)
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
##  Bioconductor                             
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  Github (rstudio/blogdown@d54c39a)        
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  cran (@0.7.6)                            
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  cran (@3.0.0)                            
##  CRAN (R 3.5.0)                           
##  local                                    
##  local                                    
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  cran (@1.10)                             
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  Bioconductor                             
##  CRAN (R 3.5.0)                           
##  local                                    
##  local                                    
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  local                                    
##  CRAN (R 3.5.0)                           
##  cran (@0.3)                              
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)                           
##  CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>#BoG18: Talk Notes</title>
      <link>/./post/bog18-notes/</link>
      <pubDate>Tue, 08 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/bog18-notes/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#genome-engineering-and-genome-editing-tuesday-night&#34;&gt;Genome Engineering and Genome Editing (Tuesday Night)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#jef-boeke&#34;&gt;Jef Boeke&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#writing-genomes&#34;&gt;Writing Genomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dark-matter&#34;&gt;“dark matter”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#big-dna&#34;&gt;big dna&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#greg-findlay-jay-shendure&#34;&gt;Greg Findlay (Jay Shendure)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stephen-levene-andrew-fire&#34;&gt;Stephen Levene (Andrew Fire)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#david-truong-jef-boeke&#34;&gt;David Truong (Jef Boeke)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#feng-zhang&#34;&gt;Feng Zhang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#molly-gasperini-jay-shendure&#34;&gt;Molly Gasperini (Jay Shendure)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eilon-sharon-hunter-fraser&#34;&gt;Eilon Sharon (Hunter Fraser)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#luca-pinello&#34;&gt;Luca Pinello&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#population-genomics-wednesday-morning&#34;&gt;Population Genomics (Wednesday morning)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mattias-joakobsson&#34;&gt;Mattias Joakobsson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jaemin-kim-elaine-ostrander&#34;&gt;Jaemin Kim (Elaine Ostrander)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ipsita-agarwal-molly-przeworski&#34;&gt;Ipsita Agarwal (Molly Przeworski)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#amnon-koren&#34;&gt;Amnon Koren&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sarah-tishkoff&#34;&gt;Sarah Tishkoff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patrick-albers-gil-mcvean&#34;&gt;Patrick Albers (Gil McVean)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#laura-hayward-guy-sella&#34;&gt;Laura Hayward (Guy Sella)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functional-genetics-and-epigenomics&#34;&gt;Functional Genetics and Epigenomics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#job-dekker&#34;&gt;Job Dekker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#flora-vaccarino&#34;&gt;Flora Vaccarino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#carninci&#34;&gt;Carninci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#johnathan-griffiths-berthold-gottgens&#34;&gt;Johnathan Griffiths (Berthold Gottgens)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emma-farley&#34;&gt;Emma Farley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jake-yeung-felix-naef&#34;&gt;Jake Yeung (Felix Naef)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#minal-caliskan-casey-brown&#34;&gt;Minal Caliskan (Casey Brown)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parisa-razaz-talkwoski&#34;&gt;Parisa Razaz (Talkwoski)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#evolutionary-and-non-human-genomics&#34;&gt;Evolutionary and Non-human genomics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#monica-justice&#34;&gt;Monica Justice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arang-rhie-erich-jarvis-adam-phillippy&#34;&gt;Arang Rhie (Erich Jarvis, Adam Phillippy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#olga-dudchenko-erez-lieberman-aiden&#34;&gt;Olga Dudchenko (Erez Lieberman Aiden)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kasper-munch&#34;&gt;Kasper Munch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gavin-sherlock&#34;&gt;Gavin Sherlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anne-ruxandra-carvunis&#34;&gt;Anne Ruxandra Carvunis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elaine-ostrander&#34;&gt;Elaine Ostrander&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bobbie-cansdale-claire-wade&#34;&gt;Bobbie Cansdale (Claire Wade)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cancer-and-medical-genomics&#34;&gt;Cancer and Medical Genomics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#trey-ideker&#34;&gt;Trey Ideker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rajbir-batra-carlos-caldas&#34;&gt;Rajbir Batra (Carlos Caldas)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patrick-short-matthew-hurles&#34;&gt;Patrick Short (Matthew Hurles)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#max-shen-david-gifford&#34;&gt;Max Shen (David Gifford)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sharon-plon-pj-lupo&#34;&gt;Sharon Plon (PJ Lupo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#massa-shoura-andrew-fire&#34;&gt;Massa Shoura (Andrew Fire)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sidi-chen&#34;&gt;Sidi Chen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#marcin-imielinski&#34;&gt;Marcin Imielinski&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#computational-genomics---im-very-excited&#34;&gt;Computational Genomics (! - &lt;strong&gt;I’m very excited&lt;/strong&gt;)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#oliver-stegle&#34;&gt;Oliver Stegle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ben-strober-alexis-battle&#34;&gt;Ben Strober (Alexis Battle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#meena-subramaniam-jimmie-ye-and-noah-zaitlen&#34;&gt;Meena Subramaniam (Jimmie Ye and Noah Zaitlen)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ricardo-doliveira-albanus-steve-parker-hey-i-know-this-guy&#34;&gt;Ricardo D’Oliveira Albanus (Steve Parker!!! &amp;lt;– Hey I know this guy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#christina-leslie&#34;&gt;Christina Leslie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pejman-mohammadi-tuuli-lappalainen&#34;&gt;Pejman Mohammadi (Tuuli Lappalainen)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#erik-garrison-richard-durbin&#34;&gt;Erik Garrison (Richard Durbin)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#masa-roller-paul-flicek&#34;&gt;Masa Roller (Paul Flicek)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;intro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Very sparse and poorly written notes covering &lt;a href=&#34;https://twitter.com/search?q=%23BoG18&amp;amp;src=tyah&#34;&gt;#BoG18&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typos everywhere. Things may change dramatically over time as I scan back through notes.&lt;/p&gt;
&lt;p&gt;I’ve tried to respect #notwitter. Will be updated periodically.&lt;/p&gt;
&lt;p&gt;Speaker (Last Author)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;genome-engineering-and-genome-editing-tuesday-night&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Genome Engineering and Genome Editing (Tuesday Night)&lt;/h1&gt;
&lt;div id=&#34;jef-boeke&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jef Boeke&lt;/h2&gt;
&lt;div id=&#34;writing-genomes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Writing Genomes&lt;/h3&gt;
&lt;p&gt;Building synthetic yeast genomes. Contig/chr one by one. All designed. &lt;em&gt;Sc2.0&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;80+% complete for each of the 16.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dark-matter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;“dark matter”&lt;/h3&gt;
&lt;p&gt;Can we use ‘big dna’ to functionally query mammalian genomes?
‘Synthetic haplotypes’&lt;/p&gt;
&lt;p&gt;Building dif combinations of haplotype blocks&lt;/p&gt;
&lt;p&gt;synthetic hypervariation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- query enhancers
- alt splicing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;built 102kb locus (human) and put into yeast&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- built in 3kb chunks and can assemble dif combiations&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;big-dna&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;big dna&lt;/h3&gt;
&lt;p&gt;Can build big dna pieces
CEGS grant
will build 3 100kb+ loci / year
want community input&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;greg-findlay-jay-shendure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Greg Findlay (Jay Shendure)&lt;/h2&gt;
&lt;p&gt;Accurate classficiation of thousands of BRCA1 variants with saturation genome editing&lt;/p&gt;
&lt;p&gt;vous a problem
BRCA1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4243 clinvar snvs&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;50% VOUS&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to functionally validate?&lt;/p&gt;
&lt;p&gt;Use Homology-direct repair (HDR). Can engineer precise edits.&lt;/p&gt;
&lt;p&gt;Use a library of SNVs for the HDR&lt;/p&gt;
&lt;p&gt;Over time selecdtion removes non functional edits&lt;/p&gt;
&lt;p&gt;Each experimente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;millions of cells&lt;/li&gt;
&lt;li&gt;millions of sequencing reads to count SNVs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variable effects at splicing junctions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sometimes just 2-3 bp&lt;/li&gt;
&lt;li&gt;sometimes 9 base pairs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;also have matched rna-seq data&lt;/p&gt;
&lt;p&gt;aberrant splicing causes RNA depletion&lt;/p&gt;
&lt;p&gt;matches up really well with clinvar designations&lt;/p&gt;
&lt;p&gt;question:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hdr effeciency rate? 10-90% effectiveness&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;stephen-levene-andrew-fire&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stephen Levene (Andrew Fire)&lt;/h2&gt;
&lt;p&gt;eccDNA is a possible mediator of chromosomal polymorphism at multple loci&lt;/p&gt;
&lt;p&gt;‘physical chemist by training’&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;coli genome: 1 femtoliter volume&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;100 fold compaction problem (DNA)&lt;/p&gt;
&lt;p&gt;~10k fold for mammalian&lt;/p&gt;
&lt;p&gt;Techniques for DNA/chromiatin flexibility:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hi-C&lt;/li&gt;
&lt;li&gt;FISH&lt;/li&gt;
&lt;li&gt;SLICE (Beagrie et al Nature 2017)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eccDNA (circular dna outside chromosome/nucleus(?))&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unclear how it forms&lt;/li&gt;
&lt;li&gt;elevated levels associatd with genome instability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;how to capture?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNA -&amp;gt; SDS lysis -&amp;gt; isolate gDNA -&amp;gt; cscl gradient -&amp;gt; bottom bit&lt;/li&gt;
&lt;li&gt;or exoV treatment (leaves circular alone)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;take pictures of the loops with high resolution microscopy&lt;/p&gt;
&lt;p&gt;sequenced a few (&lt;strong&gt;unfortunately with short read illumina&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;modeled with molecular dynamics&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;david-truong-jef-boeke&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;David Truong (Jef Boeke)&lt;/h2&gt;
&lt;p&gt;Resurrection of Histone H3k27 Me in brewer’s yeast by human prc2 and plant atxr6&lt;/p&gt;
&lt;p&gt;human pathway reconstruction in yeast&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoid pleiotropy (hopefully)&lt;/li&gt;
&lt;li&gt;more real than &lt;em&gt;in vitro&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yeast (s. cerevisiae) lost histone mods&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding them back???&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;yes&lt;/p&gt;
&lt;p&gt;humanize yeast histones&lt;/p&gt;
&lt;p&gt;add synthetic human histones&lt;/p&gt;
&lt;p&gt;force out wt histones with +5FOA&lt;/p&gt;
&lt;p&gt;&lt;em&gt;20 days later&lt;/em&gt; ….. one colony&lt;/p&gt;
&lt;p&gt;Keep growing the colony out&lt;/p&gt;
&lt;p&gt;WGS: mutations in cell cycle regulation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bypassing histone cycle checks?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;brewer’s yeast does not have H3K27 methylation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRC2 complex (to methylate h3k27)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add the stuffs - what happens?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;made artifical chr with PRC2 complex
&lt;ul&gt;
&lt;li&gt;and a slightly broken one&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;not much happens in WT yeast
&lt;ul&gt;
&lt;li&gt;no me changes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;deleted H3k36me3 (might antagonize artificial chr)
&lt;ul&gt;
&lt;li&gt;nope&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;can you jump start with atxr6 (does mono me)?
&lt;ul&gt;
&lt;li&gt;yes (confirmed with mass spec)
&lt;ul&gt;
&lt;li&gt;not super high levels (0.054% tri me)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;feng-zhang&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Feng Zhang&lt;/h2&gt;
&lt;p&gt;Advances in genome editing technologies&lt;/p&gt;
&lt;p&gt;two major classes of CRISPR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class 1 (multi subunut)&lt;/li&gt;
&lt;li&gt;class 2 (single subunit crRNA-effector)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;trying to find new class 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bioinformatic screen with BLAST of cas1&lt;/li&gt;
&lt;li&gt;found a bunch (Shmakov collaboration)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cas13&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;added into e. coli&lt;/li&gt;
&lt;li&gt;modify to only edit RNA?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rna editing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reversible&lt;/li&gt;
&lt;li&gt;nuclease based editing inefficient in post mitotic cells&lt;/li&gt;
&lt;li&gt;dCas13 linked with &lt;a href=&#34;https://en.wikipedia.org/wiki/ADAR&#34;&gt;ADAR&lt;/a&gt; (adenosine to inosine) + guideRNA –&amp;gt; A to I conversion in RNA&lt;/li&gt;
&lt;li&gt;90+% conversion&lt;/li&gt;
&lt;li&gt;1732 off target incidents
&lt;ul&gt;
&lt;li&gt;925 off target with non-targeting guide!&lt;/li&gt;
&lt;li&gt;so protein itself is not ideal….&lt;/li&gt;
&lt;li&gt;identified non-binding residues of ADAR
&lt;ul&gt;
&lt;li&gt;mutated them&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;v2 works better
&lt;ul&gt;
&lt;li&gt;18385 off target (v1) to 20 (v2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;still developing&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;molly-gasperini-jay-shendure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Molly Gasperini (Jay Shendure)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;my fav of the night&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;crisprQTL mapping as a genome-wide association framework for cellular genetic screens&lt;/p&gt;
&lt;p&gt;lots of guideRNA to made mutations, check for dif in expression&lt;/p&gt;
&lt;p&gt;nuclease inactive cas9&lt;/p&gt;
&lt;p&gt;want to test all enhancers against all genes&lt;/p&gt;
&lt;p&gt;scRNA-seq + guideRNA (multiplex gRNA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;thus multiple perturbations per ‘assay’&lt;/li&gt;
&lt;li&gt;15-30 / cell!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;targeted 1,119 candidate enhancers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15 guides / cell&lt;/li&gt;
&lt;li&gt;47k cells&lt;/li&gt;
&lt;li&gt;10X&lt;/li&gt;
&lt;li&gt;CROP-seq&lt;/li&gt;
&lt;li&gt;works really well&lt;/li&gt;
&lt;li&gt;crisprQTL usually targets closest gene
&lt;ul&gt;
&lt;li&gt;sometimes not….&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;matches up with histone chip-seq&lt;/li&gt;
&lt;li&gt;34.3kb average distance from enhancer &amp;lt;-&amp;gt; gene&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** new data! **
4,801 enhancers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;built logistic regression model on pilot to pick new candidates&lt;/li&gt;
&lt;li&gt;30 guides / cell&lt;/li&gt;
&lt;li&gt;correlates with pilot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;manolis kellis q:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;why doesn’t work so well? expected more&lt;/li&gt;
&lt;li&gt;what about multiple SNPS / block?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;eilon-sharon-hunter-fraser&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eilon Sharon (Hunter Fraser)&lt;/h2&gt;
&lt;p&gt;Testing genetic var effect on fitness using precise genome editing&lt;/p&gt;
&lt;p&gt;high throughput edigint&lt;/p&gt;
&lt;p&gt;crispey:
cas9 retron precise parallel editing via homology&lt;/p&gt;
&lt;p&gt;use bacterial reverse transcriptase and RNA retron to covalently link ssDNA donor to guide-tracrRNA&lt;/p&gt;
&lt;p&gt;can insert long sequences&lt;/p&gt;
&lt;p&gt;(yeast)&lt;/p&gt;
&lt;p&gt;measure fitness of genetic variants (growth competition)&lt;/p&gt;
&lt;p&gt;sequence every 2-3 gens&lt;/p&gt;
&lt;p&gt;model at linear relative strain abundance / time (generation #)&lt;/p&gt;
&lt;p&gt;# missense var ~ # synonymous var for effecting fitness!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;luca-pinello&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Luca Pinello&lt;/h2&gt;
&lt;p&gt;CRISPR-SURF exploratory and interactive software for analyzing CRISPR-base tiling screens&lt;/p&gt;
&lt;p&gt;Uncover non-coding functional regions&lt;/p&gt;
&lt;p&gt;** Nice overview of CRISPR tiling strategy **
Mutate (tile across region) -&amp;gt; Measure pheno change (somehow) -&amp;gt; Assess (sequence gRNA)&lt;/p&gt;
&lt;p&gt;No unified framework to analyze these kind of assays&lt;/p&gt;
&lt;p&gt;many challenges&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;biological noise&lt;/li&gt;
&lt;li&gt;sgRNA efficiencies&lt;/li&gt;
&lt;li&gt;non-uniform spacing&lt;/li&gt;
&lt;li&gt;perturbation / assay differences&lt;/li&gt;
&lt;li&gt;epigenetic perturbation can be wide (changing 200bp or so)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deconvolve with generalized lasso&lt;/p&gt;
&lt;p&gt;fastq -&amp;gt; score -&amp;gt; segmentation -&amp;gt; deconvolution -&amp;gt; region ID&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;population-genomics-wednesday-morning&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Population Genomics (Wednesday morning)&lt;/h1&gt;
&lt;div id=&#34;mattias-joakobsson&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mattias Joakobsson&lt;/h2&gt;
&lt;p&gt;** out of my field here **&lt;/p&gt;
&lt;p&gt;Sequence based approaches utilizing complete modern and ancient genomes to investigate early human history&lt;/p&gt;
&lt;p&gt;Use full genomes on ancient pops&lt;/p&gt;
&lt;p&gt;Population divergence models&lt;/p&gt;
&lt;pre class=&#34;ascii&#34;&gt;&lt;code&gt;                      X
     +                X
     |                X
     |                X
     |                X
     |               XXXX
     |              XX  XXX
time |           XXX      XX
     |         XXX         XX
     |        XX            XX
     |
     |      A B              C
     |
     v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can model whether discordant or concordant (a,b,c) over time&lt;/p&gt;
&lt;p&gt;estimate pop divergence (time) in generations&lt;/p&gt;
&lt;p&gt;use genes from different populations to estimate divergence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘tt method’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stone age humans from sourthern africa&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;13 genomes from 3 people&lt;/li&gt;
&lt;li&gt;a bit ‘right’ of yoruba&lt;/li&gt;
&lt;li&gt;admixture with east africa &lt;strong&gt;missed something&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;jaemin-kim-elaine-ostrander&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jaemin Kim (Elaine Ostrander)&lt;/h2&gt;
&lt;p&gt;Genetic Selection of Athletic Success in Sport Hunting Dogs&lt;/p&gt;
&lt;p&gt;WGS of sport hunting (10 breeds), terrier (i breeds), and ‘village’ dogs (unselected - an outgroup)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 million SNPs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;59 genes under strong selectdion in hunting dogs (compare to terrier and village)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blood circulation GO terms&lt;/li&gt;
&lt;li&gt;and a bunch of ‘process’ GO terms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ASIC3 - resistance to muscle fatigue?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maybe?&lt;/li&gt;
&lt;li&gt;a guess based on known gene function (I think)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dogs do agility performance competitions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;made a metric to find breeds good at winning&lt;/li&gt;
&lt;li&gt;WGS of 92 breeds of 299 dogs&lt;/li&gt;
&lt;li&gt;ROBO1 significant 3e-4 (FDR corrected? Don’t know)
&lt;ul&gt;
&lt;li&gt;neuronal migration, axon guidance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1243 SNP chip
&lt;ul&gt;
&lt;li&gt;dogs classified by agility performance&lt;/li&gt;
&lt;li&gt;** do only pure breeds do agility? **&lt;/li&gt;
&lt;li&gt;ROBO1 SNP AF increases with more winning breeds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;racing speeds (whippet)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not ROBO1&lt;/li&gt;
&lt;li&gt;TRPM3 (1.6e-3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CDH23 - increased tolerance to loud noise and low startle reflex
- &lt;strong&gt;do hunting dogs have poor hearing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Useful stuff maybe for competitive dog breeders&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Q (Kellis?): polymorphic nature of traits across dogs. &lt;strong&gt;what’s the question?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: complex traits, incomplete answers right now&lt;/p&gt;
&lt;p&gt;Q (Kellis?): enrollment bias for dogs that will win&lt;/p&gt;
&lt;p&gt;A: tried to control by grouping breeds&lt;/p&gt;
&lt;p&gt;Q: what kind of mutations?&lt;/p&gt;
&lt;p&gt;A: mostly noncoding (&lt;strong&gt;answer in LD I guess&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Q: project personality onto dog … look at dog behavior/traits relating to this?&lt;/p&gt;
&lt;p&gt;A: try to objectively test dogs (can’t trust owners….)&lt;/p&gt;
&lt;p&gt;Elaine: people developing stanrdard tests for dogs (yes, owners lie)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ipsita-agarwal-molly-przeworski&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ipsita Agarwal (Molly Przeworski)&lt;/h2&gt;
&lt;p&gt;Widespread differences in the mtation spectrum of X and autosomes&lt;/p&gt;
&lt;p&gt;Males contrigute more germline mutations than females&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epigenetic differences for gamete development (methylation)&lt;/li&gt;
&lt;li&gt;sperm in mitosis all the time&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;ascii&#34;&gt;&lt;code&gt;+
|
|
|                         XX
|                       XXX
|                    XX
|                  X
|               XX
|             X
|       X XX
|   XXXX
|  XX
|                 XXXX
|   XXXX XXX  XXXXX
|
+------------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mutation rates get wider as males age (top line male, bottom female)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eyeball 3x worse?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GnomAD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;120 million SNPs&lt;/li&gt;
&lt;li&gt;60% singleton (50%) and doubletons (10%) for variants&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looked for X-autosome difs&lt;/p&gt;
&lt;p&gt;X/A diversity = (mutations(x) / all X) / (mutation(a) / all a)
(a is autosome, x is chrX)&lt;/p&gt;
&lt;p&gt;Bootstrap test for mutation types to make null distribution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;big shift in X (more than expected)&lt;/li&gt;
&lt;li&gt;T-&amp;gt;A and C-&amp;gt;A more common in X versus autosome&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Replication timing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inactive X has more mutations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enriched of C&amp;gt;G (meiotic recombination / DSB) mutations&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;amnon-koren&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Amnon Koren&lt;/h2&gt;
&lt;p&gt;Genetic architecture of human DNA replication origin activity&lt;/p&gt;
&lt;p&gt;We have extensive maps of human genomic / epigenomic&lt;/p&gt;
&lt;p&gt;But where are replication origins?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yeah….good q&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;yeast have them
&lt;ul&gt;
&lt;li&gt;yeast have a DnaA/OriC signatures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;how to find?
&lt;ul&gt;
&lt;li&gt;many techniques - don’t agree well (or at all)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;different parts of genomic replicate at different rates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;can measure coverage across time, right&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;yes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;sort G / S phase
&lt;ul&gt;
&lt;li&gt;check coverage&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Did in 2012 with human - but not precise enough (low resolution)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Is this a polymorphic trait?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;skipped cell sorting&lt;/li&gt;
&lt;li&gt;works well enough
&lt;ul&gt;
&lt;li&gt;and way faster to do&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uh, wait, this has been done already (if cells are growing)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;again, yes, LCL from 1000G&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But still, did WGS &amp;gt;140 hESC lines&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oooooo, reproduces REALLY well&lt;/li&gt;
&lt;li&gt;find ‘master’ ORI that are pretty much always present
&lt;ul&gt;
&lt;li&gt;crucial regions in replication?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GWAS of DNA replication timing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘rtQTL’ (replication timing)&lt;/li&gt;
&lt;li&gt;big hit on chr7&lt;/li&gt;
&lt;li&gt;756 with FDR &amp;lt; 0.1&lt;/li&gt;
&lt;li&gt;most fall within replication origin
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;direct relationship, then, cool&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;getting causal SNPs with CAVIAR&lt;/li&gt;
&lt;li&gt;enriched with active chromatin states&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;perhaps some QTL stabilize TF binding motifs
- stuff happening in motifs&lt;/p&gt;
&lt;p&gt;Q: look for associations with structural variation? (1000G data)&lt;/p&gt;
&lt;p&gt;A: looking at this now&lt;/p&gt;
&lt;p&gt;Q: cell type specific? (&lt;strong&gt;thank you&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;A: 20-30% are dif across cell types (&lt;strong&gt;cool&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Q: is ORI piggybacking on enhancer / regulatory system? (&lt;strong&gt;or other way around??&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;A: maybe (or other way around)&lt;/p&gt;
&lt;p&gt;Q: cis effects - did you find any trans or pleiotropy?&lt;/p&gt;
&lt;p&gt;A: nothing strong (spurious stuff maybe?)&lt;/p&gt;
&lt;p&gt;Q: HiC/3C data profiles comparisons?&lt;/p&gt;
&lt;p&gt;A: not &lt;em&gt;yet&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sarah-tishkoff&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sarah Tishkoff&lt;/h2&gt;
&lt;p&gt;Novel loci associated with skin pigmentation identified in African populations&lt;/p&gt;
&lt;p&gt;Integrative omics of copmlex traits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;epigenomics&lt;/li&gt;
&lt;li&gt;transcriptomes&lt;/li&gt;
&lt;li&gt;microbiome&lt;/li&gt;
&lt;li&gt;metabolomics&lt;/li&gt;
&lt;li&gt;proteomics&lt;/li&gt;
&lt;li&gt;genomics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LOTS OF POSTERS&lt;/p&gt;
&lt;p&gt;200 WGS Aricans
- 35 million SNPS
- 20% novel&lt;/p&gt;
&lt;p&gt;81% GWAS european&lt;/p&gt;
&lt;p&gt;Skin color is adaptive trait
- spectrophotometry of skin color
- and take DNA
- boom GWAS
- 1600 people
- found 8 regions&lt;/p&gt;
&lt;p&gt;SLC24A5&lt;/p&gt;
&lt;p&gt;MFSD12
- novel
- transmembrane transporters
- found enhnacer activity
- functional work!
- KO mRNA in melanocyptes
- get more melanin
- colocalizes with lysosome
- ZF KO
- yellow gone
- mouse KO
- diff colors
- looks like gr/gr mouse
- 9bp deletion in MFSD12!&lt;/p&gt;
&lt;p&gt;DDB1
- DNA repair in UV damage
- pigmentation in tomatoes
- fine mapping hits TMEM128
- luciferase assay with enhancer activity
- huge haplotype blocks of low het in europeans/asians
- selective sweep, near complete fixation&lt;/p&gt;
&lt;p&gt;OCA2/HERC2
- exon10 SNP alt splicing
- rs1800404&lt;/p&gt;
&lt;p&gt;convergent evolution of very dark skin
- african and south asia&lt;/p&gt;
&lt;p&gt;q: speculate about lysosome?&lt;/p&gt;
&lt;p&gt;a: pheomelanin made in lysosome (like) structure?&lt;/p&gt;
&lt;p&gt;q: surprised to not find var close to mcr1
a: no&lt;/p&gt;
&lt;p&gt;q: chimp with no hair has vitiligo?&lt;/p&gt;
&lt;p&gt;a: dont’ think so - have been assured chimps have light skin&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;patrick-albers-gil-mcvean&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Patrick Albers (Gil McVean)&lt;/h2&gt;
&lt;p&gt;Non-parametric estimation of allele age for variants in pop-scale seq data&lt;/p&gt;
&lt;p&gt;Want to know history of allele at single locus&lt;/p&gt;
&lt;p&gt;Genealogical approach (GEVA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;look for coalescent events
&lt;ul&gt;
&lt;li&gt;concordant and discordance allele pairs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;use HMM to detecdt haplotypes segments
&lt;ul&gt;
&lt;li&gt;non parametric&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;assess allele age…not sure how
&lt;ul&gt;
&lt;li&gt;incorporate time some how?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;model with real data to pick parameters??&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;model
- simulation with simple pop, const size, fixed mut rate
- compare estimate with actual
- good cor (0.953)&lt;/p&gt;
&lt;p&gt;also tested in error-filled data
- haplotypes, errors, phasing issues
- still works, but overestimate young alleles (think they are older)&lt;/p&gt;
&lt;p&gt;ran in simons genetci diversity project and 1000G
- oldest var ~37.5k years in AFR
- SAS 12.5K
- EAS 11K
- AMR 7.5K
- EUR 6K (why so young? - admixture)&lt;/p&gt;
&lt;p&gt;cumulative coalescent decoding (CCD)
- what frac of your genome share with another genome back in time?
- ran this pair-wise across 1000G dataset&lt;/p&gt;
&lt;p&gt;&lt;em&gt;will release a genome-wide atlas of allele age &amp;gt;16 million variants&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;laura-hayward-guy-sella&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Laura Hayward (Guy Sella)&lt;/h2&gt;
&lt;p&gt;Polygenic adaptation in response to sudden change in environment&lt;/p&gt;
&lt;p&gt;What time scale? Mentioned Human expansion out of Africa, which is ~100k years&lt;/p&gt;
&lt;p&gt;stabilizing selection reduces pheontypic variance (omega is width of trait distribution)
- kingsolver et al. 2001&lt;/p&gt;
&lt;p&gt;model change of phenotpye in environment change&lt;/p&gt;
&lt;p&gt;OK…not following this talk well at all (pretty sure it’s me). Laura is copiously using cartoons, which is usually works for fools like me.&lt;/p&gt;
&lt;p&gt;not cetain whether this stuff is driven by theory or data or both
- no, no data
- equations from first princples&lt;/p&gt;
&lt;p&gt;conclusions:
- polygenic adaption is rapid
- short term: large effects drive change
- long term: moderate effect alleles replace them&lt;/p&gt;
&lt;p&gt;topol Q: is this like dogs? big changes in short term&lt;/p&gt;
&lt;p&gt;a: no, not modeling dramatic changes like this&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;functional-genetics-and-epigenomics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Functional Genetics and Epigenomics&lt;/h1&gt;
&lt;div id=&#34;job-dekker&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Job Dekker&lt;/h2&gt;
&lt;p&gt;Folding, unfolding, and refolding genomes&lt;/p&gt;
&lt;p&gt;How does the genome work? &lt;strong&gt;structured&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dekker et al. 2002: 3C. &lt;strong&gt;I remember this paper. And totally failing at doing this tech myself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A/B compartments….TAD…..enhancer - gene loops. One slide summarzing many publications and of cool work.&lt;/p&gt;
&lt;pre class=&#34;ascii&#34;&gt;&lt;code&gt;                                TAD
                                                loop (cohesin-mediated)
                 loop (cohesin-mediated)       XXXX 
                XXXX                         XX   XX
              XXX   XXX                     XX      XXX
            XX        XX                  XX           XX
          XX            XX              XXX              XX
        XX                X           XXX                  XXX
      XX                   XX        XX                      XX
    XXX                      XX    XXX                         XXX
  XX                          XXXXX                              XX
 XXXX                           X                XXXXXXXX       XXXX
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX       XXX X XX
ctcf                           ctcf                                 ctcf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interphase / metaphase
- interphase has structure
- metaphase erases structure (fat diagonal of 3c map)&lt;/p&gt;
&lt;p&gt;meiotic chr fold as helical nested loop arrays (helix with loops coming off)
- Gibcus…Dekker Science 2018&lt;/p&gt;
&lt;p&gt;Using ATAC-seq, cut&amp;amp;ruhn to assay CTCF binding patterning in interphase / metaphase&lt;/p&gt;
&lt;p&gt;FRAP to measure stable CTCF binding in interphase / metaphase
- unstable in metaphase&lt;/p&gt;
&lt;p&gt;Q: CTCF sites occupied in mitosis - why? Nucleosomes taking over?&lt;/p&gt;
&lt;p&gt;A: Good q, don’t know. Think nucleosomes ‘sliding in’&lt;/p&gt;
&lt;p&gt;Q: &lt;strong&gt;missed it&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: protein levels of CTCF doesn’t change during what phase cell is in&lt;/p&gt;
&lt;p&gt;Q: what is keeping the promoters open during mitosis&lt;/p&gt;
&lt;p&gt;A: don’t think pol is bound….promoters more open to begin with….something bookmarking the site????&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;flora-vaccarino&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Flora Vaccarino&lt;/h2&gt;
&lt;p&gt;Integrative multi-omics analyses of iPSC-derived brain organioids&lt;/p&gt;
&lt;p&gt;#notwitter&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;carninci&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Carninci&lt;/h2&gt;
&lt;p&gt;RADICL-seq: novel tech for genome-wide mapping of RNA-chromatin interactions&lt;/p&gt;
&lt;p&gt;Many many (~20k) functiona lncRNA&lt;/p&gt;
&lt;p&gt;But what is role? Activate genes, promoter, enhancer? Repression of genes? Establish insulation?&lt;/p&gt;
&lt;p&gt;RADICL-seq
- capture RNA-DNA interactions with crosslinking (formaldehyde, 1-2%)&lt;/p&gt;
&lt;p&gt;Where do they map?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lots in the intron&lt;/li&gt;
&lt;li&gt;open chromatin&lt;/li&gt;
&lt;li&gt;380k RNA-DNA interactions&lt;/li&gt;
&lt;li&gt;enriched in TF family members&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;looks like lots of trans interactions&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;but way fewer than cis,as you would expect&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;some genes like MALAT1 interact with &lt;em&gt;entire&lt;/em&gt; genome&lt;/li&gt;
&lt;li&gt;compartments &lt;strong&gt;sort of&lt;/strong&gt; like TADS
&lt;ul&gt;
&lt;li&gt;weak cor with Hi-C (0.27)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;johnathan-griffiths-berthold-gottgens&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Johnathan Griffiths (Berthold Gottgens)&lt;/h2&gt;
&lt;p&gt;Charting the Diversification of Mammalian Cells at whole genome scale&lt;/p&gt;
&lt;p&gt;Gastrulation focus (mouse)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;350 whole embryos&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Collected every 6 hours: e6.5 to e8.5&lt;/p&gt;
&lt;p&gt;10X chromium, 94k cells (post QC), 15,000 UMI (median), 3.5k detected genes (median)&lt;/p&gt;
&lt;p&gt;Big t-SNE plot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;talk of ‘direction’ and ‘trajectory’ which I dislike for t-SNE…&lt;/li&gt;
&lt;li&gt;but can back up with time point data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clustered with association of cell types to each other&lt;/p&gt;
&lt;p&gt;Chimera embryos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KO gene, but only chimerically (inject KO mESC into blastocyst)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;whoah&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;can compare KO &lt;strong&gt;cells&lt;/strong&gt; vs not KO &lt;strong&gt;cells&lt;/strong&gt; within full atlas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;damn&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;emma-farley&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Emma Farley&lt;/h2&gt;
&lt;p&gt;Regulatory principles governing enhancer specificity during development&lt;/p&gt;
&lt;p&gt;Otxa (neural enhancer)&lt;/p&gt;
&lt;p&gt;How do enhancers encode function?&lt;/p&gt;
&lt;p&gt;Need to test in embryos across time&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ciona&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have notochord, heart&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;enhnacer + prom + gfp -&amp;gt; electroporation == inside embryo&lt;/p&gt;
&lt;p&gt;made 2.5 million synthetic enhancers (barcoded)&lt;/p&gt;
&lt;p&gt;electroporate 100k eggs -&amp;gt; mRNA -&amp;gt; sequence (remember, we have barcodes) -&amp;gt; identify functional enhancers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pooling of embryos?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;doesn’t seem like it…but seems like you have too for $&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can we we make inert enhancers functional with small tweaks (change to optimal seq)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lights up EVERYTHING&lt;/li&gt;
&lt;li&gt;&lt;em&gt;need mix of optimal and sub-optimal sites to maintain proper expression&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;spacing between enhancers also important&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding just a few bp between motifs &amp;gt;&amp;gt;&amp;gt; expression&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;interplay between spacing and motif ‘strength’ (canonical-ness)&lt;/p&gt;
&lt;p&gt;and &lt;em&gt;orientation&lt;/em&gt; (flipping motifs can break function)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;suboptimization&lt;/em&gt; as design parameter hilarious and terrifying (great, let’s make things worse to control things more precisely)&lt;/p&gt;
&lt;p&gt;wut - SHH enhancer that causes polydactyly….points out that SNP makes binding site &lt;em&gt;better&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Deboever et al. Cell Stem Cell 2017
D’Antonion et al. Nature communication 2017&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;jake-yeung-felix-naef&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Jake Yeung (Felix Naef)&lt;/h2&gt;
&lt;p&gt;Clock dependent chromatin topology modulates circadian transcdription and behavior&lt;/p&gt;
&lt;p&gt;promoter - enhancer loops&lt;/p&gt;
&lt;p&gt;cry1 24 cycle in liver (high at night, low at day)&lt;/p&gt;
&lt;p&gt;how are enhancers used?&lt;/p&gt;
&lt;p&gt;4c-seq on mice collected every 4 hours for 24 hours&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contacts change over time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;h3k27ac changes also at same location&lt;/p&gt;
&lt;p&gt;removed that region in mouse: cry1deltaE mouse&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clock runs faster (15 mins over 24 hours)&lt;/li&gt;
&lt;li&gt;corresponding mRNA difs in cry1&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;minal-caliskan-casey-brown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Minal Caliskan (Casey Brown)&lt;/h2&gt;
&lt;p&gt;Genetic and epigenetic fine mapping of complex trait associated loci in the human liver&lt;/p&gt;
&lt;p&gt;Genotype &amp;lt;-&amp;gt; RNA-seq &amp;lt;-&amp;gt; H3K4me3 &amp;lt;-&amp;gt; H3K27ac
50 &amp;lt;-&amp;gt; 50 &amp;lt;-&amp;gt; 10 &amp;lt;-&amp;gt; 10 (people)&lt;/p&gt;
&lt;p&gt;Found eQTLs specific to liver (vs GTEX)&lt;/p&gt;
&lt;p&gt;Found hQTLS also (histone)&lt;/p&gt;
&lt;p&gt;eQTL + hQTL + RNA-seq to ‘fine map’ GWAS loci&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blood pressure&lt;/li&gt;
&lt;li&gt;coronary artery disease&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;parisa-razaz-talkwoski&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parisa Razaz (Talkwoski)&lt;/h2&gt;
&lt;p&gt;Tissue-specific molecular sigmnature of 16p11.2 reciprocal genomic disorder&lt;/p&gt;
&lt;p&gt;engineer rgd with CRISPR (make microdels and microdups)&lt;/p&gt;
&lt;p&gt;iPSCs models and mouse models with tx profiling (brain and not brain)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;evolutionary-and-non-human-genomics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Evolutionary and Non-human genomics&lt;/h1&gt;
&lt;div id=&#34;monica-justice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Monica Justice&lt;/h2&gt;
&lt;p&gt;Informing human genetic variation and therapeutic entruy poitns through modififer screens in mice&lt;/p&gt;
&lt;p&gt;Rett syndrome&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x-linked&lt;/li&gt;
&lt;li&gt;1/10,000 live female births&lt;/li&gt;
&lt;li&gt;developmental regression&lt;/li&gt;
&lt;li&gt;fatal in males&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MeCP2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ubiquitously expressed (highest in neuron)&lt;/li&gt;
&lt;li&gt;regulate gene expression&lt;/li&gt;
&lt;li&gt;chromatin modifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can a second mutation improve pathological phenotype?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forward genetic unbiased screen in mice&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how to assess phenotype???&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;random mutagenesis (ENU)
&lt;ul&gt;
&lt;li&gt;of males&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;evaluate symptons to make a ‘health score’
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;eek, so a LOT of work&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;screen 3200 mice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exome seq G1 founder male for candidate phenotype
- 20-99 new lesions
- backcross
- mate 10 G2
- analyze 10 G3 offspring&lt;/p&gt;
&lt;p&gt;many pathways affected&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;including DNA repair and lipid metabolism&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sum3 line (null allele of Sqle)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dysregulation of cholesterol pathway&lt;/li&gt;
&lt;li&gt;brain lipd turnover fails&lt;/li&gt;
&lt;li&gt;other lipids overproduced&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other mutations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NCoR1/SMRT&lt;/li&gt;
&lt;li&gt;HDAC3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interventions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statin drugs to decrease cholesterol biosynthesis&lt;/li&gt;
&lt;li&gt;clinical trial just finished&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sum6 line: Rbbp8 (aka Ctp1, Sae2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DSB (double strand break) repair
&lt;ul&gt;
&lt;li&gt;MeCP2 null alleles prone to DNA damage…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BRCA1 as cofactor
&lt;ul&gt;
&lt;li&gt;found mutations in this too that surpress symptons&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;combination therapy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DSB + lipid metabolism&lt;/li&gt;
&lt;li&gt;with mouse mut can ‘cure’ disease&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;great talk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;q: radio sensitivity?&lt;/p&gt;
&lt;p&gt;a: yes, higher DSB. cortex highly effected, even in cells that don’t divide&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arang-rhie-erich-jarvis-adam-phillippy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arang Rhie (Erich Jarvis, Adam Phillippy)&lt;/h2&gt;
&lt;p&gt;Genome10K Vertebrate genomes Project&lt;/p&gt;
&lt;p&gt;generate error-free reference-quality gnomes assemblies for &lt;strong&gt;all&lt;/strong&gt; 66k extant vertebrate species&lt;/p&gt;
&lt;p&gt;why? because bad ref genomes are super confusing to work with when YFG (your favorite gene) is missing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bad assembly a major contributor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;goals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;1 Mb N50&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;QV40&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;both haplotypes (&lt;strong&gt;eek&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;big scaffold&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;90% reads to right chr/contig&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;only 16 genomes approaching these goals (NCBI, exclude human/mouse)&lt;/p&gt;
&lt;p&gt;name drop awesome goat paper from phillippy group&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PacBio + Hi-C + Illumina + Optical Map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phase 1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 orders, 266 species&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PacBio for contigs&lt;/li&gt;
&lt;li&gt;Scaffolding with: 10X, Bionano, Hi-C&lt;/li&gt;
&lt;li&gt;Gap filling with PacBio (and base polishing&lt;strong&gt;?&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evaluation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gEVAL (Chow et al. 2016)
&lt;ul&gt;
&lt;li&gt;k-mer com-leteness&lt;/li&gt;
&lt;li&gt;synteny&lt;/li&gt;
&lt;li&gt;gene completeness (BUSCO Simao et al 2015)&lt;/li&gt;
&lt;li&gt;KAT&lt;/li&gt;
&lt;li&gt;Mashmap2&lt;/li&gt;
&lt;li&gt;Evol.Highway&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data Release!!!!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vertebrategenomesproject.org&#34; class=&#34;uri&#34;&gt;https://www.vertebrategenomesproject.org&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;link doesn’t work??&lt;/li&gt;
&lt;li&gt;oh, it does (click through)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sanger.ac.uk/science/data/vertebrate-genomes-project&#34; class=&#34;uri&#34;&gt;https://www.sanger.ac.uk/science/data/vertebrate-genomes-project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Heterozygosity causes allelic dup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zebrafinch very high&lt;/li&gt;
&lt;li&gt;using trio binning for phasing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;q: annotations?&lt;/p&gt;
&lt;p&gt;a: we have a working group….&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;olga-dudchenko-erez-lieberman-aiden&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Olga Dudchenko (Erez Lieberman Aiden)&lt;/h2&gt;
&lt;p&gt;DE NOVO assembly of mammalian genomes with chr-length scaffolds from short reads for &amp;lt;$1000&lt;/p&gt;
&lt;p&gt;pointing out that unnamed company 1k genome requires a good reference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is &lt;em&gt;de novo&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tile reads…contigging…but of course doesn’t work too well when you hit repeats&lt;/p&gt;
&lt;p&gt;can order contigs with linking data (scaffolding)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXPENSIVE and slow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hi-C&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3d genome sequencing&lt;/li&gt;
&lt;li&gt;make genome-wide contact map&lt;/li&gt;
&lt;li&gt;has been used to reassemble known genomes
&lt;ul&gt;
&lt;li&gt;often with MANY other techniques&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;using hi-c contact map to correct contigs/scaffolds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;showing different types of issues (translocations/inversions/etc)&lt;/li&gt;
&lt;li&gt;GUI work to correct assembly?!
&lt;ul&gt;
&lt;li&gt;juicebox, apparently (&lt;a href=&#34;https://www.aidenlab.org/juicebox/&#34; class=&#34;uri&#34;&gt;https://www.aidenlab.org/juicebox/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;‘kids can do this’&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;they have something more automated?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;seems like would be nuts to do with just short reads (100k + pieces)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open to collaborations (&lt;a href=&#34;http://www.aidenlab.org&#34; class=&#34;uri&#34;&gt;http://www.aidenlab.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;100 Million HiC PE150 illumina + 300M DNA-seq PE150 (w2rap)&lt;/p&gt;
&lt;p&gt;3D-DNA suite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$1k&lt;/li&gt;
&lt;li&gt;about a week&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://aidenlab.org/assembly&#34; class=&#34;uri&#34;&gt;http://aidenlab.org/assembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;kasper-munch&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Kasper Munch&lt;/h2&gt;
&lt;p&gt;Multiple selective sweeps removed Neandertha admixture of the X chr in out of Africa pop&lt;/p&gt;
&lt;p&gt;strong selective sweeps in great ape in chr X&lt;/p&gt;
&lt;p&gt;because of inter chromosomal conflict between x and y?&lt;/p&gt;
&lt;p&gt;165 male X chromosome from Simons Genome Diversity Project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SGD gertting name dropped a ton this conference&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;large proportion of very similar haplotyes among non-african people&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;big left spike on density plot&lt;/li&gt;
&lt;li&gt;don’t see in african pop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;what are these haplotypes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;low divergence haplotype defined as dist less than 5e-5 of &amp;gt;25% people in 500kb sliding window&lt;/li&gt;
&lt;li&gt;locations grouped with ethnicity in chrX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;find 500kb sweep spanning non-africans&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;after leaving africa&lt;/li&gt;
&lt;li&gt;but before world-wide spread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;does it overlap human-chimp common ancestor?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;swept chr regions have less archaic admixture
- Skov et al 2018 bioRxiv for method&lt;/p&gt;
&lt;p&gt;trying to get time window of sweep&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;45k years&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;why?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don’t know (for certain)&lt;/li&gt;
&lt;li&gt;‘crazy ideas’
&lt;ul&gt;
&lt;li&gt;two pop leave africa
&lt;ul&gt;
&lt;li&gt;only one meet neanderthal&lt;/li&gt;
&lt;li&gt;then merge&lt;/li&gt;
&lt;li&gt;many small groups leave&lt;/li&gt;
&lt;li&gt;later one big one leaves, which meets neanderthals&lt;/li&gt;
&lt;li&gt;then all merge&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;gavin-sherlock&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gavin Sherlock&lt;/h2&gt;
&lt;p&gt;Joint distribution of fitness effects for beneficial mutations in yeast&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;did a bang up job of keeping first half of session on time&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Interested in adaptive (positive) mutations that improve fitness&lt;/p&gt;
&lt;p&gt;yeast&lt;/p&gt;
&lt;p&gt;‘experimental evolution’&lt;/p&gt;
&lt;p&gt;Lineage tracing system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;random primers&lt;/li&gt;
&lt;li&gt;plasmid library&lt;/li&gt;
&lt;li&gt;barcodes&lt;/li&gt;
&lt;li&gt;generations (with replicates)&lt;/li&gt;
&lt;li&gt;sequence barcodes after each serial transfer
&lt;ul&gt;
&lt;li&gt;beneficial mutation barcodes will increase&lt;/li&gt;
&lt;li&gt;most adapative lineages are rare (&amp;lt;&amp;lt;1%)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;genotype to fitness map (ID beneficial mutations)&lt;/p&gt;
&lt;p&gt;‘narrow in scope’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conditions not very diverse&lt;/li&gt;
&lt;li&gt;what are tradeoffs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‘achieving high fitness across a wide range of habitats is apparently hard’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mutations deleterious&lt;/li&gt;
&lt;li&gt;direct tradeoffs (antognistic pleiotropy)&lt;/li&gt;
&lt;li&gt;lower fitness elsewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;what’s the balance of these three effects?&lt;/p&gt;
&lt;p&gt;So…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;measure fitness in dif environments&lt;/li&gt;
&lt;li&gt;m x n matrix of fitness in environment x alt environment&lt;/li&gt;
&lt;li&gt;exponential scaling….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;added second barcode to mark condition&lt;/p&gt;
&lt;p&gt;evolve populations -&amp;gt; isolate colones -&amp;gt; POOL (second barcode!) -&amp;gt; measure pools across n environments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pleiotropy common&lt;/li&gt;
&lt;li&gt;big cluster with variety of performance in alt conditions&lt;/li&gt;
&lt;li&gt;a few generally useful clones&lt;/li&gt;
&lt;li&gt;many generally bad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;no discussion of variants / genes that increase fitness?? Boooo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;q: look at structural variation?&lt;/p&gt;
&lt;p&gt;a: whole chr dup very common to increase fitness for a few gene. hard to get structural data with short reads&lt;/p&gt;
&lt;p&gt;q: super yeast generalists? what about cycling yeast across conditions repeatedly? genetic basis of super yeast?&lt;/p&gt;
&lt;p&gt;a: have done a bit of flipping across environment. diploids more fit. &lt;strong&gt;really dancing around the genetic basis question&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;update&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;p&gt;Bit unfair to Gavin here (I was just really hoping for some speculation on gene function!). His &lt;a href=&#34;https://twitter.com/gsherloc/status/994617999331069960&#34;&gt;tweet&lt;/a&gt; response:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/./img/bog_sherlock_tweet.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;anne-ruxandra-carvunis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Anne Ruxandra Carvunis&lt;/h2&gt;
&lt;p&gt;The genome’s reservoir of benefical proto-genes&lt;/p&gt;
&lt;p&gt;mechanism of molecular innovation&lt;/p&gt;
&lt;p&gt;proto-genes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;non-genic seq &amp;lt;-&amp;gt; pervasive expression -&amp;gt; adaptive potential -&amp;gt; novel gene&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;yeast genome pervasively tx and has lots of ‘random’ ORFs (open reading frames)&lt;/p&gt;
&lt;p&gt;RiboSeq (Ingolia et al 2009) to ID translated seq&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2k ‘proto-genes’&lt;/li&gt;
&lt;li&gt;match up with RNA-seq&lt;/li&gt;
&lt;li&gt;and predicted ORF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;artifically evolve by systematic overexpression (of proto-genes)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and put WT yeast and check to see who wins over time&lt;/li&gt;
&lt;li&gt;so measuring growth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;find all three classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beneficial (some)&lt;/li&gt;
&lt;li&gt;deleterious&lt;/li&gt;
&lt;li&gt;neutral (most)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;enrichement of proto-genes in beneficial class (OR ~3 &lt;strong&gt;pretty good&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;found 6 generalists&lt;/p&gt;
&lt;p&gt;‘network integration’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what are good proto-genes predicted function&lt;/li&gt;
&lt;li&gt;#notweet
&lt;ul&gt;
&lt;li&gt;(not 100% certain in results yet)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;happy that Anne is sharing a bit about general proto-gene functions&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;compelling stuff&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit confused on network integration …. didn’t see any evidence or discussion of it&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maybe a syntax issue?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;elaine-ostrander&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Elaine Ostrander&lt;/h2&gt;
&lt;p&gt;Catalog of 722 Whole Genome Sequences Reveals Variants Controlling Morphology in Domestic Dogs&lt;/p&gt;
&lt;p&gt;dog GWAS (with WGS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy to do GWAS with low n (do high n lineages)&lt;/li&gt;
&lt;li&gt;easy to find LD block&lt;/li&gt;
&lt;li&gt;hard to find mutation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parker et al. Cell Reports 2017&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;breed relatedness with neighbor joining tree (up to &amp;gt;200 dog breeds)&lt;/li&gt;
&lt;li&gt;found haplotype sharing across breeds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;91 million variants&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;60% low VEP impact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;argh exploded 3d pie charts!!!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lots of filtering, pop stratification ….&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 million vars&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GWAS on the 14 million&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;28 associations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;big table, little text&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;validate on known biology (Furnishing, fur length, height)
&lt;ul&gt;
&lt;li&gt;yes they find the stuff they expect&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LCORL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strong influence on dog size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SMAD2, HMGA2, IGF1, IRS5, IGSF1 (bigger size/weight)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;also for longevity (anti correlated)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ESR1 (leg length)&lt;/p&gt;
&lt;p&gt;lincRNA (near MSR83) (drop ears)&lt;/p&gt;
&lt;p&gt;gorab, chsy3 (tail shape)&lt;/p&gt;
&lt;p&gt;Working to get to 10K dog genomes (Dog10K)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bobbie-cansdale-claire-wade&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bobbie Cansdale (Claire Wade)&lt;/h2&gt;
&lt;p&gt;3D modeling of Hi-C data to investigate spatial organization of the canine genome&lt;/p&gt;
&lt;p&gt;TADs
- modular units of genome struture/organization&lt;/p&gt;
&lt;p&gt;Regions assessed:
- MITF
- ASIP
- RALY
- TYRP1
- MC1R
- KRT71
- RSPO2
- MSRB3
- IFG1&lt;/p&gt;
&lt;p&gt;Qualitative look at genes known to do stuff…and what genes are near them (in Hi-C TAD block)….as far as I could tell.&lt;/p&gt;
&lt;p&gt;3D modeling….haven’t done yet….&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;cancer-and-medical-genomics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cancer and Medical Genomics&lt;/h1&gt;
&lt;div id=&#34;trey-ideker&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Trey Ideker&lt;/h2&gt;
&lt;p&gt;Decoding patient genomes through the hierarchical pathway architecture of the cancer cell&lt;/p&gt;
&lt;p&gt;‘somatic’ eQTL
RNA expression + WGS + enhancers (mapped to genes with GeneHancer) + covariates to calc eQTL
Found ~190 (including positive control TERT)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yeast now&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ppi (protein protein interactions)
- Dutkowski et al 2013 nature methods&lt;/p&gt;
&lt;p&gt;DCell
- neural network guided by hierarchical cell bio
- 3500 cell subsystems (&lt;strong&gt;from ppi?&lt;/strong&gt;)
- 12 layers
- 12 million yeast genotypes (single and pairwise KO)
- &lt;a href=&#34;http://d-cell.ucsd.edu&#34; class=&#34;uri&#34;&gt;http://d-cell.ucsd.edu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DCell a model for what to hope to do one day for human&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rajbir-batra-carlos-caldas&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rajbir Batra (Carlos Caldas)&lt;/h2&gt;
&lt;p&gt;Decoding the dynamics of DNA methylation in breast cancer&lt;/p&gt;
&lt;p&gt;Cluster of breast cancer with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gene expression&lt;/li&gt;
&lt;li&gt;CNV&lt;/li&gt;
&lt;li&gt;miRNA&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Little epigenetics&lt;/p&gt;
&lt;p&gt;So looking at Me&lt;/p&gt;
&lt;p&gt;METABRIC data source&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1482 primary breast tumor&lt;/li&gt;
&lt;li&gt;237 matched adjacent norm&lt;/li&gt;
&lt;li&gt;RRBS (reduced representation bisulfite seq)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Background drift of methylation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tried to pick background regions (not promoters)&lt;/li&gt;
&lt;li&gt;late replication timing associated with higher me&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now look at more functional region&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;but control for background drift&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Change mean methylation from tumor to matched tissue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘epiallelic burden’&lt;/li&gt;
&lt;li&gt;heterogeneous across tumor types&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;patrick-short-matthew-hurles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Patrick Short (Matthew Hurles)&lt;/h2&gt;
&lt;p&gt;Contribution of &lt;em&gt;de novo&lt;/em&gt; mutations in the regulatory elements in neurodevelopment disorders and autisum&lt;/p&gt;
&lt;p&gt;DDD Study (Deciphering Developmental Disorders)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;8k trios&lt;/li&gt;
&lt;li&gt;exome&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Model germline mutation rate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Samocha et al. 2014&lt;/li&gt;
&lt;li&gt;enrichment in missense and PTV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What proportion of remaining cases may be regulatory?&lt;/p&gt;
&lt;p&gt;Regulatory elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;heart enhancers&lt;/li&gt;
&lt;li&gt;VISTA&lt;/li&gt;
&lt;li&gt;Conserved elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Look for variation in elements&lt;/p&gt;
&lt;p&gt;enrichment in fetal brain conserved elements&lt;/p&gt;
&lt;p&gt;manhattan plot not so good (flat)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variety of reasons
&lt;ul&gt;
&lt;li&gt;enhancers shorter&lt;/li&gt;
&lt;li&gt;less consequential than proteins&lt;/li&gt;
&lt;li&gt;poor understanding of enhancer code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can we development noncoding constraint score for deep whole genomes?&lt;/p&gt;
&lt;p&gt;25,000 whole genomes&lt;/p&gt;
&lt;p&gt;mutation rate vary across genome / chr / region&lt;/p&gt;
&lt;p&gt;using random forest to model and use a large number of features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not so successful (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;~160 mb of open chromatin is contrained, most of this is conserved nucleotides in &lt;em&gt;poorly conserved elements&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;thinking that &lt;em&gt;1 million&lt;/em&gt; deep whole genomes to accuratly model small (tfbs) sized elements&lt;/p&gt;
&lt;p&gt;selection on nucleotide level, not ‘peak’/chunk level&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;max-shen-david-gifford&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Max Shen (David Gifford)&lt;/h2&gt;
&lt;p&gt;Predictable and precise template-free editing of pathogneic mutations by CHRSPR-Cas9 nuclease&lt;/p&gt;
&lt;p&gt;High-throughput assay (1872 guideRNA) and deep sequencing to assess mutation pattern&lt;/p&gt;
&lt;p&gt;1262 genotypes / target site&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mostly deletions (almost 90%)&lt;/li&gt;
&lt;li&gt;lots of ‘microhomology’ deletions (60%)
&lt;ul&gt;
&lt;li&gt;deletion with multiple equal quality alignments&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;built dnns to predict mutation pattern&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;three models for microhomology, not microhomology, and insertion (knn for this one)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;inDelphi&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;90% outcomes predicted (70% single bp resolution)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;so mutation patterns are semi-predictable (&lt;strong&gt;semi&lt;/strong&gt; is my language)&lt;/p&gt;
&lt;p&gt;use model to design guideRNA to get more preditable outcome&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nice web app&lt;/strong&gt;
- &lt;strong&gt;can’t find it online…not ready yet&lt;/strong&gt;
- **&lt;a href=&#34;https://github.com/maxwshen/indelphi-dataprocessinganalysis**&#34; class=&#34;uri&#34;&gt;https://github.com/maxwshen/indelphi-dataprocessinganalysis**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sharon-plon-pj-lupo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sharon Plon (PJ Lupo)&lt;/h2&gt;
&lt;p&gt;Cancer risk among children with non-chromosomal birth defects in the genetic ovrerlap between congenital anomalies and cancer in kids (GOBACK) study&lt;/p&gt;
&lt;p&gt;1/33 children born with birth defects&lt;/p&gt;
&lt;p&gt;GOBACK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;look for overlap between cancer and genetic abnormalities (birth defect) in children&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10 million births
0.5 million birth defects
15k cancer
1.8k birth defect &lt;em&gt;and&lt;/em&gt; cancer
- &lt;strong&gt;napkin math would expect 750&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;more birth defects = greater chance of having cancer&lt;/p&gt;
&lt;p&gt;different defects have diff cancer increase rates&lt;/p&gt;
&lt;p&gt;can go back to the children&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doing WGS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;massa-shoura-andrew-fire&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Massa Shoura (Andrew Fire)&lt;/h2&gt;
&lt;p&gt;eccDNA-mediated ‘scars’ in the TTN gene may contribute to microfiber diversity&lt;/p&gt;
&lt;p&gt;Coding regions ‘shedding’ the eccDNA ‘circles’&lt;/p&gt;
&lt;p&gt;Including Titin&lt;/p&gt;
&lt;p&gt;Looked at cardiomyocyte vs iPS vs lymphocytes to see if eccDNA shedding changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unique to cardiomyocytes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eccDNA shedding seems dynamic in different cardiomyocyte conditions&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sidi-chen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sidi Chen&lt;/h2&gt;
&lt;p&gt;Towards mapping functional cancer genome atlases&lt;/p&gt;
&lt;p&gt;Concept:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cancer seq data to make cancer atlas&lt;/li&gt;
&lt;li&gt;make mouse models&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;marcin-imielinski&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Marcin Imielinski&lt;/h2&gt;
&lt;p&gt;Signature of complex structural variation across thousands of cancer whole genomes&lt;/p&gt;
&lt;p&gt;Diversity in rearrangments across cancers&lt;/p&gt;
&lt;p&gt;Successful at finding SNV signatures&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alexandrov et al 2013 Nature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to count rearrangments????&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lots of types (dup / insertion / translocation /etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gGnome (R packages):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.github.com/mskilab/JaBbA&#34; class=&#34;uri&#34;&gt;https://www.github.com/mskilab/JaBbA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.github.com/mskilab/gGnome&#34; class=&#34;uri&#34;&gt;https://www.github.com/mskilab/gGnome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;computational-genomics---im-very-excited&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Computational Genomics (! - &lt;strong&gt;I’m very excited&lt;/strong&gt;)&lt;/h1&gt;
&lt;div id=&#34;oliver-stegle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Oliver Stegle&lt;/h2&gt;
&lt;p&gt;Methods for the joint analysis of high-dimensional traits and samples substructure in human cohorts&lt;/p&gt;
&lt;p&gt;project high dimensional data into lower dimensions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;confounding factors&lt;/li&gt;
&lt;li&gt;inference of sparse factors (f-scLCVM)&lt;/li&gt;
&lt;li&gt;spatio-temporal dependencies (SpatialDE)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bioFAM/MOFA&#34; class=&#34;uri&#34;&gt;https://github.com/bioFAM/MOFA&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scheme for merging data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Identification of sub-gropu specific genetic effects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interation between environment/behavior (&lt;strong&gt;self reported??&lt;/strong&gt;) and genotypes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;random effect model to match genetic structure to environment&lt;/p&gt;
&lt;p&gt;scaling up - with big 2D matrices&lt;/p&gt;
&lt;p&gt;StructLMM: mixed model interaction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;phenotye = G + GxE + additivity(?) + noise
&lt;ul&gt;
&lt;li&gt;Casale et al PLOS Genetics 2017&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BMI on UK biobank&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;240k unrelated people&lt;/li&gt;
&lt;li&gt;7.5 million variants&lt;/li&gt;
&lt;li&gt;64 ‘environments’
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;not certain what this is&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Increased power for detecting GxE (loci match GWAS ID’ed loci)&lt;/p&gt;
&lt;p&gt;How to deconvoluate which environmental var drives GxE?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;include/exclude environmental vars to rank change in bayes factor
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reminds me of variable important in random forest&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“Fresh results”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can leverage GWAS info with GxE analysis&lt;/li&gt;
&lt;li&gt;genome wide search&lt;/li&gt;
&lt;li&gt;GxE of 7 metabolic traits
&lt;ul&gt;
&lt;li&gt;FTO…MC4R….SEC16B&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loads&lt;/strong&gt; of hits (nice manhattan peaks)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;correlation structure
&lt;ul&gt;
&lt;li&gt;loci x loci spearman cor&lt;/li&gt;
&lt;li&gt;cluster blocks by &lt;strong&gt;loci&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;by traits not so much&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;% variance explained
&lt;ul&gt;
&lt;li&gt;adding up to 10% var&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.github.com/limix/struct-lmm&#34; class=&#34;uri&#34;&gt;https://www.github.com/limix/struct-lmm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;q: pleiotropy? metabolic traits confounding&lt;/p&gt;
&lt;p&gt;a: yes (we see overlap between traits)&lt;/p&gt;
&lt;p&gt;q: environment matrix. how sensitive to variable weighting?&lt;/p&gt;
&lt;p&gt;a: controvery over how to weight. quite robust for a not crazy amount of traits&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ben-strober-alexis-battle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ben Strober (Alexis Battle)&lt;/h2&gt;
&lt;p&gt;Modeling genetic effects during cellular differentiation&lt;/p&gt;
&lt;p&gt;Genetic effects dependent on cellular environment (&lt;strong&gt;or cell type&lt;/strong&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tx studies are generally single time point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;study dynamic genetic effects during cell diff in iPSC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID varying genetics effects&lt;/li&gt;
&lt;li&gt;new stats approaches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cell Diff time course&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iPSC (14 lines)&lt;/li&gt;
&lt;li&gt;16 time steps (ranging 0 to 15) when diff to cardiomyocyte&lt;/li&gt;
&lt;li&gt;== 217 total RNA-seq samples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Marker genes going up (or down) over time as iPSC –&amp;gt; cardiomyocyte&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time is pc1
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;percent of var?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cisEQTL in &lt;em&gt;each&lt;/em&gt; time step&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WASP combined haplotype test (Geijn Nat Meth 2014)&lt;/li&gt;
&lt;li&gt;50-200 eQTL genes (FDR &amp;lt;0.1) per step&lt;/li&gt;
&lt;li&gt;replicates to independent iPSC eQTL study (Banovich Gen Res 2018)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Temporal dynamics
- correlation of eQTL pairs summary stats
- &lt;strong&gt;hey look - blocks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sparse matrix factorization to find &lt;em&gt;shared&lt;/em&gt; eQTL effect size (across time) patterns&lt;/p&gt;
&lt;p&gt;this compression is correlating to time step blocks&lt;/p&gt;
&lt;p&gt;id dynamic-QTL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GLM to predict allele-specific read counts
&lt;ul&gt;
&lt;li&gt;log(y nj) == intercept + time + genotype + (time x Genotype)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rs1897133&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;association gets stronger over time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nice integrated model instead of doing tons of independent tests&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I assume the GLM gets much higher power&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;obligatory slide showing enrichment in cis-regulatory elements (chromHMM enhancer)&lt;/p&gt;
&lt;p&gt;‘is time the best way to quantify differentiation progress?’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no&lt;/li&gt;
&lt;li&gt;cell lines will develop at dif rates&lt;/li&gt;
&lt;li&gt;hmm to infer (predict) ‘differentiation progress’
&lt;ul&gt;
&lt;li&gt;hmm states (4 states over 15 days) work&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;future&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;more lines&lt;/li&gt;
&lt;li&gt;more assays (single cell, ATAC)&lt;/li&gt;
&lt;li&gt;apply methods to other longitudinal data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;meena-subramaniam-jimmie-ye-and-noah-zaitlen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Meena Subramaniam (Jimmie Ye and Noah Zaitlen)&lt;/h2&gt;
&lt;p&gt;Population-scale single cell seq to reveal context specific effects in lupus&lt;/p&gt;
&lt;p&gt;(bulk) gene expression var could be due to diff cell type &lt;em&gt;proportion&lt;/em&gt; or &lt;em&gt;state&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;answer: scRNA-seq&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SLE (lupus)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PBMCs (&lt;strong&gt;convenient&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;Meena did justify this cell type&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10X chromium:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 well / donor $1300&lt;/li&gt;
&lt;li&gt;200 donors / 200k is … expensive&lt;/li&gt;
&lt;li&gt;50k cells with 25 people / well
&lt;ul&gt;
&lt;li&gt;$200 / donor&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pooling
&lt;ul&gt;
&lt;li&gt;double rate increase&lt;/li&gt;
&lt;li&gt;lose sample ID&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;multiplexed droplet scRNA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cell barcode&lt;/li&gt;
&lt;li&gt;then can demultiplex (with genetic var)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;genetic barcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unique variants in sample
&lt;ul&gt;
&lt;li&gt;but scRNA is mega lossy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prob have to use many variants?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;how many?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;20 gives 98% ID&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;doublet ID (with ‘demuxlet’)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bayesian model to find doublets&lt;/li&gt;
&lt;li&gt;intentionally merged samples
&lt;ul&gt;
&lt;li&gt;can deconvolute robustly&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;mux-seq&lt;/code&gt; and &lt;code&gt;dumuxlet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.github.com/statgen/demuxlet&#34; class=&#34;uri&#34;&gt;https://www.github.com/statgen/demuxlet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.satijalab.org/costpercell&#34; class=&#34;uri&#34;&gt;https://www.satijalab.org/costpercell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;did human immune ‘census’ (&lt;strong&gt;is this the new atlas?&lt;/strong&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4k cells / donor (750k total)&lt;/li&gt;
&lt;li&gt;8 major cell types t-SNE looks good&lt;/li&gt;
&lt;li&gt;sle vs healthy have unique locations (not clean blocks / ‘clsuters’)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CD14+ and CD4+ &lt;em&gt;proportions&lt;/em&gt; change&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EHR confirms with CBC (cor 0.83)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cool to get to check out the EHR data&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;novel monocyte population&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘intermediate monocyte’&lt;/li&gt;
&lt;li&gt;found interferon correlation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;stimulate cells with interferon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;large shift in cell t-SNE patterning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;change in both &lt;em&gt;proportion&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;search for genetic factors (GWAS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flat manhattan plot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cis-eQTLS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;much better power (QQ plot)&lt;/li&gt;
&lt;li&gt;hundreds eQTLS found per cell class&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cool to see cell-type specific eQTL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;data sharing (June)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.humancellatlas.org/data-sharing&#34; class=&#34;uri&#34;&gt;https://www.humancellatlas.org/data-sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;q: mech for change in variance&lt;/p&gt;
&lt;p&gt;A: rare cell state….or dif enhancers being used with dif noise profile&lt;/p&gt;
&lt;p&gt;q: are you looking for novel gene signatures for cell groups?&lt;/p&gt;
&lt;p&gt;a: following up on that now&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ricardo-doliveira-albanus-steve-parker-hey-i-know-this-guy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Ricardo D’Oliveira Albanus (Steve Parker!!! &amp;lt;– Hey I know this guy)&lt;/h2&gt;
&lt;p&gt;Information theory of ATAC-seq data predicts local chromatic kinetics and reveals novel aspects of gene regulation and genomic org&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://theparkerlab.org&#34; class=&#34;uri&#34;&gt;http://theparkerlab.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ATAC-seq –&amp;gt; open chromatin –&amp;gt; footprints&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;but not all TF leave footprints
&lt;ul&gt;
&lt;li&gt;don’t bind long enough&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CTCF, AP-1 bind a &lt;em&gt;long&lt;/em&gt; time&lt;/li&gt;
&lt;li&gt;GR short time&lt;/li&gt;
&lt;li&gt;know from FRAP assays
&lt;ul&gt;
&lt;li&gt;but super hard to do&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can we use ATAC-seq data to infer kinetics of TF-DNA interactions?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can we break dependence on footprints to predict TF-DNA binding?
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OMG, can we???&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;model theoretical binding of nucleosome / TF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘V plot’
&lt;ul&gt;
&lt;li&gt;CTCF has a nice strong one&lt;/li&gt;
&lt;li&gt;NFKB less strong&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;measure chromatin information content&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f-VICE (feature V-plot Information Content Enhancment)&lt;/li&gt;
&lt;li&gt;calc f-VICE for each TF
&lt;ul&gt;
&lt;li&gt;AP-1 and CTCF has highest f-VICE score&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;BMO&lt;/code&gt; uses ATAC-seq signal and co-occurring motifs for TF binding prediction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compare to CENTIPEDE, DNase2TF, HINT, bedtools intersect&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;f-VICE not involved???&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feel like a shift happened quickly in the talk&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BMO works better with (assessed with F1 of predictions)
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;works better for bad binders…?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;compare /cor with f-VICE&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;so yes, &lt;code&gt;BMO&lt;/code&gt; not using f-VICE (I think)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CENTIPEDE next best (pretty close)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;f-VICE has 8.5 change in comparing CTCF (- cohesin) and CTCF (+ cohesin).
- ~10-20X diff by FRAP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No github?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;christina-leslie&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Christina Leslie&lt;/h2&gt;
&lt;p&gt;Decoding immune cell dysfunction&lt;/p&gt;
&lt;p&gt;In solid tumors&lt;/p&gt;
&lt;p&gt;Does epigenetic state of tumor-speicif T cells present a barrier to immunotherapy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Want to know whether checkpoint blockade approach will work or not in a patient&lt;/li&gt;
&lt;li&gt;It does in mice (Philip Nature 2017)
&lt;ul&gt;
&lt;li&gt;during development see epigenetic state change (plastic to fixed as time goes on)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;intro over, new stuff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is CD8 T cell tolerance to self-antigens epigenetically encoded? Can tolerance be broken?&lt;/p&gt;
&lt;p&gt;model of CD* t cell tolerance to self-antigen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCR(GAG) xAlb:GAG (mouse) –&amp;gt; TCR(GAG) x Alb(GAG) give self-tolerant CD8 T cells&lt;/li&gt;
&lt;li&gt;two states&lt;/li&gt;
&lt;li&gt;native t cell (memory) and naive t cell (tolerance)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ATAC and RNA-seq&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naive clusters from efector/memory/tolerant&lt;/li&gt;
&lt;li&gt;enriched in putative enhancers
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;is this ever NOT the case??&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1837 peaks differntial accessible (out of 95k)&lt;/li&gt;
&lt;li&gt;showing browser plots with disappearing signal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;correlation between accessiblity and gene expression&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;very cool plot
&lt;ul&gt;
&lt;li&gt;RNA log2FC on y axis, genes on x axis (each individual point colored by ‘tolerant’ or ‘memory’)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;can you break tolerance to become functional?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transiently by transfer hosts (Schietinger et al Science 2012)&lt;/li&gt;
&lt;li&gt;massive expression diff when you transient rescue
&lt;ul&gt;
&lt;li&gt;but no epigenetic changes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;audible whoah&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;but how can you &lt;em&gt;really&lt;/em&gt; rescue?
&lt;ul&gt;
&lt;li&gt;if you immunize in black 6 background
&lt;ul&gt;
&lt;li&gt;now epigenetic state changes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GLM to find epigenetic signatue of tolerance state&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;peak accesbility log2FC == A + P + T&lt;/li&gt;
&lt;li&gt;Lef1 (&lt;strong&gt;very cool because not DE by RNA&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;pejman-mohammadi-tuuli-lappalainen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pejman Mohammadi (Tuuli Lappalainen)&lt;/h2&gt;
&lt;p&gt;Using rare allelic expression data for studying rare disease biology
&lt;span class=&#34;citation&#34;&gt;@pejminister&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Interpreting non-coding genome&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;regulatory var important in disease/phenotypes&lt;/li&gt;
&lt;li&gt;big place, poorly annotated (&lt;strong&gt;or not at all&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;no clear measure of regulatory constraint&lt;/li&gt;
&lt;li&gt;in comparison coding regions
&lt;ul&gt;
&lt;li&gt;codon triplets&lt;/li&gt;
&lt;li&gt;pLI, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;want to something similar, but for noncoding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;regulatory variation and expression outliers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rna-seq noisey&lt;/li&gt;
&lt;li&gt;maybe ASE (allele specific expression)
&lt;ul&gt;
&lt;li&gt;haplotype specific&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;try to find outliers
&lt;ul&gt;
&lt;li&gt;(plot ref allele abundance / alt allele abundance for each gene)&lt;/li&gt;
&lt;li&gt;not linked to populatin info!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;how to set alleleic imbalance cutoff?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check GTEx&lt;/li&gt;
&lt;li&gt;but ASE patterns….are diverse (reg effect, allele freq, LD, ….)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;define quant measure of reg var&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;ref. population: estimate regulator var for each gene&lt;/li&gt;
&lt;li&gt;check in patient&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;log alleleic Fold Change (aFC)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mohammadi et at Gen Res 2017&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;plotting different outcomes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aFC vs experssion FC&lt;/li&gt;
&lt;li&gt;copy loss, wildtype, reg variant,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“I’m skipping 20 of my favorite slides”&lt;/p&gt;
&lt;p&gt;How to model when so much info is missing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binomial model&lt;/li&gt;
&lt;li&gt;ANEVA (Analysis of Expression Variance) in GTEx data&lt;/li&gt;
&lt;li&gt;tissue specific estimates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D(g) / D(t) measure regulatory tolerance (**g and t are subscripts - I can’t latex quickly*)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID Haplotinsufficient genes&lt;/li&gt;
&lt;li&gt;better than noncoding RVIS&lt;/li&gt;
&lt;li&gt;good heritability on independent data&lt;/li&gt;
&lt;li&gt;better than noncoding metrics (ROC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use skeletal muscle GTEx with Macarthur muscle disoorder cohort (~70)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find some D(g) outliers&lt;/li&gt;
&lt;li&gt;found 20 ‘dosage outliers’
&lt;ul&gt;
&lt;li&gt;similar to GTEx (totally dif datasets)&lt;/li&gt;
&lt;li&gt;6x &lt;em&gt;fewer&lt;/em&gt; hits than naive binomial test&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;erik-garrison-richard-durbin&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Erik Garrison (Richard Durbin)&lt;/h2&gt;
&lt;p&gt;Variation graphs for efficient unbiased pangenoimc seq interpretation&lt;/p&gt;
&lt;p&gt;want to represent ‘reference’ genome as a graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to include variation&lt;/li&gt;
&lt;li&gt;simulate genomes by walking along paths&lt;/li&gt;
&lt;li&gt;retain info with ‘metadata’ for each point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;another model is have &lt;strong&gt;every&lt;/strong&gt; base seen as a big vector&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;certainly cleaner and simpler to visualize&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‘pan genomics’&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vgteam/vg&#34; class=&#34;uri&#34;&gt;https://github.com/vgteam/vg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;intimidating flowchart&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;reference &amp;lt;-&amp;gt; sample (update ref) &amp;lt;-&amp;gt; known variation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1000g pan-genome graph&lt;/li&gt;
&lt;li&gt;build and index 1000g graph
&lt;ul&gt;
&lt;li&gt;“computation is tractable”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;performance of pan-genome worse than paired end seq against linear ref
&lt;ul&gt;
&lt;li&gt;but better when a read has a variant&lt;/li&gt;
&lt;li&gt;no bias&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Erik is being explicit about limitations and strengths; very nice&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;yeast var graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with long reads&lt;/li&gt;
&lt;li&gt;graph does better overall than linear genome (5% better in mean identity)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ancient dna&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;helps out a lot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;graphical pangenomics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;back to the linear visualization mentioned earlier&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I really like this&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I’m very freaked out by spaghetti plots of graphs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;masa-roller-paul-flicek&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Masa Roller (Paul Flicek)&lt;/h2&gt;
&lt;p&gt;Tissue specific enhancer and promoter evolution in mammals&lt;/p&gt;
&lt;p&gt;enhancers &amp;lt;-&amp;gt; promoters &amp;lt;-&amp;gt; gene expression&lt;/p&gt;
&lt;p&gt;using chip-seq as proxies for enhancer / promoters&lt;/p&gt;
&lt;p&gt;create comprehensive regulatory maps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 tissues&lt;/li&gt;
&lt;li&gt;10 mammals&lt;/li&gt;
&lt;li&gt;3 histones&lt;/li&gt;
&lt;li&gt;3 replicates&lt;/li&gt;
&lt;li&gt;360 ChIP-Seq!
&lt;ul&gt;
&lt;li&gt;4 dropouts&lt;/li&gt;
&lt;li&gt;require min seq depth
&lt;ul&gt;
&lt;li&gt;20 million good reads for H3K27ac, H3k$me3&lt;/li&gt;
&lt;li&gt;40 million for H3k4me1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;promoter == H3K27ac and H3K4me3
enhancer == H3k27ac and H3k4me1&lt;/p&gt;
&lt;p&gt;look between tissues/species&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UpSet plot!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;testes has lots of tissue specific promoters&lt;/li&gt;
&lt;li&gt;but still many shared promtoers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tissue &lt;em&gt;specific&lt;/em&gt; regulatory elements evolve more rapidly than tissue &lt;em&gt;shared&lt;/em&gt; elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;promoters and enhancers show this patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;regulatory elements rarely switch activity between tissues&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what do switches look like?&lt;/li&gt;
&lt;li&gt;lower H3K4me3 and lower H3k27ac
&lt;ul&gt;
&lt;li&gt;maybe weak promoters?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;see switches across evolution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;again, not too many&lt;/li&gt;
&lt;li&gt;some promoter &amp;lt;-&amp;gt; enhancer (&lt;strong&gt;10-20% by my eyeball&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Plot 6: Simple guide to heatmaps with ComplexHeatmaps</title>
      <link>/./post/simple-heatmaps-with-complexheatmaps/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/simple-heatmaps-with-complexheatmaps/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-processing&#34;&gt;Data processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#load-data&#34;&gt;Load data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peek-at-expression&#34;&gt;Peek at expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#peek-at-metadata&#34;&gt;Peek at metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#brief-outline-on-how-the-rna-seq-data-was-processed-before-we-see-it&#34;&gt;Brief outline on how the RNA-seq data was processed before we see it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#load-libraries&#34;&gt;Load libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#create-a-sample---sample-distance-heatmap&#34;&gt;Create a Sample - Sample distance heatmap&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#easy-heatmap-with-complexheatmap&#34;&gt;Easy heatmap with ComplexHeatmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#complex-heatmap&#34;&gt;Complex heatmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#finished-heatmap&#34;&gt;Finished heatmap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gene-heatmaps&#34;&gt;Gene Heatmaps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-bit-simpler&#34;&gt;A bit simpler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#session-info&#34;&gt;Session Info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Heatmaps are a core competency for a bioinformatician. They are a compact way to visually demonstrate relationships and changes in values across conditions.&lt;/p&gt;
&lt;p&gt;We are going to use RNA-seq data to make two kinds of common heatmaps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Sample - Sample relationships&lt;/li&gt;
&lt;li&gt;Gene expression changes across samples for a subset of genes&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;data-processing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data processing&lt;/h2&gt;
&lt;p&gt;The two Rdata datasets we are going to use can be found here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davemcg/Let_us_plot/blob/master/006_heatmaps/expression.Rdata&#34;&gt;Expression data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davemcg/Let_us_plot/blob/master/006_heatmaps/metadata.Rdata&#34;&gt;Metadata&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;load-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;load(&amp;#39;~/git/Let_us_plot/006_heatmaps/expression.Rdata&amp;#39;)
load(&amp;#39;~/git/Let_us_plot/006_heatmaps/metadata.Rdata&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;peek-at-expression&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Peek at expression&lt;/h2&gt;
&lt;p&gt;Rows are genes, columns are samples. Notice how the &lt;em&gt;numeric&lt;/em&gt; sample names got X appended to the beginning. This is because R variable names cannot start with a number. Generally R will ‘fix’ your sample names during a &lt;em&gt;base&lt;/em&gt; R handling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(expression)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Gene       X10       X11       X16       X17       X18        X2
## 1  ABCA1 13.973778 12.244265 12.628729 13.182851 11.383009 12.333361
## 2 ABCA10 10.883834  8.813957 11.247787  9.870685  8.059123  9.346461
## 3 ABCA13  9.171412  7.629223  7.490137  8.134116  8.261363  6.430140
## 4  ABCA2 11.338420 14.976849 13.679589 12.014997 16.011478 13.439011
## 5  ABCA4  8.773803 11.641017 11.293125  8.072241 12.393982 10.126994
## 6  ABCA6  9.420007  6.285309  7.527962  8.659904  5.957441  6.535751
##          X3        X4        X9      var
## 1 13.483913 11.377315 10.976546 1.056482
## 2 11.245402  8.585732  9.479805 1.387638
## 3  9.955795  7.499681  7.084981 1.152503
## 4 12.259725 16.007328 15.390794 3.168466
## 5 10.126629 11.505725 11.344527 2.040986
## 6  9.950779  5.658777  6.439992 2.526444&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# check number of rows (genes) and column (samples)
dim(expression)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2191   11&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;peek-at-metadata&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Peek at metadata&lt;/h2&gt;
&lt;p&gt;Sample names with the serum conditions (Human Serum or Heat Inactivated HS) as well as the time the cells spend in the serum&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metadata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   sample serum treatment_hours
## 1      2    HS              24
## 2      3    HS              48
## 3      4  HIHS              48
## 4      9    HS              24
## 5     10    HS              48
## 6     11  HIHS              48
## 7     16    HS              24
## 8     17    HS              48
## 9     18  HIHS              48&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;brief-outline-on-how-the-rna-seq-data-was-processed-before-we-see-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Brief outline on how the RNA-seq data was processed before we see it&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://salmon.readthedocs.io&#34;&gt;Salmon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/tximport.html&#34;&gt;tximport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/DESeq2.html&#34;&gt;DESeq2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bioconductor.org/packages//2.10/bioc/vignettes/DESeq/inst/doc/vst.pdf&#34;&gt;variance stabilizing transformation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Filter genes to only retain high variance genes (often not necessary, but used to reduce the amount of data I share)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;load-libraries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load libraries&lt;/h2&gt;
&lt;p&gt;I’ve rapidly become a fan of &lt;a href=&#34;https://www.bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html&#34;&gt;ComplexHeatmap&lt;/a&gt;. It is capaable of creating just about anything &lt;strong&gt;and&lt;/strong&gt; has excellent documentation and examples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.4
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ComplexHeatmap)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ========================================
## ComplexHeatmap version 1.18.0
## Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
## Github page: https://github.com/jokergoo/ComplexHeatmap
## Documentation: http://bioconductor.org/packages/ComplexHeatmap/
## 
## If you use it in published research, please cite:
## Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional 
##   genomic data. Bioinformatics 2016.
## ========================================&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(viridis)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-sample---sample-distance-heatmap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a Sample - Sample distance heatmap&lt;/h2&gt;
&lt;p&gt;An powerful way to see sample to sample relationships is to use the expression data to arrange the samples. The distance between each sample can be calculated by taking the &lt;a href=&#34;https://en.wikipedia.org/wiki/Euclidean_distance&#34;&gt;euclidean distance&lt;/a&gt; between each sample. This reduces the space from a n x m matrix of values to a single number for each sample pair.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;expression_dists &amp;lt;- expression %&amp;gt;% 
  # drop the Gene and variance column
  select(-Gene, -var) %&amp;gt;% 
  # flip axes as the dist() function does all of row-row relationships
  # we want samples as the rows....
  t() %&amp;gt;% 
  # this actually calculates the euclidean distance (other types of distance are possible - read the docs with ?dist)
  dist() %&amp;gt;% 
  # coerce to matrix, then data frame
  as.matrix() %&amp;gt;% data.frame() 

# now a 9 x 9 data frame
expression_dists %&amp;gt;% dim()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9 9&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;easy-heatmap-with-complexheatmap&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Easy heatmap with ComplexHeatmap&lt;/h3&gt;
&lt;p&gt;I have a few problems with this plot:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Red / blue is more for distinguishing over / under in my opinion - we are talking about close to far&lt;/li&gt;
&lt;li&gt;Don’t really need to see key for the colors. Distance is unit-less.&lt;/li&gt;
&lt;li&gt;We can’t map between sample name and the metadata&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Heatmap(expression_dists)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-05-07-simple-heatmaps-with-complexheatmaps_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;complex-heatmap&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Complex heatmap&lt;/h3&gt;
&lt;p&gt;The metadata needs some extensive reworking to make it work with the sample distance data for the heatmap&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt; the sample to add the ‘X’ to match the dist data column names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; to only keep metadata samples that are in the distance data (very common to have metadata for &lt;em&gt;all&lt;/em&gt; samples)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; to grab the relevant columns (also common to have many extra columns that aren’t used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt; again to coerce the sample order in the metadata to match the sample order in the distance data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt; to use the order set above for the metadata (try erasing this and see what happens….)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; to remove duplicated rows&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that the HeatmapAnnotation take the &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;Serum&lt;/code&gt; as a data.frame and I am manually setting the colors by grabbing colors from the magma scheme from viridis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metadata_heatmap &amp;lt;- metadata  %&amp;gt;% 
  mutate(sample = paste0(&amp;#39;X&amp;#39;, sample)) %&amp;gt;% 
  filter(sample %in% colnames(expression_dists)) %&amp;gt;% 
  dplyr::select(sample, treatment_hours, serum) %&amp;gt;% 
  mutate(sample=factor(sample, levels=colnames(expression_dists))) %&amp;gt;% 
  arrange(sample) %&amp;gt;% 
  unique() 

ha_column = HeatmapAnnotation(df = data.frame(Time = metadata_heatmap$treatment_hours,
                                              Serum = metadata_heatmap$serum), 
                              col = list(Serum = c(&amp;quot;HS&amp;quot; =  magma(20)[5], &amp;quot;HIHS&amp;quot; = magma(20)[7]),
                                         Time = c(&amp;quot;24&amp;quot; = magma(20)[12], &amp;quot;48&amp;quot; = magma(20)[18])))


Heatmap(expression_dists, 
        col=viridis(100),
        name = &amp;#39;Sample\nDistances&amp;#39;,
        top_annotation = ha_column)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-05-07-simple-heatmaps-with-complexheatmaps_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finished-heatmap&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Finished heatmap&lt;/h3&gt;
&lt;p&gt;Now I am going to drop the ‘X’ from the sample names and remove the Sample Distances key&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# substitute &amp;#39;&amp;#39; (nothing) for &amp;#39;X&amp;#39; for the column and row names
colnames(expression_dists) &amp;lt;- gsub(&amp;#39;X&amp;#39;,&amp;#39;&amp;#39;,colnames(expression_dists))
rownames(expression_dists) &amp;lt;- gsub(&amp;#39;X&amp;#39;,&amp;#39;&amp;#39;,rownames(expression_dists))
Heatmap(expression_dists, 
        col=viridis(100),
        show_heatmap_legend = F,
        top_annotation = ha_column)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-05-07-simple-heatmaps-with-complexheatmaps_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;gene-heatmaps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Gene Heatmaps&lt;/h2&gt;
&lt;p&gt;The next common type of heatmap is to show how a set of genes changes expression between conditions&lt;/p&gt;
&lt;p&gt;We will look at a small set of genes and see how their expression changes when put in Heat Inactivated Human Serum (HIHS) or Human Serum (HS), only at the 48 hour time point.&lt;/p&gt;
&lt;p&gt;First, make gene_set, HS, and HIHS sample vectors&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_set &amp;lt;- c(&amp;#39;EP300&amp;#39;,&amp;#39;ABCA4&amp;#39;,&amp;#39;CLCN6&amp;#39;,&amp;#39;CRX&amp;#39;,&amp;#39;HIST1H1T&amp;#39;,&amp;#39;IGSF9&amp;#39;,&amp;#39;SLC16A7&amp;#39;,&amp;#39;MYO5C&amp;#39;,&amp;#39;NEURL3&amp;#39;)

HS_samples &amp;lt;- metadata %&amp;gt;% filter(serum==&amp;#39;HS&amp;#39;, treatment_hours==48) %&amp;gt;% pull(sample) %&amp;gt;% unique() %&amp;gt;% paste0(&amp;#39;X&amp;#39;,.)
HIHS_samples &amp;lt;- metadata %&amp;gt;% filter(serum==&amp;#39;HIHS&amp;#39;, treatment_hours==48) %&amp;gt;% pull(sample) %&amp;gt;% unique() %&amp;gt;% paste0(&amp;#39;X&amp;#39;,.)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now calculate the change in expression across the HIHS &amp;lt;-&amp;gt; HS comparison and prep the metadata&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_set = expression %&amp;gt;% filter(Gene %in% gene_set) %&amp;gt;% select(-var)

# HIHS is the &amp;#39;reference&amp;#39;
# we&amp;#39;ll look at how expression changes with you use HS
row_mean_HIHS = gene_set[,HIHS_samples] %&amp;gt;% rowMeans()

# now subtract the mean HIHS expression from each row,
# and only keep HS samples for the plot
heatmap_expression = gene_set[,HS_samples] - row_mean_HIHS
# add Gene back as rownames
row.names(heatmap_expression) &amp;lt;- gene_set$Gene
# prep metadata as above
metadata_heatmap &amp;lt;- metadata  %&amp;gt;% 
  mutate(sample = paste0(&amp;#39;X&amp;#39;, sample)) %&amp;gt;% 
  filter(sample %in% colnames(heatmap_expression)) %&amp;gt;% 
  dplyr::select(sample, treatment_hours, serum) %&amp;gt;% 
  mutate(sample=factor(sample, levels=colnames(heatmap_expression))) %&amp;gt;% 
  arrange(sample) %&amp;gt;% 
  unique() &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The clustering of the rows is &lt;em&gt;really&lt;/em&gt; useful to quickly see what sets of genes are moving in the same direction&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ha_column = HeatmapAnnotation(df = data.frame(Time = metadata_heatmap$treatment_hours,
                                              Serum = metadata_heatmap$serum), 
                              col = list(Serum = c(&amp;quot;HS&amp;quot; =  magma(20)[5], &amp;quot;HIHS&amp;quot; = magma(20)[7]),
                                         Time = c(&amp;quot;24&amp;quot; = magma(20)[12], &amp;quot;48&amp;quot; = magma(20)[18])))

# Drop the X in sample names
colnames(heatmap_expression) &amp;lt;- gsub(&amp;#39;X&amp;#39;,&amp;#39;&amp;#39;,colnames(heatmap_expression))
Heatmap(heatmap_expression, 
        cluster_columns = FALSE,
        name = &amp;#39;log2(Fold\nChange)&amp;#39;, 
        top_annotation = ha_column)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-05-07-simple-heatmaps-with-complexheatmaps_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;a-bit-simpler&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A bit simpler&lt;/h3&gt;
&lt;p&gt;You may think the annotations are superfluous, as they are all the same. If you are making just one, I would agree. Usually I am making a bunch of plots and I’d rather keep the annotations attached so I don’t get confused later.&lt;/p&gt;
&lt;p&gt;It is easy enough to drop them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Heatmap(heatmap_expression, 
        cluster_columns = FALSE,
        name = &amp;#39;log2(Fold\nChange)&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-05-07-simple-heatmaps-with-complexheatmaps_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Session Info&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       America/New_York            
##  date     2018-07-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package        * version date       source                           
##  assertthat       0.2.0   2017-04-11 CRAN (R 3.5.0)                   
##  backports        1.1.2   2017-12-13 CRAN (R 3.5.0)                   
##  base           * 3.5.0   2018-04-24 local                            
##  bindr            0.1.1   2018-03-13 CRAN (R 3.5.0)                   
##  bindrcpp       * 0.2.2   2018-03-29 CRAN (R 3.5.0)                   
##  blogdown         0.8.1   2018-07-16 Github (rstudio/blogdown@d54c39a)
##  bookdown         0.7     2018-02-18 CRAN (R 3.5.0)                   
##  broom            0.4.4   2018-03-29 CRAN (R 3.5.0)                   
##  cellranger       1.1.0   2016-07-27 CRAN (R 3.5.0)                   
##  circlize         0.4.3   2017-12-20 CRAN (R 3.5.0)                   
##  cli              1.0.0   2017-11-05 CRAN (R 3.5.0)                   
##  colorspace       1.3-2   2016-12-14 CRAN (R 3.5.0)                   
##  compiler         3.5.0   2018-04-24 local                            
##  ComplexHeatmap * 1.18.0  2017-10-25 Bioconductor (R 3.5.0)           
##  crayon           1.3.4   2017-09-16 CRAN (R 3.5.0)                   
##  datasets       * 3.5.0   2018-04-24 local                            
##  devtools         1.13.5  2018-02-18 CRAN (R 3.5.0)                   
##  digest           0.6.15  2018-01-28 CRAN (R 3.5.0)                   
##  dplyr          * 0.7.6   2018-06-29 cran (@0.7.6)                    
##  evaluate         0.10.1  2017-06-24 CRAN (R 3.5.0)                   
##  forcats        * 0.3.0   2018-02-19 CRAN (R 3.5.0)                   
##  foreign          0.8-70  2017-11-28 CRAN (R 3.5.0)                   
##  GetoptLong       0.1.6   2017-03-07 CRAN (R 3.5.0)                   
##  ggplot2        * 3.0.0   2018-07-03 cran (@3.0.0)                    
##  GlobalOptions    0.0.13  2018-03-15 CRAN (R 3.5.0)                   
##  glue             1.2.0   2017-10-29 CRAN (R 3.5.0)                   
##  graphics       * 3.5.0   2018-04-24 local                            
##  grDevices      * 3.5.0   2018-04-24 local                            
##  grid           * 3.5.0   2018-04-24 local                            
##  gridExtra        2.3     2017-09-09 CRAN (R 3.5.0)                   
##  gtable           0.2.0   2016-02-26 CRAN (R 3.5.0)                   
##  haven            1.1.1   2018-01-18 CRAN (R 3.5.0)                   
##  hms              0.4.2   2018-03-10 CRAN (R 3.5.0)                   
##  htmltools        0.3.6   2017-04-28 CRAN (R 3.5.0)                   
##  httr             1.3.1   2017-08-20 CRAN (R 3.5.0)                   
##  jsonlite         1.5     2017-06-01 CRAN (R 3.5.0)                   
##  knitr            1.20    2018-02-20 CRAN (R 3.5.0)                   
##  lattice          0.20-35 2017-03-25 CRAN (R 3.5.0)                   
##  lazyeval         0.2.1   2017-10-29 CRAN (R 3.5.0)                   
##  lubridate        1.7.4   2018-04-11 CRAN (R 3.5.0)                   
##  magrittr         1.5     2014-11-22 CRAN (R 3.5.0)                   
##  memoise          1.1.0   2017-04-21 CRAN (R 3.5.0)                   
##  methods        * 3.5.0   2018-04-24 local                            
##  mnormt           1.5-5   2016-10-15 CRAN (R 3.5.0)                   
##  modelr           0.1.2   2018-05-11 CRAN (R 3.5.0)                   
##  munsell          0.4.3   2016-02-13 CRAN (R 3.5.0)                   
##  nlme             3.1-137 2018-04-07 CRAN (R 3.5.0)                   
##  parallel         3.5.0   2018-04-24 local                            
##  pillar           1.2.3   2018-05-25 CRAN (R 3.5.0)                   
##  pkgconfig        2.0.1   2017-03-21 CRAN (R 3.5.0)                   
##  plyr             1.8.4   2016-06-08 CRAN (R 3.5.0)                   
##  psych            1.8.4   2018-05-06 CRAN (R 3.5.0)                   
##  purrr          * 0.2.4   2017-10-18 CRAN (R 3.5.0)                   
##  R6               2.2.2   2017-06-17 CRAN (R 3.5.0)                   
##  RColorBrewer     1.1-2   2014-12-07 CRAN (R 3.5.0)                   
##  Rcpp             0.12.17 2018-05-18 CRAN (R 3.5.0)                   
##  readr          * 1.1.1   2017-05-16 CRAN (R 3.5.0)                   
##  readxl           1.1.0   2018-04-20 CRAN (R 3.5.0)                   
##  reshape2         1.4.3   2017-12-11 CRAN (R 3.5.0)                   
##  rjson            0.2.19  2018-05-18 CRAN (R 3.5.0)                   
##  rlang            0.2.1   2018-05-30 CRAN (R 3.5.0)                   
##  rmarkdown        1.10    2018-06-11 cran (@1.10)                     
##  rprojroot        1.3-2   2018-01-03 CRAN (R 3.5.0)                   
##  rstudioapi       0.7     2017-09-07 CRAN (R 3.5.0)                   
##  rvest            0.3.2   2016-06-17 CRAN (R 3.5.0)                   
##  scales           0.5.0   2017-08-24 CRAN (R 3.5.0)                   
##  shape            1.4.4   2018-02-07 CRAN (R 3.5.0)                   
##  stats          * 3.5.0   2018-04-24 local                            
##  stringi          1.2.2   2018-05-02 CRAN (R 3.5.0)                   
##  stringr        * 1.3.1   2018-05-10 CRAN (R 3.5.0)                   
##  tibble         * 1.4.2   2018-01-22 CRAN (R 3.5.0)                   
##  tidyr          * 0.8.1   2018-05-18 CRAN (R 3.5.0)                   
##  tidyselect       0.2.4   2018-02-26 CRAN (R 3.5.0)                   
##  tidyverse      * 1.2.1   2017-11-14 CRAN (R 3.5.0)                   
##  tools            3.5.0   2018-04-24 local                            
##  utils          * 3.5.0   2018-04-24 local                            
##  viridis        * 0.5.1   2018-03-29 CRAN (R 3.5.0)                   
##  viridisLite    * 0.3.0   2018-02-01 CRAN (R 3.5.0)                   
##  withr            2.1.2   2018-03-15 CRAN (R 3.5.0)                   
##  xfun             0.3     2018-07-06 cran (@0.3)                      
##  xml2             1.2.0   2018-01-24 CRAN (R 3.5.0)                   
##  yaml             2.1.19  2018-05-01 CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Template for rmarkdown reports</title>
      <link>/./post/template-for-rmarkdown-reports/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/template-for-rmarkdown-reports/</guid>
      <description>&lt;div id=&#34;what-is-this&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What is this?&lt;/h1&gt;
&lt;p&gt;Since I keep opening up random recent Rmarkdown documents to copy the header to paste into my next document, I figure it would be more efficient to just make a post I could reach from anywhere (with an internet connection).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;copy-paste&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Copy / paste:&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;---
title: THE TITLE
author: David McGaughey
date: &amp;#39;`r format(Sys.Date(), &amp;quot;%Y-%m-%d&amp;quot;)`&amp;#39;
output: 
  html_notebook:
    theme: flatly
    toc: true
    code_folding: hide
---&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;```{r, message=F, warning=F, include=F}
# Load Libraries without printing any warnings or messages
library(tidyverse)
```&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;# Session Info&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```{r}
devtools::session_info()
```&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Easy bam downsampling</title>
      <link>/./post/easy-bam-downsampling/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/easy-bam-downsampling/</guid>
      <description>&lt;p&gt;When you have a set of ChIP-seq (like) files, it is sometimes useful to downsample the larger samples to more closely match most of the samples. Tommy Tang goes into more detail in his &lt;a href=&#34;http://crazyhottommy.blogspot.com/2016/05/downsampling-for-bam-files-to-certain.html&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately the tool suites I use most for bam files (samtools and picard) only downsample to a &lt;em&gt;percentage&lt;/em&gt;. Which isn’t ideal when you want your files to be no more than &lt;code&gt;n&lt;/code&gt; reads.&lt;/p&gt;
&lt;p&gt;This post is just a slight one-upping of Tommy Tang’s &lt;a href=&#34;http://crazyhottommy.blogspot.com/2016/05/downsampling-for-bam-files-to-certain.html&#34;&gt;process&lt;/a&gt; to easily downsample a bam. If you do some googling you’ll find lots of &lt;em&gt;boutique&lt;/em&gt; tools to downsample. Which I tend to avoid because I don’t want to have to sift through the source to make sure what they are doing looks reasonable and often-times there are dependencies to worry about. For something this simple, there &lt;em&gt;should&lt;/em&gt; be a way to pipe together a few commands to get what we want. Which Tommy &lt;em&gt;almost&lt;/em&gt; does.&lt;/p&gt;
&lt;p&gt;His little code snippet is &lt;code&gt;samtools idxstats example.bam | cut -f3 | awk &#39;BEGIN {total=0} {total += $1} END {print total}&#39;&lt;/code&gt;. It sums up the reads present in each chromosome/contig that the bam index holds. It is robust and will work unless the output format &lt;code&gt;idxstats&lt;/code&gt; sub-program is altered. Which I think is unlikely.&lt;/p&gt;
&lt;p&gt;The problem is that you have to do a &lt;em&gt;little&lt;/em&gt; more work to get the percentage to feed &lt;code&gt;samtools view -s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So here’s my extension, using &lt;code&gt;awk&lt;/code&gt; to calculate the percentage of the bam file to sample if you want to get to &lt;code&gt;n&lt;/code&gt; reads. It also will return &lt;code&gt;1&lt;/code&gt; if your bam file has fewer reads than your target.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;frac=$( samtools idxstats  input.bam | cut -f3 | awk &#39;BEGIN {total=0} {total += $1} END {frac=15000000/total; if (frac &amp;gt; 1) {print 1} else {print frac}}&#39; )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you &lt;code&gt;echo $frac&lt;/code&gt; you get the downsample percentage: &lt;code&gt;0.334801&lt;/code&gt; for one of my bam files. You replace the 15000000 (15 million) with whatever you want to the the maximum number of reads.&lt;/p&gt;
&lt;p&gt;If your bam has fewer than &lt;code&gt;n&lt;/code&gt; reads you’ll get back &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can then just feed this into &lt;code&gt;samtools view&lt;/code&gt; like so: &lt;code&gt;samtools view -bs $frac input.bam &amp;gt; subsample.bam&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Putting it all together we have a nice two step process which fits nicely into an automated pipeline / workflow:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;frac=$( samtools idxstats  input.bam | cut -f3 | awk &#39;BEGIN {total=0} {total += $1} END {frac=15000000/total; if (frac &amp;gt; 1) {print 1} else {print frac}}&#39; )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;samtools view -bs $frac input.bam &amp;gt; subsample.bam&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;update&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;UPDATE&lt;/h1&gt;
&lt;p&gt;Tommy pointed out that you should run this &lt;strong&gt;after&lt;/strong&gt; you have removed reads that are duplicated, singletons, and low quality. It is not unusual to see bam files with &amp;gt;50% duplicate reads.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Plot 5: ridgeline density plots</title>
      <link>/./post/let-s-plot-5-ridgeline-density-plots/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/let-s-plot-5-ridgeline-density-plots/</guid>
      <description>&lt;div id=&#34;intro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;For this installment of Let’s Plot (where anyone can make a figure!), we’ll be making the hottest visualization of 2017 - the &lt;em&gt;joy plot&lt;/em&gt; or &lt;em&gt;ridgeline plot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Joy plots are partially overlapping density line plots. They are useful for densely showing changes in many distributions over time / condition / etc.&lt;/p&gt;
&lt;p&gt;This type of visualization was inspired by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unknown_Pleasures&#34;&gt;cover art&lt;/a&gt; from Joy Division’s album Unknown Pleasures and implemented in the R package &lt;a href=&#34;http://cran.r-project.org/web/packages/ggridges&#34;&gt;ggridges&lt;/a&gt; by Claus Wilke.
&lt;img src=&#34;/./img/lets_plot_5_cover.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;While the original term for this plot took off as &lt;em&gt;joy plot&lt;/em&gt; it has since been changed to a &lt;em&gt;ridgeline plot&lt;/em&gt; or &lt;em&gt;ridges plots&lt;/em&gt;, as discussed at length &lt;a href=&#34;http://serialmentor.com/blog/2017/9/15/goodbye-joyplots&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyways, Claus has a &lt;em&gt;beautiful&lt;/em&gt; intro to his package &lt;a href=&#34;https://cran.r-project.org/web/packages/ggridges/vignettes/gallery.html&#34;&gt;here&lt;/a&gt;. I will not reproduce any of his plots, as I want you to click the link. Plus they are way cooler looking than what we will be making. Which is real(ish) data from people in my division.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-davide-merged-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Load Davide merged data&lt;/h1&gt;
&lt;p&gt;This is a highly cut down version of his original data - which is a 160mb csv file. The csv for this exercise can be found &lt;a href=&#34;https://github.com/davemcg/Let_us_plot/blob/master/005_ggridges/davide_cell_size_data.csv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It contains cell area size for thousands of cells which have had a drug perturbation, split by wells in a dish. One drug per well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(ggridges)
merged.df &amp;lt;- read_csv(&amp;#39;~/git/Let_us_plot/005_ggridges/davide_cell_size_data.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-does-the-data-look-like&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What does the data look like?&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(merged.df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   Well.names  Area Drug 
##   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;
## 1 D07          643 20(S 
## 2 D07          388 20(S 
## 3 D09          290 20(S 
## 4 D08         1174 20(S 
## 5 D09          186 20(S 
## 6 D09         7062 20(S&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;first-we-create-a-fake-dmso-to-match-each-drug-so-we-can-see-the-null-distribution-matched-with-each-drug-in-the-visualization-below&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;First we create a fake DMSO to match each drug so we can see the ‘null’ distribution matched with each drug in the visualization below&lt;/h1&gt;
&lt;p&gt;I know &lt;code&gt;for&lt;/code&gt; loops are out of trend, but I find them easier to write &lt;em&gt;and&lt;/em&gt; read compared to &lt;code&gt;purrr&lt;/code&gt;. A lot less compact, I concede.&lt;/p&gt;
&lt;p&gt;This is a bit hacky, but I want to duplicate the DMSO data and assign it to each drug. Later we’ll be splitting the plot by drug, so we can see both the drug data &lt;em&gt;and&lt;/em&gt; the DMSO data in the section.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# for background DMSO plot
fake_DMSO_drug &amp;lt;- data.frame()
for (i in (merged.df$Drug %&amp;gt;% unique())){
  print(i)
  fake_DMSO_drug &amp;lt;- rbind(fake_DMSO_drug, merged.df %&amp;gt;% filter(Drug==&amp;#39;DMSO&amp;#39;) %&amp;gt;% mutate(Drug = i, Well.names=paste0(&amp;#39;0DMSO_&amp;#39;, i), DMSO=&amp;#39;Yes&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;20(S&amp;quot;
## [1] &amp;quot;3-Am&amp;quot;
## [1] &amp;quot;Brom&amp;quot;
## [1] &amp;quot;Cili&amp;quot;
## [1] &amp;quot;Ctrl&amp;quot;
## [1] &amp;quot;DMSO&amp;quot;
## [1] &amp;quot;ETP&amp;quot;
## [1] &amp;quot;G-Pr&amp;quot;
## [1] &amp;quot;GANT&amp;quot;
## [1] &amp;quot;HA 1&amp;quot;
## [1] &amp;quot;IMR-&amp;quot;
## [1] &amp;quot;IWP-&amp;quot;
## [1] &amp;quot;IWR-&amp;quot;
## [1] &amp;quot;LGK-&amp;quot;
## [1] &amp;quot;LY41&amp;quot;
## [1] &amp;quot;Metf&amp;quot;
## [1] &amp;quot;PJ 3&amp;quot;
## [1] &amp;quot;SANT&amp;quot;
## [1] &amp;quot;Sodi&amp;quot;
## [1] &amp;quot;Tori&amp;quot;
## [1] &amp;quot;UNC&amp;quot;
## [1] &amp;quot;Valp&amp;quot;
## [1] &amp;quot;Wnt-&amp;quot;
## [1] &amp;quot;WYE&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# order drugs by median area
drug_order &amp;lt;- merged.df %&amp;gt;% group_by(Drug) %&amp;gt;% summarise(MedianArea=median(Area)) %&amp;gt;% arrange(MedianArea) %&amp;gt;% pull(Drug)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ridgeline-plot-showing-each-well-separately&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;ridgeline plot, showing each well separately&lt;/h1&gt;
&lt;p&gt;Several wells got the same drugs. So there are multiple plots per drug.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_rows(merged.df %&amp;gt;% mutate(DMSO=&amp;#39;No&amp;#39;),fake_DMSO_drug) %&amp;gt;% 
  filter(Drug!=&amp;#39;DMSO&amp;#39;, Drug!=&amp;#39;Pyr&amp;#39;) %&amp;gt;% # don&amp;#39;t need DMSO plot now and Pyr is empty
  mutate(Drug=factor(Drug, levels=drug_order)) %&amp;gt;% # reorder drugs by drug_order above 
  ggplot(aes(y = Drug, x=log2(Area), group=Well.names, fill=DMSO)) +
  geom_density_ridges(alpha=0.6) + 
  theme_ridges() + 
  scale_fill_brewer(palette = &amp;#39;Set1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.258&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-04-12-let-s-plot-5-ridgeline-density-plots_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;same-but-merging-all-wells-together&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Same, but merging all wells together&lt;/h1&gt;
&lt;p&gt;Now merge all the wells together. Notice how the group is now &lt;code&gt;Well.names2&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bind_rows(merged.df %&amp;gt;% 
            mutate(DMSO=&amp;#39;No&amp;#39;, Well.names2=paste0(&amp;#39;Orig&amp;#39;, Drug)),
          fake_DMSO_drug %&amp;gt;% 
            mutate(Well.names2 = Well.names)) %&amp;gt;% 
  filter(Drug!=&amp;#39;DMSO&amp;#39;, Drug!=&amp;#39;Pyro&amp;#39;) %&amp;gt;% # dont&amp;#39; need DMSO plot now and Pyroxamine is empty
  mutate(Drug=factor(Drug, levels=drug_order)) %&amp;gt;% # reorder drugs by drug_order above 
  ggplot(aes(y = Drug, x = log2(Area), group=Well.names2, fill=DMSO)) +
  geom_density_ridges(alpha=0.6) + 
  theme_ridges() + 
  scale_fill_brewer(palette = &amp;#39;Set1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Picking joint bandwidth of 0.204&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-04-12-let-s-plot-5-ridgeline-density-plots_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;theres-a-large-variation-in-the-number-of-counts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;There’s a large variation in the number of counts&lt;/h1&gt;
&lt;p&gt;How did I know? Because a bunch of the density plots were super wavy - which means (almost always) that the number of counts in that sample is very low. Low numbers = high variance.&lt;/p&gt;
&lt;p&gt;So IMR, IMP, Tori, and WYE are &lt;em&gt;problem&lt;/em&gt; tests. Perhaps they are just killing the cells? Something for Davide to examine.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cell_area_counts_by_drug &amp;lt;- merged.df %&amp;gt;% 
  group_by(Drug) %&amp;gt;% 
  summarise(Count=n())

cell_area_counts_by_drug  %&amp;gt;% 
  ggplot(aes(x=Drug, y=Count)) +
  geom_bar(stat=&amp;#39;identity&amp;#39;) + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-04-12-let-s-plot-5-ridgeline-density-plots_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Are you in genomics and building models? Stop using ROC - use PR</title>
      <link>/./post/are-you-in-genomics-stop-using-roc-use-pr/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/are-you-in-genomics-stop-using-roc-use-pr/</guid>
      <description>&lt;div id=&#34;tldr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tldr&lt;/h2&gt;
&lt;p&gt;Area Under the Curve (AUC) of Receiver Operating Characteristic (ROC) is a terrible metric for a genomics problem. Do not use it. This metric also goes by AUC or AUROC. Use Precision Recall AUC.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I am working on a machine learning problem in genomics&lt;/li&gt;
&lt;li&gt;I was getting really confused why AUROC was so worthless&lt;/li&gt;
&lt;li&gt;scienceTwitter featuring Anshul Kundaje
&lt;img src=&#34;/./img/anshul_ROC_PR.png&#34; alt=&#34;https://twitter.com/anshulkundaje/status/965623852209352704&#34; /&gt;&lt;/li&gt;
&lt;li&gt;I want to save you (some time)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;whats-a-roc&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What’s a ROC?&lt;/h2&gt;
&lt;p&gt;First, you do have to use them because everyone uses them and expects them, but try to move them in the supplementary figures. Eventually the field will stop expecting this and demand to see a useful metric - like AUC of Precision Recall. More on this later.&lt;/p&gt;
&lt;p&gt;Before we discuss how an ROC is constructed, let’s see first see a &lt;em&gt;Confusion Matrix&lt;/em&gt; of a model.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Reference&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Positive&lt;/td&gt;
&lt;td&gt;Negative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Prediction&lt;/td&gt;
&lt;td&gt;Positive&lt;/td&gt;
&lt;td&gt;236&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Negative&lt;/td&gt;
&lt;td&gt;174&lt;/td&gt;
&lt;td&gt;116,952&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The two axes of a ROC are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;True Positive Rate (TPR) / Sensitivity / Recall (I assume it goes by so many names because different fields kept re-inventing it)&lt;/li&gt;
&lt;li&gt;False Positive Rate (FPR)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The TPR of the model is: &lt;span class=&#34;math display&#34;&gt;\[\frac{236}{236 + 174}\approx0.576\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The FPR of the model is: &lt;span class=&#34;math display&#34;&gt;\[\frac{103}{103 + 116,952}\approx0.001\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The model does not actually spit out positive or negative. It gives out &lt;em&gt;probabilities&lt;/em&gt; that a given item is positive or negative. If we change the probabilities cutoff to different values (to make the classification more or less stringent) we can get different TPR and FPR. This is done to generate TPR and FPR from 0 to 1 and a line is plotted. The AUC for the ROC (AUROC) is then calculated by measuring the area under the curve. Either by taking the &lt;a href=&#34;https://en.wikipedia.org/wiki/Receiver_operating_characteristic&#34;&gt;integral or a trapezoidal approximation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A larger AUROC is better. 1 is perfect. 0.5 is a bunch of grad students flipping coins.&lt;/p&gt;
&lt;p&gt;Now we have a rough idea of ROC works. Now let’s do some machine learning and see ROC works in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;machine-learning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Machine Learning&lt;/h2&gt;
&lt;p&gt;Load data. Briefly, they are ClinVar variants for a variety of eye disease. They’ve been classified as &lt;code&gt;Pathogenic&lt;/code&gt; or &lt;code&gt;NotPathogenic&lt;/code&gt; by groups submitting to ClinVar (ClinVar uses the term &lt;em&gt;benign&lt;/em&gt;). Each variant has been labeled with a variety of pathogenicity scores, population frequency info, and &lt;em&gt;in silico&lt;/em&gt; consequences. Empty values were assigned &lt;code&gt;-1&lt;/code&gt; (brief aside: I’m not sure if imputing missing data is a good idea here). One hot encoding was done to turn categorical information into numeric vectors. Each predictor (column) was centered and scaled.&lt;/p&gt;
&lt;p&gt;You can download the &lt;code&gt;clinvar_one_hot_CS_toy_set.tsv.gz&lt;/code&gt; file &lt;a href=&#34;https://github.com/davemcg/eye_var_Pathogenicity/blob/master/processed_data/clinvar_one_hot_CS_toy_set.tsv.gz&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.4
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clinvar &amp;lt;- read_tsv(&amp;#39;~/git/eye_var_Pathogenicity/processed_data/clinvar_one_hot_CS_toy_set.tsv.gz&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Status = col_character(),
##   is_lof = col_double(),
##   impact_severity = col_double(),
##   polyphen_score = col_double(),
##   sift_score = col_double(),
##   revel = col_double(),
##   cadd_phred = col_double(),
##   af_exac_all = col_double(),
##   pli = col_double(),
##   n_syn = col_double(),
##   n_mis = col_double(),
##   precessive = col_double(),
##   fathmm_mkl_coding_score = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# set levels for status
clinvar $Status &amp;lt;- factor(clinvar$Status, levels=c(&amp;#39;Pathogenic&amp;#39;,&amp;#39;NotPathogenic&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;quickly-check-our-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quickly check our data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; is the crucial column - it has the answer key&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clinvar$Status %&amp;gt;% table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## .
##    Pathogenic NotPathogenic 
##           186          8246&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Predictors&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clinvar %&amp;gt;% select(-Status) %&amp;gt;% colnames()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;is_lof&amp;quot;                  &amp;quot;impact_severity&amp;quot;        
##  [3] &amp;quot;polyphen_score&amp;quot;          &amp;quot;sift_score&amp;quot;             
##  [5] &amp;quot;revel&amp;quot;                   &amp;quot;cadd_phred&amp;quot;             
##  [7] &amp;quot;af_exac_all&amp;quot;             &amp;quot;pli&amp;quot;                    
##  [9] &amp;quot;n_syn&amp;quot;                   &amp;quot;n_mis&amp;quot;                  
## [11] &amp;quot;precessive&amp;quot;              &amp;quot;fathmm_mkl_coding_score&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;split-data-into-training-and-testing-sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Split data into training and testing sets&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clinvar$index &amp;lt;- seq(1:nrow(clinvar))
set.seed(9253)
train_set &amp;lt;- clinvar %&amp;gt;% group_by(Status) %&amp;gt;% sample_frac(0.5)
test_set &amp;lt;- clinvar %&amp;gt;% filter(!index %in% train_set$index)
# remove index so the models don&amp;#39;t use them to classify
train_set &amp;lt;- train_set %&amp;gt;% select(-index)
test_set &amp;lt;- test_set %&amp;gt;% select(-index)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;set-up-training-paramters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set up training paramters&lt;/h2&gt;
&lt;p&gt;This is a nice feature of the &lt;code&gt;caret&lt;/code&gt; package. You can customize training parameters and apply them to multiple algorithms&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caret)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: lattice&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;caret&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:purrr&amp;#39;:
## 
##     lift&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 5 fold cross validation
# twoClassSummary optimizes the algorithm for AUROC
fitControl_naive &amp;lt;- trainControl(
  classProbs=T, # we want probabilites returned for each prediction
  method = &amp;quot;cv&amp;quot;,
  number = 5,
  summaryFunction = twoClassSummary
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;build-models&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Build models&lt;/h2&gt;
&lt;p&gt;This is the big lie of machine learning. Look how trivial this is! Never mind the difficulty of all the work summarized above…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bglmFit &amp;lt;- train(Status ~ ., data=train_set, 
                 method = &amp;#39;bayesglm&amp;#39;,
                 trControl = fitControl_naive)
rfFit &amp;lt;- train(Status ~ ., data=train_set, 
               method = &amp;#39;rf&amp;#39;,
                 trControl = fitControl_naive)
# let&amp;#39;s see how a popular pathogenicity score does alone
caddFit &amp;lt;- train(Status ~ ., data=train_set %&amp;gt;% select(Status, cadd_phred), 
                   method = &amp;#39;glm&amp;#39;,
                 trControl = fitControl_naive)


my_models &amp;lt;- list()
my_models$bglm &amp;lt;- bglmFit
my_models$rfFit &amp;lt;- rfFit
my_models$cadd &amp;lt;- caddFit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;auroc-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;AUROC Plot!&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(PRROC)
# AUROC
roc_maker &amp;lt;- function(model, data) {
  # new predictions on test set
  # don&amp;#39;t use the training set - if you are overfitting you will not get accurate idea of your models merit
  new_predictions &amp;lt;- predict(model, data, type = &amp;#39;prob&amp;#39;) %&amp;gt;%
    mutate(Answers = data$Status, 
           Prediction = case_when(Pathogenic &amp;gt; 0.5 ~ &amp;#39;Pathogenic&amp;#39;, 
                                  TRUE ~ &amp;#39;NotPathogenic&amp;#39;))
  roc.curve(scores.class0 = new_predictions %&amp;gt;% filter(Answers==&amp;#39;Pathogenic&amp;#39;) %&amp;gt;% pull(Pathogenic),
           scores.class1 = new_predictions %&amp;gt;% filter(Answers==&amp;#39;NotPathogenic&amp;#39;) %&amp;gt;% pull(Pathogenic),
           curve = T)
}

#bglm
plot(roc_maker(bglmFit, test_set))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-03-are-you-in-genomics-stop-using-roc-use-pr_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;
Wow! 97% AUC for a bayesian generalized linear model for predicting pathogenicity! Let’s go straight to Nature/Cell/PNAS/Science!&lt;/p&gt;
&lt;p&gt;Well, let’s plot all three predictors at once. I did make three models after all.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roc_data &amp;lt;- data.frame()
for (i in names(my_models)){
  print(my_models[[i]]$method)
  roc &amp;lt;- roc_maker(my_models[[i]], test_set)
  out &amp;lt;- roc$curve[,1:2] %&amp;gt;% data.frame()
  colnames(out) &amp;lt;- c(&amp;#39;FPR&amp;#39;,&amp;#39;Sensitivity&amp;#39;)
  out$model &amp;lt;- i
  out$AUC &amp;lt;- roc$auc
  out$&amp;#39;Model (AUC)&amp;#39; &amp;lt;- paste0(i, &amp;#39; (&amp;#39;,round(roc$auc, 2),&amp;#39;)&amp;#39; )
  roc_data &amp;lt;- rbind(roc_data, out)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;bayesglm&amp;quot;
## [1] &amp;quot;rf&amp;quot;
## [1] &amp;quot;glm&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roc &amp;lt;- roc_data %&amp;gt;% 
  ggplot(aes(x=FPR, y=Sensitivity, colour=`Model (AUC)`)) + 
  geom_line() + 
  theme_minimal()  + 
  ggtitle(&amp;#39;AUROC&amp;#39;) +
  ggsci::scale_color_startrek()

roc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-03-are-you-in-genomics-stop-using-roc-use-pr_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Wow, the random forests are even better! CADD alone isn’t so bad, either! 78% is almost a B, right?&lt;/p&gt;
&lt;p&gt;Well, maybe we should make those confusion matrix things I showed earlier. Just to be careful.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cm_maker &amp;lt;- function(model, data, cutoff=0.5, mode = &amp;#39;sens_spec&amp;#39;) {
  new_predictions &amp;lt;- predict(model, data, type=&amp;#39;prob&amp;#39;) %&amp;gt;%
    mutate(Answers = as.factor(data$Status), Prediction = as.factor(case_when(Pathogenic &amp;gt; cutoff ~ &amp;#39;Pathogenic&amp;#39;, TRUE ~ &amp;#39;NotPathogenic&amp;#39;)))
  confusionMatrix(data = new_predictions$Prediction, reference = as.factor(new_predictions$Answers), mode= mode)
}

for (i in names(my_models)){
  print(i)
  print(cm_maker(my_models[[i]], test_set)$table)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;bglm&amp;quot;
##                Reference
## Prediction      Pathogenic NotPathogenic
##   Pathogenic            43            35
##   NotPathogenic         50          4088
## [1] &amp;quot;rfFit&amp;quot;
##                Reference
## Prediction      Pathogenic NotPathogenic
##   Pathogenic            58            18
##   NotPathogenic         35          4105
## [1] &amp;quot;cadd&amp;quot;
##                Reference
## Prediction      Pathogenic NotPathogenic
##   Pathogenic            10             3
##   NotPathogenic         83          4120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Huh, these do not look so great….the TPR for the bayes glm model is only 46%. But the AUROC looked so awesome.&lt;/p&gt;
&lt;p&gt;What is happening?&lt;/p&gt;
&lt;p&gt;Well, the classes are imbalanced. ROC plots are designed to provide useful information &lt;strong&gt;when your classes are balanced&lt;/strong&gt;. You have a huge set of &lt;code&gt;NotPathogenic&lt;/code&gt; compared to &lt;code&gt;Pathogenic&lt;/code&gt;. We have 186 &lt;code&gt;Pathogenic&lt;/code&gt; and 8246 &lt;code&gt;NotPathogenic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A model that always guessed &lt;code&gt;NotPathogenic&lt;/code&gt; would also do great on the AUROC.&lt;/p&gt;
&lt;p&gt;How do we better represent reality?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;precision-recall-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Precision Recall Plots&lt;/h2&gt;
&lt;p&gt;These plot precision against recall. The advantage compared to ROC is that they do not take into the &lt;em&gt;negative&lt;/em&gt; class. Let’s see what they look like with the same models. One thing to quickly note is that, by convention, the plots are ‘mirrored’ compared to ROC - you want your model to be in the top right for a PR plot, instead of the top left for a ROC.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# precision recall AUC
pr_maker &amp;lt;- function(model, data) {
  new_predictions &amp;lt;- predict(model, data, type = &amp;#39;prob&amp;#39;) %&amp;gt;%
    mutate(Answers = data$Status, Prediction = case_when(Pathogenic &amp;gt; 0.5 ~ &amp;#39;Pathogenic&amp;#39;, TRUE ~ &amp;#39;NotPathogenic&amp;#39;))
  pr.curve(scores.class0 = new_predictions %&amp;gt;% filter(Answers==&amp;#39;Pathogenic&amp;#39;) %&amp;gt;% pull(Pathogenic),
           scores.class1 = new_predictions %&amp;gt;% filter(Answers==&amp;#39;NotPathogenic&amp;#39;) %&amp;gt;% pull(Pathogenic),
           curve = T)
}

pr_data &amp;lt;- data.frame()
for (i in names(my_models)){
  print(my_models[[i]]$method)
  pr &amp;lt;- pr_maker(my_models[[i]], test_set)
  out &amp;lt;- pr$curve[,1:2] %&amp;gt;% data.frame()
  colnames(out) &amp;lt;- c(&amp;#39;Recall&amp;#39;,&amp;#39;Precision&amp;#39;)
  out$AUC &amp;lt;- pr$auc.integral
  out$model &amp;lt;- i
  out$&amp;#39;Model (AUC)&amp;#39; &amp;lt;- paste0(i, &amp;#39; (&amp;#39;,round(pr$auc.integral,2),&amp;#39;)&amp;#39; )
  pr_data &amp;lt;- rbind(pr_data, out)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;bayesglm&amp;quot;
## [1] &amp;quot;rf&amp;quot;
## [1] &amp;quot;glm&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pr &amp;lt;- pr_data %&amp;gt;% 
  ggplot(aes(x=Recall, y=Precision, colour=`Model (AUC)`)) + 
  geom_line() + 
  theme_minimal() + 
  ggtitle(&amp;#39;Precision Recall Curve&amp;#39;) +
  ggsci::scale_color_startrek()

pr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-03-are-you-in-genomics-stop-using-roc-use-pr_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This looks like a more reasonable way to assess performance. Also notice how the RF and bayes GLM have subtantially different performance when being assessed like this, even though the AUROC was only 0.02 apart.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Why again do I have to use PR plots in genomics - I balanced my two classes when I trained the model! Well because in actual problem space, the genome, the problems are &lt;em&gt;always&lt;/em&gt; wildly imbalanced between classes. The human genome is three gigabases (3e9) in size.&lt;/p&gt;
&lt;p&gt;Using knn to identify promoters? There are 20,000 genes * 1000 base pair (bp) promoter = 2e6 bp.&lt;/p&gt;
&lt;p&gt;3e9 / 2e6 = 1500:1 ratio&lt;/p&gt;
&lt;p&gt;Writing a deep convoluational neural network to identify CTCF binding sites? CTCF binds around 50,000 sites * 14bp = 7e5.&lt;/p&gt;
&lt;p&gt;3e9 / 7e5 = 4300:1 ratio&lt;/p&gt;
&lt;p&gt;Using random forests to create a pathogenicity metric? Well, in a given genome only 1-2 positions will contribute to a mendelian disorder.&lt;/p&gt;
&lt;p&gt;3e9 / 2 = 1.5e9:1 ratio&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-little-more-reading&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A little more reading&lt;/h2&gt;
&lt;p&gt;If you have some more time, go read Lior Pachter’s &lt;a href=&#34;https://liorpachter.wordpress.com/2016/12/21/confusion-matrix-terminology-is-taxicab-trigonometry/&#34;&gt;post&lt;/a&gt; on metrics for assessing performance.&lt;/p&gt;
&lt;p&gt;Also check this tweet &lt;a href=&#34;https://twitter.com/michaelhoffman/status/969261327331061760&#34;&gt;conversation&lt;/a&gt; between Michael Hoffman and Anshul Kundaje.&lt;/p&gt;
&lt;p&gt;There are also several web posts that explain &lt;a href=&#34;https://www.kaggle.com/general/7517&#34;&gt;why&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/lct14558/imbalanced-data-why-you-should-not-use-roc-curve&#34;&gt;ROC&lt;/a&gt; is bad for unbalanced classes and even a published &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4349800/&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Something Different: Automated Neighborhood Traffic Monitoring</title>
      <link>/./post/traffic-monitoring-intro/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/traffic-monitoring-intro/</guid>
      <description>&lt;hr /&gt;
&lt;p&gt;title: ‘Something Different: Automated Neighborhood Traffic Monitoring’ author: David McGaughey date: ‘2018-03-03’ slug: traffic-monitoring-intro categories: - R - python - raspberry - pi tags: - R - python - raspberry - pi —&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is, obviously, a personal project. Traffic is a concern in my town. Cut-through, speeding, etc. The town has paid for a couple of (very expensive!) traffic surveys, but the reports are not very useful as the company only sets up in town for a few days (if that) and then only reports stuff like ‘number of cars for a one hour period.’ I want to know how many cars are passing my house per day, per hour, per weekday, per weekend, etc. I’d also like to know how many cars are going above the 15 mph speed limit on my round (why 15 mph?! - there’s a very tight turn of the road).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution?&lt;/h2&gt;
&lt;p&gt;Well, I figured a video feed hooked up to a computer could be set up in my house, facing the road. Motion could be detected, then logged. Since the distance is (approximately constant) between the car and the camera, it would be possible to detect a car and approximate its speed. I didn’t want to dedicated a laptop for this project because I imagine this would be most useful with continuous observation. This sounded like a perfect use for a Raspberry Pi, which I have been wanting an excuse to buy. Some quick Googling for “speed camera raspberry pi” led me to this &lt;a href=&#34;https://github.com/pageauc/speed-camera&#34;&gt;GitHub project&lt;/a&gt;. Someone had used &lt;a href=&#34;https://opencv.org&#34;&gt;OpenCV&lt;/a&gt; and Python to do exactly what I thought may be possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stuff-i-bought&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stuff I bought&lt;/h2&gt;
&lt;p&gt;I thought I bought a Raspberry Pi 3 B+, but after looking at my Amazon history I realized I bought a 3 B. Oops. The 3 B+ has faster WiFi and a higher CPU clock. Oh well.&lt;/p&gt;
&lt;p&gt;Anyways, the kit came with a 16gb microSD card with NOOBS (some kind of loader for multiple operating systems), a case, an HDMI cable, and a power supply.&lt;/p&gt;
&lt;p&gt;I also bought a “Arducam” 5mp camera. The official Raspberry Pi camera was double the price and the reviews seemed OK (~$25 instead of ~$13).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;brief-setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Brief setup&lt;/h2&gt;
&lt;p&gt;I was hoping I could just SSH into the Pi on start-up, but I could not see the ethernet-connected Pi on my network. I then used an HDMI cable to hook it up to a TV and a grubby USB keyboard I found in my basement. I realized that the NOOBs loader needed to be told what OS to install. I picked the basic Raspian OS, as I was not going to use any GUI stuff. Then I did some Googling to figure out how to give it the WiFi network info and after that I could just SSH into it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;software-installed&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Software installed&lt;/h2&gt;
&lt;p&gt;I am almost certainly going to regret that I just ran &lt;code&gt;sudo apt-get install&lt;/code&gt; for each piece of software I wanted by hand when I want to set up a new one.&lt;/p&gt;
&lt;p&gt;I am not a good admin.&lt;/p&gt;
&lt;p&gt;I installed python3, &lt;a href=&#34;https://www.pyimagesearch.com/2016/04/18/install-guide-raspberry-pi-3-raspbian-jessie-opencv-3/&#34;&gt;opencv&lt;/a&gt; (which was a PITA), git, R, and all of the dependencies those four things complained about.&lt;/p&gt;
&lt;p&gt;I then installed the &lt;a href=&#34;https://github.com/pageauc/speed-camera&#34;&gt;speed-camera project&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calibration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calibration&lt;/h2&gt;
&lt;p&gt;The speed-camera software&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Plot 4: R vs Excel, Round 1</title>
      <link>/./post/let-s-plot-4-r-vs-excel/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/let-s-plot-4-r-vs-excel/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cleaning&#34;&gt;Cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reformatting&#34;&gt;Reformatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#box-plot&#34;&gt;Box Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#boxplot-with-all-the-data-displayed&#34;&gt;Boxplot with all the data displayed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#i-used-to-prefer-violin-plots&#34;&gt;I used to prefer violin plots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#im-a-fan-of-beeswarm-plots-with-boxplots&#34;&gt;I’m a fan of beeswarm plots with boxplots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#doing-statistics.&#34;&gt;Doing statistics.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#session&#34;&gt;Session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The battle that we’ve all been waiting for. Excel vs. R. Bar plot versus a plot that actually shows the data.&lt;/p&gt;
&lt;p&gt;Yeah, this isn’t a fair fight.&lt;/p&gt;
&lt;p&gt;Bar plots are terrible. Why? Simple. They don’t show what your data looks like. A bar plot gives you zero idea how many data points there are. You can add error bars, but you don’t know if you are looking at standard error or standard deviation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/./img/excel_bar_plot_bad.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Box plots are &lt;em&gt;much&lt;/em&gt; better. They display useful information like minimum, maximum, quartiles, and median. But they still can really mislead depending on how your data is structured.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/./img/BoxViolinSmaller.gif&#34; alt=&#34;https://www.autodeskresearch.com/publications/samestats&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;https://www.autodeskresearch.com/publications/samestats&#34; class=&#34;uri&#34;&gt;https://www.autodeskresearch.com/publications/samestats&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/./img/journal.pbio.1002128.g001.png&#34; alt=&#34;https://doi.org/10.1371/journal.pbio.1002128&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;https://doi.org/10.1371/journal.pbio.1002128&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1371/journal.pbio.1002128&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Why do so many scientists keep using bar (or box) plots? Well, simple. Excel makes bar plots with one click. Excel &lt;em&gt;can&lt;/em&gt; make box plots, but it is &lt;a href=&#34;https://support.office.com/en-us/article/create-a-box-plot-10204530-8cdf-40fe-a711-2eb9785e510f&#34;&gt;not easy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Excel, as far as I can tell, can’t do what I’m about to show you: violin plots or box plots with the &lt;em&gt;raw data displayed inline&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a bonus, I made a short video to demonstrate how you can skip the below data cleaning in R with some clicking and dragging in Excel - then just plot in R.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_teDfnv0gUE&amp;amp;feature=youtu.be&#34;&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;A variety of eye measurements between a wild-type zebrafish line and a mutant line.&lt;/p&gt;
&lt;p&gt;You can get the excel file &lt;a href=&#34;https://github.com/davemcg/Let_us_plot/blob/master/004_r_vs_excel/Compiled%20eye%20measurements.xlsx&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.4
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.5.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggsci)
library(ggbeeswarm)
micro &amp;lt;- readxl::read_xlsx(&amp;#39;~/git/Let_us_plot/004_r_vs_excel/Compiled eye measurements.xlsx&amp;#39;)
head(micro)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 13
##   X__1  Day3   X__2  Day5  X__3  X__4  X__5  X__6  X__7  X__8  X__9  X__10
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
## 1 Fish  WT/Het Mut   WT/H… Mut   NA    NA    NA    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt; 
## 2 1     6.099… 4.80… 7.29… 6.70… NA    NA    NA    &amp;lt;NA&amp;gt;  Day3  &amp;lt;NA&amp;gt;  Day5 
## 3 2     7.099… 5.29… 7.19… 8.20… NA    NA    NA    &amp;lt;NA&amp;gt;  WT/H… Mut   WT/H…
## 4 3     0.05   5.39… 7.69… 7.09… NA    NA    NA    avg   6.06… 5.37… 7.31…
## 5 4     6.3E-2 5.80… 7.19… 6.60… NA    NA    NA    &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt; 
## 6 5     6.400… 5.80… 6.09… 7.09… NA    NA    NA    se    1.50… 1.12… 1.12…
## # ... with 1 more variable: X__11 &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cleaning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cleaning&lt;/h2&gt;
&lt;p&gt;OK, a bit messy since this isn’t a computer-formatted file. I’m going to grab the relevant data (ignoring the summarize stats) by looking at the data and slicing and selecting by coordinates. Not worth doing anything fancier (regex, grep, neural network) to automate this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# clean
micro &amp;lt;- micro %&amp;gt;% 
  slice(2:31) %&amp;gt;% 
  select(`Fish ID` = X__1, 
         Day3_Het = Day3, 
         Day3_Mut = X__2, 
         Day5_Het = Day5, 
         Day5_Mut = X__3) %&amp;gt;% 
  mutate(Day3_Het = as.numeric(Day3_Het),
         Day3_Mut = as.numeric(Day3_Mut),
         Day5_Het = as.numeric(Day5_Het),
         Day5_Mut = as.numeric(Day5_Mut))
micro&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 30 x 5
##    `Fish ID` Day3_Het Day3_Mut Day5_Het Day5_Mut
##    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 1            0.061    0.048    0.073    0.067
##  2 2            0.071    0.053    0.072    0.082
##  3 3            0.05     0.054    0.077    0.071
##  4 4            0.063    0.058    0.072    0.066
##  5 5            0.064    0.058    0.061    0.071
##  6 6            0.065    0.053    0.075    0.07 
##  7 7            0.058    0.056    0.08     0.07 
##  8 8            0.057    0.053    0.063    0.076
##  9 9            0.065    0.068    0.073    0.071
## 10 10           0.062    0.061    0.072    0.075
## # ... with 20 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reformatting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reformatting&lt;/h2&gt;
&lt;p&gt;We are also going to have to reformat the data since Date and Genotype are mixed together in a column. Would rather have all the data in one column and the date and genotype in their own columns. Confused? Well, just compare the above data to the modified data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt; - if this is too intimidating right now, then it is fine to just manually move the data around with Excel to make it look like the below data. Then you can just focus on making the figure.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# wide to long
micro &amp;lt;- micro %&amp;gt;% 
  gather(Date_Genotype, Size, -`Fish ID`) %&amp;gt;% 
  separate(Date_Genotype, c(&amp;#39;Date&amp;#39;,&amp;#39;Genotype&amp;#39;))
micro&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 120 x 4
##    `Fish ID` Date  Genotype  Size
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 1         Day3  Het      0.061
##  2 2         Day3  Het      0.071
##  3 3         Day3  Het      0.05 
##  4 4         Day3  Het      0.063
##  5 5         Day3  Het      0.064
##  6 6         Day3  Het      0.065
##  7 7         Day3  Het      0.058
##  8 8         Day3  Het      0.057
##  9 9         Day3  Het      0.065
## 10 10        Day3  Het      0.062
## # ... with 110 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;box-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Box Plot&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;micro %&amp;gt;% ggplot(aes(x=Genotype, y=Size, colour=Genotype)) + 
  facet_wrap(~Date) +
  geom_boxplot() + 
  theme_minimal() + 
  scale_color_aaas()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-01-let-s-plot-r-vs-excel_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplot-with-all-the-data-displayed&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Boxplot with all the data displayed&lt;/h2&gt;
&lt;p&gt;So easy with ggplot2&lt;/p&gt;
&lt;p&gt;Remember to have your &lt;code&gt;geom_boxplot&lt;/code&gt; remove display of outliers (since you are showing them now with &lt;code&gt;geom_jitter&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;micro %&amp;gt;% ggplot(aes(x=Genotype, y=Size, colour=Genotype)) + facet_wrap(~Date) +
  geom_boxplot(outlier.shape = NA) + 
  geom_jitter() + 
  theme_minimal() + 
  scale_color_aaas()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-01-let-s-plot-r-vs-excel_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;i-used-to-prefer-violin-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;I used to prefer violin plots&lt;/h2&gt;
&lt;p&gt;But the smoothing for outlier points can be misleading. They also confuse people who haven’t seen them before &lt;strong&gt;and&lt;/strong&gt; you lose the quartile / median info a boxplot provides.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;micro %&amp;gt;% ggplot(aes(x=Genotype, y=Size, colour=Genotype)) + facet_wrap(~Date) +
  geom_violin() + 
  geom_jitter() + 
  theme_minimal() + 
  scale_color_aaas()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-01-let-s-plot-r-vs-excel_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;im-a-fan-of-beeswarm-plots-with-boxplots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;I’m a fan of beeswarm plots with boxplots&lt;/h2&gt;
&lt;p&gt;You get the violin plot structure and the quartile / median info of boxplots. Win win.&lt;/p&gt;
&lt;p&gt;I’ve reduced the alpha (opacity) of the points to put more emphasis on the boxplot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;micro %&amp;gt;% ggplot(aes(x=Genotype, y=Size, colour=Genotype)) + facet_wrap(~Date) +
  geom_boxplot(outlier.shape = NA) + 
  geom_quasirandom(alpha=0.4) + 
  theme_minimal() + 
  scale_color_aaas()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-03-01-let-s-plot-r-vs-excel_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;doing-statistics.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Doing statistics.&lt;/h2&gt;
&lt;p&gt;Are the differences significant between genotype on Day3 and Day5? More precisely, can we reject the null hypothesis (no mean difference in size)?&lt;/p&gt;
&lt;p&gt;Let’s use the venerable t.test. The data eyeballs as normally distributed. I’m using &lt;code&gt;dplyr&lt;/code&gt; &lt;code&gt;filter&lt;/code&gt; to test Day 3 and Day 5 separately, testing for differences in mean between genotypes (hence the right half of the equation below ends with &lt;code&gt;pull(Genotype)&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Day 3
t.test(micro %&amp;gt;% filter(Date==&amp;#39;Day3&amp;#39;) %&amp;gt;% pull(Size) ~ micro %&amp;gt;% filter(Date==&amp;#39;Day3&amp;#39;) %&amp;gt;% pull(Genotype))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  micro %&amp;gt;% filter(Date == &amp;quot;Day3&amp;quot;) %&amp;gt;% pull(Size) by micro %&amp;gt;% filter(Date == &amp;quot;Day3&amp;quot;) %&amp;gt;% pull(Genotype)
## t = 3.5888, df = 53.629, p-value = 0.0007197
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  0.003029977 0.010703357
## sample estimates:
## mean in group Het mean in group Mut 
##        0.06060000        0.05373333&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Day 5
t.test(micro %&amp;gt;% filter(Date==&amp;#39;Day5&amp;#39;) %&amp;gt;% pull(Size) ~ micro %&amp;gt;% filter(Date==&amp;#39;Day5&amp;#39;) %&amp;gt;% pull(Genotype))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  micro %&amp;gt;% filter(Date == &amp;quot;Day5&amp;quot;) %&amp;gt;% pull(Size) by micro %&amp;gt;% filter(Date == &amp;quot;Day5&amp;quot;) %&amp;gt;% pull(Genotype)
## t = 1.4851, df = 52.164, p-value = 0.1435
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -0.001029920  0.006896587
## sample estimates:
## mean in group Het mean in group Mut 
##        0.07313333        0.07020000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes for Day 3, no for Day 5.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;session&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Session&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       America/New_York            
##  date     2018-07-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package    * version date       source                           
##  assertthat   0.2.0   2017-04-11 CRAN (R 3.5.0)                   
##  backports    1.1.2   2017-12-13 CRAN (R 3.5.0)                   
##  base       * 3.5.0   2018-04-24 local                            
##  beeswarm     0.2.3   2016-04-25 CRAN (R 3.5.0)                   
##  bindr        0.1.1   2018-03-13 CRAN (R 3.5.0)                   
##  bindrcpp   * 0.2.2   2018-03-29 CRAN (R 3.5.0)                   
##  blogdown     0.8.1   2018-07-16 Github (rstudio/blogdown@d54c39a)
##  bookdown     0.7     2018-02-18 CRAN (R 3.5.0)                   
##  broom        0.4.4   2018-03-29 CRAN (R 3.5.0)                   
##  cellranger   1.1.0   2016-07-27 CRAN (R 3.5.0)                   
##  cli          1.0.0   2017-11-05 CRAN (R 3.5.0)                   
##  colorspace   1.3-2   2016-12-14 CRAN (R 3.5.0)                   
##  compiler     3.5.0   2018-04-24 local                            
##  crayon       1.3.4   2017-09-16 CRAN (R 3.5.0)                   
##  datasets   * 3.5.0   2018-04-24 local                            
##  devtools     1.13.5  2018-02-18 CRAN (R 3.5.0)                   
##  digest       0.6.15  2018-01-28 CRAN (R 3.5.0)                   
##  dplyr      * 0.7.6   2018-06-29 cran (@0.7.6)                    
##  evaluate     0.10.1  2017-06-24 CRAN (R 3.5.0)                   
##  forcats    * 0.3.0   2018-02-19 CRAN (R 3.5.0)                   
##  foreign      0.8-70  2017-11-28 CRAN (R 3.5.0)                   
##  ggbeeswarm * 0.6.0   2017-08-07 CRAN (R 3.5.0)                   
##  ggplot2    * 3.0.0   2018-07-03 cran (@3.0.0)                    
##  ggsci      * 2.9     2018-05-14 CRAN (R 3.5.0)                   
##  glue         1.2.0   2017-10-29 CRAN (R 3.5.0)                   
##  graphics   * 3.5.0   2018-04-24 local                            
##  grDevices  * 3.5.0   2018-04-24 local                            
##  grid         3.5.0   2018-04-24 local                            
##  gtable       0.2.0   2016-02-26 CRAN (R 3.5.0)                   
##  haven        1.1.1   2018-01-18 CRAN (R 3.5.0)                   
##  hms          0.4.2   2018-03-10 CRAN (R 3.5.0)                   
##  htmltools    0.3.6   2017-04-28 CRAN (R 3.5.0)                   
##  httr         1.3.1   2017-08-20 CRAN (R 3.5.0)                   
##  jsonlite     1.5     2017-06-01 CRAN (R 3.5.0)                   
##  knitr        1.20    2018-02-20 CRAN (R 3.5.0)                   
##  labeling     0.3     2014-08-23 CRAN (R 3.5.0)                   
##  lattice      0.20-35 2017-03-25 CRAN (R 3.5.0)                   
##  lazyeval     0.2.1   2017-10-29 CRAN (R 3.5.0)                   
##  lubridate    1.7.4   2018-04-11 CRAN (R 3.5.0)                   
##  magrittr     1.5     2014-11-22 CRAN (R 3.5.0)                   
##  memoise      1.1.0   2017-04-21 CRAN (R 3.5.0)                   
##  methods    * 3.5.0   2018-04-24 local                            
##  mnormt       1.5-5   2016-10-15 CRAN (R 3.5.0)                   
##  modelr       0.1.2   2018-05-11 CRAN (R 3.5.0)                   
##  munsell      0.4.3   2016-02-13 CRAN (R 3.5.0)                   
##  nlme         3.1-137 2018-04-07 CRAN (R 3.5.0)                   
##  parallel     3.5.0   2018-04-24 local                            
##  pillar       1.2.3   2018-05-25 CRAN (R 3.5.0)                   
##  pkgconfig    2.0.1   2017-03-21 CRAN (R 3.5.0)                   
##  plyr         1.8.4   2016-06-08 CRAN (R 3.5.0)                   
##  psych        1.8.4   2018-05-06 CRAN (R 3.5.0)                   
##  purrr      * 0.2.4   2017-10-18 CRAN (R 3.5.0)                   
##  R6           2.2.2   2017-06-17 CRAN (R 3.5.0)                   
##  Rcpp         0.12.17 2018-05-18 CRAN (R 3.5.0)                   
##  readr      * 1.1.1   2017-05-16 CRAN (R 3.5.0)                   
##  readxl       1.1.0   2018-04-20 CRAN (R 3.5.0)                   
##  reshape2     1.4.3   2017-12-11 CRAN (R 3.5.0)                   
##  rlang        0.2.1   2018-05-30 CRAN (R 3.5.0)                   
##  rmarkdown    1.10    2018-06-11 cran (@1.10)                     
##  rprojroot    1.3-2   2018-01-03 CRAN (R 3.5.0)                   
##  rstudioapi   0.7     2017-09-07 CRAN (R 3.5.0)                   
##  rvest        0.3.2   2016-06-17 CRAN (R 3.5.0)                   
##  scales       0.5.0   2017-08-24 CRAN (R 3.5.0)                   
##  stats      * 3.5.0   2018-04-24 local                            
##  stringi      1.2.2   2018-05-02 CRAN (R 3.5.0)                   
##  stringr    * 1.3.1   2018-05-10 CRAN (R 3.5.0)                   
##  tibble     * 1.4.2   2018-01-22 CRAN (R 3.5.0)                   
##  tidyr      * 0.8.1   2018-05-18 CRAN (R 3.5.0)                   
##  tidyselect   0.2.4   2018-02-26 CRAN (R 3.5.0)                   
##  tidyverse  * 1.2.1   2017-11-14 CRAN (R 3.5.0)                   
##  tools        3.5.0   2018-04-24 local                            
##  utf8         1.1.4   2018-05-24 CRAN (R 3.5.0)                   
##  utils      * 3.5.0   2018-04-24 local                            
##  vipor        0.4.5   2017-03-22 CRAN (R 3.5.0)                   
##  withr        2.1.2   2018-03-15 CRAN (R 3.5.0)                   
##  xfun         0.3     2018-07-06 cran (@0.3)                      
##  xml2         1.2.0   2018-01-24 CRAN (R 3.5.0)                   
##  yaml         2.1.19  2018-05-01 CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Plot 3: Base pair resolution NGS (exome) coverage plots - Part 2</title>
      <link>/./post/let-s-plot-3-part-2/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/let-s-plot-3-part-2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#call-mosdepth-on-bam-to-calculate-bp-specific-read-depth&#34;&gt;Call mosdepth on bam to calculate bp-specific read depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#intersect-base-pair-depth-info-with-transcript-and-exon-number&#34;&gt;Intersect base pair depth info with transcript and exon number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#now-its-r-time&#34;&gt;Now it’s R time!&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#prepare-metadata&#34;&gt;Prepare Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#load-mosdepth-bedtools-intersect-data-and-prep&#34;&gt;Load mosdepth / bedtools intersect data and prep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#plot-maker-version-1&#34;&gt;Plot Maker, version 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#version-2&#34;&gt;Version 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sessioninfo&#34;&gt;sessionInfo()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is a barebones (but detailed enough, I hope) discussion of how to take a bam file, extract base pair resolution coverage data, then finagle the data into coverage plots by gene and exon. No data will be given for the below code. I’m not sharing a bam file. Also, not much point to sharing the bed, HGNC name, and gtf file, as there’s a decent chance they won’t work for your bam.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;call-mosdepth-on-bam-to-calculate-bp-specific-read-depth&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Call mosdepth on bam to calculate bp-specific read depth&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/brentp/mosdepth&#34;&gt;mosdepth&lt;/a&gt;, by default, will generate base pair resolution coverage across the entire genome. Another fantastic tool from Brent Peterson and Aaron Quinlan (some point I’ll do a gushy post on &lt;a href=&#34;http://peddy.readthedocs.io/en/latest/&#34;&gt;all&lt;/a&gt; &lt;a href=&#34;http://gemini.readthedocs.io/en/latest/&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;http://bedtools.readthedocs.io/en/latest/&#34;&gt;the&lt;/a&gt; useful tools &lt;a href=&#34;http://quinlanlab.org/#software&#34;&gt;Quinlan and company have made&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mosdepth&lt;/code&gt; will run &lt;em&gt;very&lt;/em&gt; quickly (minutes instead of hours), compared to &lt;code&gt;bedtools genomecov&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# bash 
sinteractive --cpus-per-task 16
module load mosdepth
mosdepth -t 16 41001412010527 41001412010527_realigned_recal.bam &amp;amp;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;intersect-base-pair-depth-info-with-transcript-and-exon-number&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Intersect base pair depth info with transcript and exon number&lt;/h2&gt;
&lt;p&gt;The intersect is to select regions overlapping exons and to label them with the transcript name and exon number present in &lt;code&gt;gencode_genes_v27lift37.codingExons.ensembl.bed.gz&lt;/code&gt;. See the code below for how to make your own.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# bash

# gencode_genes_v27lift37.codingExons.bed was downloaded from the UCSC table browser from genocde gene v27lift37 and &amp;#39;coding exons&amp;#39; with 0 padding were selected as the output for the bed file
# my https://github.com/davemcg/ChromosomeMappings/ convert_notation.py script was then used to convert the UCSC notation in ensembl notation, which my bam uses
# files in biowulf2:/data/mcgaugheyd/genomes/GRCh37/
module load bedtools
~/git/ChromosomeMappings/convert_notation.py -c ~/git/ChromosomeMappings/GRCh37_gencode2ensembl.txt -f gencode_genes_v27lift37.codingExons.bed | sort -k1,1 -k2,2n | gzip &amp;gt; gencode_genes_v27lift37.codingExons.ensembl.bed.gz
bedtools intersect -wa -wb -a 41001412010527.per-base.bed.gz -b /data/mcgaugheyd/genomes/GRCh37/gencode_genes_v27lift37.codingExons.ensembl.bed.gz | bgzip  &amp;gt; 41001412010527.per-base.labeled.bed.gz &amp;amp;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;now-its-r-time&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Now it’s R time!&lt;/h1&gt;
&lt;div id=&#34;prepare-metadata&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prepare Metadata&lt;/h2&gt;
&lt;p&gt;You’ll need &lt;a href=&#34;ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_27/GRCh37_mapping/gencode.v27lift37.metadata.HGNC.gz&#34;&gt;HGNC &amp;lt;-&amp;gt; Ensembl Transcript converter&lt;/a&gt; and the &lt;a href=&#34;ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_27/GRCh37_mapping/gencode.v27lift37.basic.annotation.gtf.gz&#34;&gt;Gencode GTF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first file is used to match gene ‘names’ with ensembl transcript ID&lt;/p&gt;
&lt;p&gt;The second file is used to semi-accurately pick the ‘canonical’ transcript for a gene (pick the appris transcript, then the longest)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.4
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::between()   masks data.table::between()
## ✖ dplyr::filter()    masks stats::filter()
## ✖ dplyr::first()     masks data.table::first()
## ✖ dplyr::lag()       masks stats::lag()
## ✖ dplyr::last()      masks data.table::last()
## ✖ purrr::transpose() masks data.table::transpose()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cowplot)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;cowplot&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:ggplot2&amp;#39;:
## 
##     ggsave&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
metadata &amp;lt;- fread(&amp;#39;gzcat ~/GenomicData/gencode.v27lift37.metadata.HGNC.gz&amp;#39;, header=F)
colnames(metadata) &amp;lt;- c(&amp;#39;Transcript&amp;#39;,&amp;#39;Name&amp;#39;)
gencode &amp;lt;- fread(&amp;#39;gzcat ~/GenomicData/gencode.v27lift37.basic.annotation.gtf.gz&amp;#39;, header=F, skip=4)
gencode2 &amp;lt;- gencode %&amp;gt;% filter(V3==&amp;#39;transcript&amp;#39;) %&amp;gt;% 
  filter(grepl(&amp;#39;appris_principal&amp;#39;, V9)) %&amp;gt;% 
  rowwise() %&amp;gt;%  
  mutate(Transcript = str_extract(V9,&amp;#39;ENST\\d{11}\\.\\d+&amp;#39;), # use regex to graph ensembl transcript 
         Gene = str_extract(V9, &amp;#39;gene_name\\s\\&amp;quot;.*?;&amp;#39;), # and the gene name
         Size=V5-V4) %&amp;gt;% 
  separate(Gene, c(&amp;#39;skip&amp;#39;,&amp;#39;Name&amp;#39;,&amp;#39;skip2&amp;#39;),&amp;#39;\&amp;quot;&amp;#39;) %&amp;gt;% # now you have to remove the &amp;#39;gene name&amp;#39; part  
  select(-skip, -skip2) %&amp;gt;% 
  group_by(Name) %&amp;gt;% top_n(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Selecting by Size&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;load-mosdepth-bedtools-intersect-data-and-prep&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load mosdepth / bedtools intersect data and prep&lt;/h2&gt;
&lt;p&gt;Label coverage chunks with the depth of their coverage with case_when and extract the transcript name and exon number with a bunch of &lt;code&gt;separate&lt;/code&gt; commands&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;depth_data &amp;lt;- fread(&amp;#39;gzcat ~/Desktop/41001412010527.per-base.labeled.bed.gz&amp;#39;)
dd_processed &amp;lt;- depth_data %&amp;gt;% 
  separate(V8, c(&amp;#39;Transcript&amp;#39;,&amp;#39;Rest&amp;#39;), &amp;#39;_cds_&amp;#39;) %&amp;gt;% 
  separate(Rest, c(&amp;#39;Before&amp;#39;,&amp;#39;Stuff&amp;#39;),&amp;#39;_chr&amp;#39;) %&amp;gt;% 
  separate(Before, c(&amp;#39;Exon Number&amp;#39;,&amp;#39;Num2&amp;#39;),sep=&amp;#39;_&amp;#39;) %&amp;gt;% 
  mutate(Depth = case_when(V4 &amp;lt; 10 ~ &amp;#39;&amp;lt; 10 Reads&amp;#39;, 
                           V4 &amp;lt; 20 ~ &amp;#39;&amp;lt; 20 Reads&amp;#39;, 
                           TRUE ~ &amp;#39;&amp;gt;= 20 Reads&amp;#39;)) %&amp;gt;% 
  mutate(Depth=factor(Depth, levels=c(&amp;#39;&amp;lt; 10 Reads&amp;#39;,&amp;#39;&amp;lt; 20 Reads&amp;#39;,&amp;#39;&amp;gt;= 20 Reads&amp;#39;))) %&amp;gt;% 
  mutate(Transcript=case_when(grepl(&amp;#39;_&amp;#39;,Transcript) ~ gsub(&amp;#39;_.&amp;#39;,&amp;#39;&amp;#39;,Transcript), 
                              TRUE ~ Transcript)) %&amp;gt;% 
  select(Chr=V1, Start=V2, End=V3, Read_Depth=V4, Transcript, Strand=V10, Depth, `Exon Number`, ExonStart=V6, ExonEnd=V7)

dd_processed &amp;lt;- left_join(dd_processed, metadata, by=c(&amp;#39;Transcript&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-maker-version-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot Maker, version 1&lt;/h2&gt;
&lt;p&gt;Faceted by exon. One plot per gene and using cowplot to &lt;em&gt;glue&lt;/em&gt; them together&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genes &amp;lt;- c(&amp;#39;PAX6&amp;#39;,&amp;#39;ABCA4&amp;#39;,&amp;#39;NRL&amp;#39;,&amp;#39;CRX&amp;#39;,&amp;#39;RPGR&amp;#39;)
transcripts = gencode2 %&amp;gt;% filter(Name %in% genes) %&amp;gt;% pull(Transcript)

# set a custom color that will work even if a category is missing
scale_colour_custom &amp;lt;- function(...){
  ggplot2:::manual_scale(&amp;#39;colour&amp;#39;, 
                         values = setNames(c(&amp;#39;darkred&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;black&amp;#39;),
                                           c(&amp;#39;&amp;lt; 10 Reads&amp;#39;,&amp;#39;&amp;lt; 20 Reads&amp;#39;,&amp;#39;&amp;gt;= 20 Reads&amp;#39;)), 
                         ...)
}

plot_maker &amp;lt;- function(tx){
  num_of_exons &amp;lt;- dd_processed %&amp;gt;% filter(Transcript==tx) %&amp;gt;% pull(`Exon Number`) %&amp;gt;% as.numeric() %&amp;gt;% max()
  gene_name &amp;lt;-  dd_processed %&amp;gt;% filter(Transcript==tx) %&amp;gt;% pull(Name) %&amp;gt;% unique()
  # expand to create a row for each sequence and fill in previous values
  dd_processed %&amp;gt;% filter(Transcript==tx) %&amp;gt;% group_by(`Exon Number`) %&amp;gt;% 
    expand(Start=full_seq(c(Start,End),1)) %&amp;gt;% 
    left_join(.,  dd_processed %&amp;gt;% filter(Transcript==tx)) %&amp;gt;% # create one row per base position, grouped by Exon Number https://stackoverflow.com/questions/42866119/fill-missing-values-in-data-frame-using-dplyr-complete-within-groups
    fill(Chr:Name) %&amp;gt;% # fill missing values https://stackoverflow.com/questions/40040834/r-replace-na-with-previous-or-next-value-by-group-using-dplyr
    ungroup() %&amp;gt;% # drop the exon number grouping, so I can mutate below
    mutate(`Exon Number`= factor(`Exon Number`,levels=0:num_of_exons)) %&amp;gt;% # Ah, reordering. I need it to be a factor, but then I have to explicitly give the order   
    mutate(Depth = factor(Depth, levels=c(&amp;#39;&amp;lt; 10 Reads&amp;#39;,&amp;#39;&amp;lt; 20 Reads&amp;#39;,&amp;#39;&amp;gt;= 20 Reads&amp;#39;))) %&amp;gt;%  # create three categories for coloring
    ggplot(aes(x=Start, xend=End, y=Read_Depth, yend=Read_Depth, colour=Depth)) + 
    facet_wrap(~`Exon Number`, scales = &amp;#39;free_x&amp;#39;, nrow=1, strip.position = &amp;#39;bottom&amp;#39;) + 
    geom_point(size=0.1) + theme_minimal()+ scale_colour_custom() +  # use my custom color set above for my three categories
    theme(axis.text.x=element_blank(), 
          axis.ticks.x = element_blank(), 
          panel.grid.minor = element_blank(), 
          panel.grid.major.x = element_blank(),
          legend.position = &amp;#39;none&amp;#39;) + 
    ylab(&amp;#39;Depth&amp;#39;) + 
    xlab(paste0(gene_name[1]))
}

# little for loop to roll through the transcripts and make plot, storing in a list
plots &amp;lt;- list()
for (i in transcripts){
  plots[[i]] &amp;lt;- plot_maker(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)
## Joining, by = c(&amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)
## Joining, by = c(&amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)
## Joining, by = c(&amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)
## Joining, by = c(&amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;legend &amp;lt;- get_legend(plots[[names(plots)[1]]] + theme(legend.position=&amp;#39;right&amp;#39;))
# cowplot can take a list and glue the plots together
# I&amp;#39;m commenting out the below line because blogdown makes it too damn small. You need to run it to make the plot
# plot_grid(plot_grid(plotlist = plots, ncol=1, hjust=-2), legend, ncol=2, rel_widths = c(5,0.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/./img/lets_plot_3.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;version-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Version 2&lt;/h2&gt;
&lt;p&gt;A bit tighter. Recalculates coordinates to glue all of the exons together in one plot. I can facet by gene. A bit harder to read, but is more accurate as the exons and gene lengths are proportional&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genes &amp;lt;- c(&amp;#39;PAX6&amp;#39;,&amp;#39;ABCA4&amp;#39;,&amp;#39;NRL&amp;#39;,&amp;#39;CRX&amp;#39;,&amp;#39;RPGR&amp;#39;)
tx = gencode2 %&amp;gt;% filter(Name %in% genes) %&amp;gt;% pull(Transcript)

dd_expanded &amp;lt;- dd_processed %&amp;gt;% filter(Transcript %in% tx) %&amp;gt;% group_by(Transcript, `Exon Number`) %&amp;gt;% 
  expand(Start=full_seq(c(Start,End),1)) %&amp;gt;% 
  left_join(.,  dd_processed %&amp;gt;% filter(Transcript %in% tx)) %&amp;gt;% # create one row per base position, grouped by Exon Number https://stackoverflow.com/questions/42866119/fill-missing-values-in-data-frame-using-dplyr-complete-within-groups
  fill(Chr:Name) # fill missing values https://stackoverflow.com/questions/40040834/r-replace-na-with-previous-or-next-value-by-group-using-dplyr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;Transcript&amp;quot;, &amp;quot;Exon Number&amp;quot;, &amp;quot;Start&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_expanded &amp;lt;- dd_expanded %&amp;gt;% group_by(Name) %&amp;gt;% mutate(Pos = 1:n())
even_odds_marking &amp;lt;- dd_expanded %&amp;gt;% group_by(Name, `Exon Number`) %&amp;gt;% summarise(Start=min(Pos), End=max(Pos)) %&amp;gt;% mutate(Exon = case_when(as.numeric(`Exon Number`) %% 2 == 0 ~ &amp;#39;even&amp;#39;, TRUE ~ &amp;#39;odd&amp;#39;))
plot_data&amp;lt;-bind_rows(dd_expanded,even_odds_marking)

ggplot() + 
  geom_point(data =  plot_data %&amp;gt;% filter(is.na(Exon)), aes(x=Pos, y=Read_Depth, colour=Depth),size=0.1)  + 
  facet_wrap(~Name, ncol=1) + 
  geom_rect(data = plot_data %&amp;gt;% filter(!is.na(Exon)), aes(xmin=Start, xmax=End, ymin=-Inf, ymax=Inf, fill=Exon)) +  
  scale_fill_manual(values = alpha(c(&amp;quot;gray&amp;quot;, &amp;quot;white&amp;quot;), .3)) +  
  scale_colour_custom() +
  theme_minimal() +  
  theme(axis.text.x=element_blank(), 
        axis.ticks.x = element_blank(),
        panel.grid.minor = element_blank(), 
        panel.grid.major.x = element_blank())+
  guides(fill=FALSE) + 
  ylab(&amp;#39;Read Depth&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-02-08-let-s-plot-3-part-2_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sessioninfo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;sessionInfo()&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       America/New_York            
##  date     2018-07-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package    * version date       source                           
##  assertthat   0.2.0   2017-04-11 CRAN (R 3.5.0)                   
##  backports    1.1.2   2017-12-13 CRAN (R 3.5.0)                   
##  base       * 3.5.0   2018-04-24 local                            
##  bindr        0.1.1   2018-03-13 CRAN (R 3.5.0)                   
##  bindrcpp   * 0.2.2   2018-03-29 CRAN (R 3.5.0)                   
##  blogdown     0.8.1   2018-07-16 Github (rstudio/blogdown@d54c39a)
##  bookdown     0.7     2018-02-18 CRAN (R 3.5.0)                   
##  broom        0.4.4   2018-03-29 CRAN (R 3.5.0)                   
##  cellranger   1.1.0   2016-07-27 CRAN (R 3.5.0)                   
##  cli          1.0.0   2017-11-05 CRAN (R 3.5.0)                   
##  colorspace   1.3-2   2016-12-14 CRAN (R 3.5.0)                   
##  compiler     3.5.0   2018-04-24 local                            
##  cowplot    * 0.9.2   2017-12-17 CRAN (R 3.5.0)                   
##  crayon       1.3.4   2017-09-16 CRAN (R 3.5.0)                   
##  data.table * 1.11.4  2018-05-27 cran (@1.11.4)                   
##  datasets   * 3.5.0   2018-04-24 local                            
##  devtools     1.13.5  2018-02-18 CRAN (R 3.5.0)                   
##  digest       0.6.15  2018-01-28 CRAN (R 3.5.0)                   
##  dplyr      * 0.7.6   2018-06-29 cran (@0.7.6)                    
##  evaluate     0.10.1  2017-06-24 CRAN (R 3.5.0)                   
##  forcats    * 0.3.0   2018-02-19 CRAN (R 3.5.0)                   
##  foreign      0.8-70  2017-11-28 CRAN (R 3.5.0)                   
##  ggplot2    * 3.0.0   2018-07-03 cran (@3.0.0)                    
##  glue         1.2.0   2017-10-29 CRAN (R 3.5.0)                   
##  graphics   * 3.5.0   2018-04-24 local                            
##  grDevices  * 3.5.0   2018-04-24 local                            
##  grid         3.5.0   2018-04-24 local                            
##  gtable       0.2.0   2016-02-26 CRAN (R 3.5.0)                   
##  haven        1.1.1   2018-01-18 CRAN (R 3.5.0)                   
##  hms          0.4.2   2018-03-10 CRAN (R 3.5.0)                   
##  htmltools    0.3.6   2017-04-28 CRAN (R 3.5.0)                   
##  httr         1.3.1   2017-08-20 CRAN (R 3.5.0)                   
##  jsonlite     1.5     2017-06-01 CRAN (R 3.5.0)                   
##  knitr        1.20    2018-02-20 CRAN (R 3.5.0)                   
##  labeling     0.3     2014-08-23 CRAN (R 3.5.0)                   
##  lattice      0.20-35 2017-03-25 CRAN (R 3.5.0)                   
##  lazyeval     0.2.1   2017-10-29 CRAN (R 3.5.0)                   
##  lubridate    1.7.4   2018-04-11 CRAN (R 3.5.0)                   
##  magrittr     1.5     2014-11-22 CRAN (R 3.5.0)                   
##  memoise      1.1.0   2017-04-21 CRAN (R 3.5.0)                   
##  methods    * 3.5.0   2018-04-24 local                            
##  mnormt       1.5-5   2016-10-15 CRAN (R 3.5.0)                   
##  modelr       0.1.2   2018-05-11 CRAN (R 3.5.0)                   
##  munsell      0.4.3   2016-02-13 CRAN (R 3.5.0)                   
##  nlme         3.1-137 2018-04-07 CRAN (R 3.5.0)                   
##  parallel     3.5.0   2018-04-24 local                            
##  pillar       1.2.3   2018-05-25 CRAN (R 3.5.0)                   
##  pkgconfig    2.0.1   2017-03-21 CRAN (R 3.5.0)                   
##  plyr         1.8.4   2016-06-08 CRAN (R 3.5.0)                   
##  psych        1.8.4   2018-05-06 CRAN (R 3.5.0)                   
##  purrr      * 0.2.4   2017-10-18 CRAN (R 3.5.0)                   
##  R6           2.2.2   2017-06-17 CRAN (R 3.5.0)                   
##  Rcpp         0.12.17 2018-05-18 CRAN (R 3.5.0)                   
##  readr      * 1.1.1   2017-05-16 CRAN (R 3.5.0)                   
##  readxl       1.1.0   2018-04-20 CRAN (R 3.5.0)                   
##  reshape2     1.4.3   2017-12-11 CRAN (R 3.5.0)                   
##  rlang        0.2.1   2018-05-30 CRAN (R 3.5.0)                   
##  rmarkdown    1.10    2018-06-11 cran (@1.10)                     
##  rprojroot    1.3-2   2018-01-03 CRAN (R 3.5.0)                   
##  rstudioapi   0.7     2017-09-07 CRAN (R 3.5.0)                   
##  rvest        0.3.2   2016-06-17 CRAN (R 3.5.0)                   
##  scales       0.5.0   2017-08-24 CRAN (R 3.5.0)                   
##  stats      * 3.5.0   2018-04-24 local                            
##  stringi      1.2.2   2018-05-02 CRAN (R 3.5.0)                   
##  stringr    * 1.3.1   2018-05-10 CRAN (R 3.5.0)                   
##  tibble     * 1.4.2   2018-01-22 CRAN (R 3.5.0)                   
##  tidyr      * 0.8.1   2018-05-18 CRAN (R 3.5.0)                   
##  tidyselect   0.2.4   2018-02-26 CRAN (R 3.5.0)                   
##  tidyverse  * 1.2.1   2017-11-14 CRAN (R 3.5.0)                   
##  tools        3.5.0   2018-04-24 local                            
##  utils      * 3.5.0   2018-04-24 local                            
##  withr        2.1.2   2018-03-15 CRAN (R 3.5.0)                   
##  xfun         0.3     2018-07-06 cran (@0.3)                      
##  xml2         1.2.0   2018-01-24 CRAN (R 3.5.0)                   
##  yaml         2.1.19  2018-05-01 CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Plot 3: Base pair resolution NGS coverage plots (Part I)</title>
      <link>/./post/let-s-plot-3-part-i/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/let-s-plot-3-part-i/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#load-data&#34;&gt;Load data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#curious&#34;&gt;Curious?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-many-genes-are-in-this-dataset&#34;&gt;How many genes are in this dataset?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-genes-are-in-here&#34;&gt;What genes are in here?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-many-data-points-bases-per-gene&#34;&gt;How many data points (bases) per gene?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-many-exons-per-gene&#34;&gt;How many exons per gene?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-many-base-pairs-of-abca4-well-abca4-exons-is-covered-by-more-than-10-reads&#34;&gt;How many base pairs of ABCA4 (well, ABCA4 exons) is covered by more than 10 reads?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reads&#34;&gt;5 reads?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lets-check-all-of-the-genes-to-see-which-are-the-worst-covered&#34;&gt;Let’s check all of the genes to see which are the worst covered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#we-can-visually-display-the-data-also&#34;&gt;We can visually display the data, also&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hard-to-see-what-is-going-on-lets-make-little-plots-for-each-gene&#34;&gt;Hard to see what is going on, let’s make little plots for each gene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#where-are-genes-poorly-covered&#34;&gt;Where are genes poorly covered?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#bbip1&#34;&gt;BBIP1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#make-a-coverage-plot-for-many-genes-this-is-advanced-stuff&#34;&gt;Make a coverage plot for many genes (This is advanced stuff!!!)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;load-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load data&lt;/h2&gt;
&lt;p&gt;This is a departure from the previous installments, as we are loading in a very processed dataset. The reasons why are numerous:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The original data is 330mb, compressed&lt;/li&gt;
&lt;li&gt;After loading (2 minutes on my quite fast computer) and uncompressing, it takes over 10GB of RAM on my computer&lt;/li&gt;
&lt;li&gt;The original data needed a severe amount of massaging to make it quickly useable:
&lt;ul&gt;
&lt;li&gt;Annotating with gene name&lt;/li&gt;
&lt;li&gt;Identifying primary transcript for gene&lt;/li&gt;
&lt;li&gt;Expanding range data into row-form*&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mosdepth&lt;/code&gt; provides read depth as ranges. So instead of writing a row for each of the three billion+ base pairs, &lt;code&gt;mosdepth&lt;/code&gt; collapses adjacent rows with identical read depth together. This is crucial for saving space, especially for exomes, which have huge stretches of zero coverage since only ~3% of the genome is targeted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;curious&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Curious?&lt;/h2&gt;
&lt;p&gt;If you want to see how I did the above, see &lt;a href=&#34;/./post/let-s-plot-3-base-pair-resolution-ngs-exome-coverage-plots&#34;&gt;Part 2&lt;/a&gt;. This post also has some cooler plots.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dd_class.csv&lt;/code&gt; can be found &lt;a href=&#34;https://github.com/davemcg/Let_us_plot/raw/master/003_coverage/dd_class.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.5
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;data.table&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:dplyr&amp;#39;:
## 
##     between, first, last&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:purrr&amp;#39;:
## 
##     transpose&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(cowplot) # you may need to install this with install.packages(&amp;#39;cowplot&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;cowplot&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:ggplot2&amp;#39;:
## 
##     ggsave&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class &amp;lt;- fread(&amp;#39;~/git/Let_us_plot/003_coverage/dd_class.csv&amp;#39;)

head(dd_class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           Transcript Exon Number    Start Chr      End Read_Depth Strand
## 1: ENST00000020945.3           0 49831356   8 49831367        108      -
## 2: ENST00000020945.3           0 49831357   8 49831367        108      -
## 3: ENST00000020945.3           0 49831358   8 49831367        108      -
## 4: ENST00000020945.3           0 49831359   8 49831367        108      -
## 5: ENST00000020945.3           0 49831360   8 49831367        108      -
## 6: ENST00000020945.3           0 49831361   8 49831367        108      -
##    ExonStart  ExonEnd  Name
## 1:  49831365 49831547 SNAI2
## 2:  49831365 49831547 SNAI2
## 3:  49831365 49831547 SNAI2
## 4:  49831365 49831547 SNAI2
## 5:  49831365 49831547 SNAI2
## 6:  49831365 49831547 SNAI2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-genes-are-in-this-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How many genes are in this dataset?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class$Name %&amp;gt;% unique() %&amp;gt;% length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 118&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-genes-are-in-here&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What genes are in here?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class$Name %&amp;gt;% unique() %&amp;gt;% sort()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;ABCA4&amp;quot;    &amp;quot;ABCB6&amp;quot;    &amp;quot;AIPL1&amp;quot;    &amp;quot;ALDH1A3&amp;quot;  &amp;quot;ARL6&amp;quot;     &amp;quot;ATF6&amp;quot;    
##   [7] &amp;quot;ATOH7&amp;quot;    &amp;quot;BBIP1&amp;quot;    &amp;quot;BBS1&amp;quot;     &amp;quot;BBS10&amp;quot;    &amp;quot;BBS12&amp;quot;    &amp;quot;BBS5&amp;quot;    
##  [13] &amp;quot;BBS7&amp;quot;     &amp;quot;BBS9&amp;quot;     &amp;quot;BCOR&amp;quot;     &amp;quot;BMP4&amp;quot;     &amp;quot;CACNA1F&amp;quot;  &amp;quot;CACNA2D4&amp;quot;
##  [19] &amp;quot;CASK&amp;quot;     &amp;quot;CDHR1&amp;quot;    &amp;quot;CEP290&amp;quot;   &amp;quot;CHD7&amp;quot;     &amp;quot;CNGB3&amp;quot;    &amp;quot;CNNM4&amp;quot;   
##  [25] &amp;quot;COL4A1&amp;quot;   &amp;quot;COX7B&amp;quot;    &amp;quot;CRX&amp;quot;      &amp;quot;CYP1B1&amp;quot;   &amp;quot;DCDC1&amp;quot;    &amp;quot;EDN3&amp;quot;    
##  [31] &amp;quot;EDNRB&amp;quot;    &amp;quot;ELP4&amp;quot;     &amp;quot;FKRP&amp;quot;     &amp;quot;FKTN&amp;quot;     &amp;quot;FOXC1&amp;quot;    &amp;quot;FOXC2&amp;quot;   
##  [37] &amp;quot;FOXE3&amp;quot;    &amp;quot;GDF3&amp;quot;     &amp;quot;GDF6&amp;quot;     &amp;quot;GNAT2&amp;quot;    &amp;quot;HESX1&amp;quot;    &amp;quot;HMGB3&amp;quot;   
##  [43] &amp;quot;HPS1&amp;quot;     &amp;quot;HPS3&amp;quot;     &amp;quot;HPS4&amp;quot;     &amp;quot;HPS5&amp;quot;     &amp;quot;HPS6&amp;quot;     &amp;quot;INPP5E&amp;quot;  
##  [49] &amp;quot;ISPD&amp;quot;     &amp;quot;KCNJ13&amp;quot;   &amp;quot;KCNV2&amp;quot;    &amp;quot;KIT&amp;quot;      &amp;quot;LAMB2&amp;quot;    &amp;quot;LHX2&amp;quot;    
##  [55] &amp;quot;LYST&amp;quot;     &amp;quot;LZTFL1&amp;quot;   &amp;quot;MAB21L2&amp;quot;  &amp;quot;MFRP&amp;quot;     &amp;quot;MITF&amp;quot;     &amp;quot;MKKS&amp;quot;    
##  [61] &amp;quot;MKS1&amp;quot;     &amp;quot;MLPH&amp;quot;     &amp;quot;MYO5A&amp;quot;    &amp;quot;NAA10&amp;quot;    &amp;quot;NDP&amp;quot;      &amp;quot;NPHP1&amp;quot;   
##  [67] &amp;quot;NRL&amp;quot;      &amp;quot;OCA2&amp;quot;     &amp;quot;OTX2&amp;quot;     &amp;quot;PAX2&amp;quot;     &amp;quot;PAX3&amp;quot;     &amp;quot;PAX6&amp;quot;    
##  [73] &amp;quot;PDE6C&amp;quot;    &amp;quot;PDE6H&amp;quot;    &amp;quot;PITPNM3&amp;quot;  &amp;quot;PITX2&amp;quot;    &amp;quot;PITX3&amp;quot;    &amp;quot;POMT1&amp;quot;   
##  [79] &amp;quot;POMT2&amp;quot;    &amp;quot;PROM1&amp;quot;    &amp;quot;PRPH2&amp;quot;    &amp;quot;PRSS56&amp;quot;   &amp;quot;RAB18&amp;quot;    &amp;quot;RAB27A&amp;quot;  
##  [85] &amp;quot;RAB3GAP1&amp;quot; &amp;quot;RAB3GAP2&amp;quot; &amp;quot;RARB&amp;quot;     &amp;quot;RAX&amp;quot;      &amp;quot;RAX2&amp;quot;     &amp;quot;RDH5&amp;quot;    
##  [91] &amp;quot;RET&amp;quot;      &amp;quot;RIMS1&amp;quot;    &amp;quot;RPGR&amp;quot;     &amp;quot;RPGRIP1&amp;quot;  &amp;quot;SDCCAG8&amp;quot;  &amp;quot;SEMA4A&amp;quot;  
##  [97] &amp;quot;SHH&amp;quot;      &amp;quot;SIX3&amp;quot;     &amp;quot;SIX6&amp;quot;     &amp;quot;SLC24A5&amp;quot;  &amp;quot;SLC25A1&amp;quot;  &amp;quot;SLC38A8&amp;quot; 
## [103] &amp;quot;SLC45A2&amp;quot;  &amp;quot;SNAI2&amp;quot;    &amp;quot;SNX3&amp;quot;     &amp;quot;SOX10&amp;quot;    &amp;quot;SOX2&amp;quot;     &amp;quot;SOX3&amp;quot;    
## [109] &amp;quot;STRA6&amp;quot;    &amp;quot;TENM3&amp;quot;    &amp;quot;TMEM98&amp;quot;   &amp;quot;TRIM32&amp;quot;   &amp;quot;TTC8&amp;quot;     &amp;quot;TTLL5&amp;quot;   
## [115] &amp;quot;UNC119&amp;quot;   &amp;quot;VAX1&amp;quot;     &amp;quot;VSX2&amp;quot;     &amp;quot;ZEB2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-data-points-bases-per-gene&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How many data points (bases) per gene?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% 
  group_by(Name) %&amp;gt;% 
  summarise(Count=n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 118 x 2
##    Name    Count
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
##  1 ABCA4    6804
##  2 ABCB6    2527
##  3 AIPL1    1159
##  4 ALDH1A3  1550
##  5 ARL6      569
##  6 ATF6     2008
##  7 ATOH7     457
##  8 BBIP1     220
##  9 BBS1     1773
## 10 BBS10    2172
## # ... with 108 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-exons-per-gene&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How many exons per gene?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% 
  select(Name, `Exon Number`) %&amp;gt;% 
  unique() %&amp;gt;% 
  group_by(Name) %&amp;gt;% 
  summarise(Count = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 118 x 2
##    Name    Count
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
##  1 ABCA4      50
##  2 ABCB6      19
##  3 AIPL1       6
##  4 ALDH1A3    13
##  5 ARL6        7
##  6 ATF6       16
##  7 ATOH7       1
##  8 BBIP1       2
##  9 BBS1       17
## 10 BBS10       2
## # ... with 108 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-many-base-pairs-of-abca4-well-abca4-exons-is-covered-by-more-than-10-reads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How many base pairs of ABCA4 (well, ABCA4 exons) is covered by more than 10 reads?&lt;/h2&gt;
&lt;p&gt;Base R style&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Grab the Read_Depth vector from the data frame filtered by ABCA4 values
depth_abca4 &amp;lt;- dd_class %&amp;gt;% 
  filter(Name==&amp;#39;ABCA4&amp;#39;) %&amp;gt;% 
  pull(Read_Depth)
sum(depth_abca4 &amp;gt; 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6803&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;5 reads?&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(depth_abca4 &amp;gt; 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6804&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-check-all-of-the-genes-to-see-which-are-the-worst-covered&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let’s check all of the genes to see which are the worst covered&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% 
  group_by(Name) %&amp;gt;% 
  summarise(Total_Bases = n(),
            LT5 = sum(Read_Depth &amp;lt; 5),
            LT10 = sum(Read_Depth &amp;lt; 10),
            Good = sum(Read_Depth &amp;gt;= 10),
            P5 = LT5 / Total_Bases,
            P10 = LT10 / Total_Bases) %&amp;gt;% 
  arrange(-P10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 118 x 7
##    Name    Total_Bases   LT5  LT10  Good      P5     P10
##    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1 BBIP1           220     0    61   159 0       0.277  
##  2 ISPD           1339     0    57  1282 0       0.0426 
##  3 CASK           2778     0    79  2699 0       0.0284 
##  4 NAA10           725     0    10   715 0       0.0138 
##  5 CNGB3          2436     0    18  2418 0       0.00739
##  6 LYST          11400    13    66 11334 0.00114 0.00579
##  7 PROM1          2601     0     8  2593 0       0.00308
##  8 RET            3348     0     9  3339 0       0.00269
##  9 CEP290         7456     0    18  7438 0       0.00241
## 10 SLC25A1         933     0     2   931 0       0.00214
## # ... with 108 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;we-can-visually-display-the-data-also&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;We can visually display the data, also&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% 
  ggplot(aes(x=Read_Depth, group=Name)) +
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-02-07-let-s-plot-3-part-1_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hard-to-see-what-is-going-on-lets-make-little-plots-for-each-gene&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Hard to see what is going on, let’s make little plots for each gene&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% 
  ggplot(aes(x=Read_Depth, group=Name)) +
  facet_wrap(~Name) + 
  geom_density()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-02-07-let-s-plot-3-part-1_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt; ##&lt;a href=&#34;/./img/lets_plot3_density.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;where-are-genes-poorly-covered&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Where are genes poorly covered?&lt;/h2&gt;
&lt;div id=&#34;bbip1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;BBIP1&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dd_class %&amp;gt;% filter(Name==&amp;#39;BBIP1&amp;#39;) %&amp;gt;% 
  ggplot(aes(x=Start, y=Read_Depth)) + 
  facet_wrap(~`Exon Number`, scales = &amp;#39;free_x&amp;#39;, nrow=1, strip.position = &amp;#39;bottom&amp;#39;) + 
  geom_point(size=0.1) + theme_minimal() +
  theme(axis.text.x=element_blank(), 
        axis.ticks.x = element_blank(), 
        panel.grid.minor = element_blank(), 
        panel.grid.major.x = element_blank(),
        legend.position = &amp;#39;none&amp;#39;) + 
  ylab(&amp;#39;Depth&amp;#39;) + 
  xlab(&amp;#39;Exon Number&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/././post/2018-02-07-let-s-plot-3-part-1_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-coverage-plot-for-many-genes-this-is-advanced-stuff&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Make a coverage plot for many genes (This is advanced stuff!!!)&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gene_list &amp;lt;- c(&amp;#39;ABCA4&amp;#39;, &amp;#39;PITX2&amp;#39;,&amp;#39;VSX2&amp;#39;,&amp;#39;RPGR&amp;#39;,&amp;#39;SOX10&amp;#39;)

# set a custom color that will work even if a category is missing
scale_colour_custom &amp;lt;- function(...){
  ggplot2:::manual_scale(&amp;#39;colour&amp;#39;, 
                         values = setNames(c(&amp;#39;darkred&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;black&amp;#39;),
                                           c(&amp;#39;&amp;lt; 10 Reads&amp;#39;,&amp;#39;&amp;lt; 20 Reads&amp;#39;,&amp;#39;&amp;gt;= 20 Reads&amp;#39;)), 
                         ...)
}

plot_maker &amp;lt;- function(gene){
  num_of_exons &amp;lt;- dd_class%&amp;gt;% filter(Name==gene) %&amp;gt;% pull(`Exon Number`) %&amp;gt;% as.numeric() %&amp;gt;% max()
   # expand to create a row for each sequence and fill in previous values
  dd_class %&amp;gt;% filter(Name==gene) %&amp;gt;%
    mutate(`Exon Number`= factor(`Exon Number`,levels=0:num_of_exons)) %&amp;gt;%  
    ggplot(aes(x=Start, y=Read_Depth)) + 
    facet_wrap(~`Exon Number`, scales = &amp;#39;free_x&amp;#39;, nrow=1, strip.position = &amp;#39;bottom&amp;#39;) + 
    geom_point(size=0.1) + theme_minimal() + scale_colour_custom() +
    theme(axis.text.x=element_blank(), 
          axis.ticks.x = element_blank(), 
          panel.grid.minor = element_blank(), 
          panel.grid.major.x = element_blank(),
          legend.position = &amp;#39;none&amp;#39;) + 
    ylab(&amp;#39;Depth&amp;#39;) + 
    xlab(gene)
}

plots &amp;lt;- list()
for (i in gene_list){
  plots[[i]] &amp;lt;- plot_maker(i)
}

plot_grid(plotlist = plots, ncol=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/./img/lets_plot3_cow.png&#34; width=&#34;100%&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       Europe/London               
##  date     2018-09-17&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package    * version date       source        
##  assertthat   0.2.0   2017-04-11 CRAN (R 3.5.0)
##  backports    1.1.2   2017-12-13 CRAN (R 3.5.0)
##  base       * 3.5.0   2018-04-24 local         
##  bindr        0.1.1   2018-03-13 CRAN (R 3.5.0)
##  bindrcpp   * 0.2.2   2018-03-29 CRAN (R 3.5.0)
##  blogdown     0.8     2018-07-15 CRAN (R 3.5.0)
##  bookdown     0.7     2018-02-18 CRAN (R 3.5.0)
##  broom        0.4.4   2018-03-29 CRAN (R 3.5.0)
##  cellranger   1.1.0   2016-07-27 CRAN (R 3.5.0)
##  cli          1.0.0   2017-11-05 CRAN (R 3.5.0)
##  colorspace   1.3-2   2016-12-14 CRAN (R 3.5.0)
##  compiler     3.5.0   2018-04-24 local         
##  cowplot    * 0.9.3   2018-07-15 cran (@0.9.3) 
##  crayon       1.3.4   2017-09-16 CRAN (R 3.5.0)
##  data.table * 1.11.4  2018-05-27 CRAN (R 3.5.0)
##  datasets   * 3.5.0   2018-04-24 local         
##  devtools     1.13.6  2018-06-27 CRAN (R 3.5.0)
##  digest       0.6.15  2018-01-28 CRAN (R 3.5.0)
##  dplyr      * 0.7.6   2018-06-29 cran (@0.7.6) 
##  evaluate     0.10.1  2017-06-24 CRAN (R 3.5.0)
##  forcats    * 0.3.0   2018-02-19 CRAN (R 3.5.0)
##  foreign      0.8-70  2017-11-28 CRAN (R 3.5.0)
##  ggplot2    * 3.0.0   2018-07-03 cran (@3.0.0) 
##  glue         1.2.0   2017-10-29 CRAN (R 3.5.0)
##  graphics   * 3.5.0   2018-04-24 local         
##  grDevices  * 3.5.0   2018-04-24 local         
##  grid         3.5.0   2018-04-24 local         
##  gtable       0.2.0   2016-02-26 CRAN (R 3.5.0)
##  haven        1.1.1   2018-01-18 CRAN (R 3.5.0)
##  hms          0.4.2   2018-03-10 CRAN (R 3.5.0)
##  htmltools    0.3.6   2017-04-28 CRAN (R 3.5.0)
##  httr         1.3.1   2017-08-20 CRAN (R 3.5.0)
##  jsonlite     1.5     2017-06-01 CRAN (R 3.5.0)
##  knitr        1.20    2018-02-20 CRAN (R 3.5.0)
##  labeling     0.3     2014-08-23 CRAN (R 3.5.0)
##  lattice      0.20-35 2017-03-25 CRAN (R 3.5.0)
##  lazyeval     0.2.1   2017-10-29 CRAN (R 3.5.0)
##  lubridate    1.7.4   2018-04-11 CRAN (R 3.5.0)
##  magrittr     1.5     2014-11-22 CRAN (R 3.5.0)
##  memoise      1.1.0   2017-04-21 CRAN (R 3.5.0)
##  methods    * 3.5.0   2018-04-24 local         
##  mnormt       1.5-5   2016-10-15 CRAN (R 3.5.0)
##  modelr       0.1.2   2018-05-11 CRAN (R 3.5.0)
##  munsell      0.4.3   2016-02-13 CRAN (R 3.5.0)
##  nlme         3.1-137 2018-04-07 CRAN (R 3.5.0)
##  parallel     3.5.0   2018-04-24 local         
##  pillar       1.2.3   2018-05-25 CRAN (R 3.5.0)
##  pkgconfig    2.0.1   2017-03-21 CRAN (R 3.5.0)
##  plyr         1.8.4   2016-06-08 CRAN (R 3.5.0)
##  psych        1.8.4   2018-05-06 CRAN (R 3.5.0)
##  purrr      * 0.2.5   2018-05-29 CRAN (R 3.5.0)
##  R6           2.2.2   2017-06-17 CRAN (R 3.5.0)
##  Rcpp         0.12.17 2018-05-18 CRAN (R 3.5.0)
##  readr      * 1.1.1   2017-05-16 CRAN (R 3.5.0)
##  readxl       1.1.0   2018-04-20 CRAN (R 3.5.0)
##  reshape2     1.4.3   2017-12-11 CRAN (R 3.5.0)
##  rlang        0.2.1   2018-05-30 CRAN (R 3.5.0)
##  rmarkdown    1.10    2018-06-11 cran (@1.10)  
##  rprojroot    1.3-2   2018-01-03 CRAN (R 3.5.0)
##  rstudioapi   0.7     2017-09-07 CRAN (R 3.5.0)
##  rvest        0.3.2   2016-06-17 CRAN (R 3.5.0)
##  scales       0.5.0   2017-08-24 CRAN (R 3.5.0)
##  stats      * 3.5.0   2018-04-24 local         
##  stringi      1.2.2   2018-05-02 CRAN (R 3.5.0)
##  stringr    * 1.3.1   2018-05-10 CRAN (R 3.5.0)
##  tibble     * 1.4.2   2018-01-22 CRAN (R 3.5.0)
##  tidyr      * 0.8.1   2018-05-18 CRAN (R 3.5.0)
##  tidyselect   0.2.4   2018-02-26 CRAN (R 3.5.0)
##  tidyverse  * 1.2.1   2017-11-14 CRAN (R 3.5.0)
##  tools        3.5.0   2018-04-24 local         
##  utf8         1.1.4   2018-05-24 CRAN (R 3.5.0)
##  utils      * 3.5.0   2018-04-24 local         
##  withr        2.1.2   2018-03-15 CRAN (R 3.5.0)
##  xfun         0.3     2018-07-06 CRAN (R 3.5.0)
##  xml2         1.2.0   2018-01-24 CRAN (R 3.5.0)
##  yaml         2.1.19  2018-05-01 CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Split VCF into n pieces by coordinate</title>
      <link>/./post/split-vcf-into-n-pieces-by-coordinate/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/./post/split-vcf-into-n-pieces-by-coordinate/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#read-in-vcf-header&#34;&gt;Read in vcf header&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parse-out-chr-contig-sizes&#34;&gt;Parse out chr / contig sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#split-chr-above-3e7-base-pairs-into-equalish-size-pieces&#34;&gt;Split chr above 3e7 base pairs into equal(ish) size pieces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-coordinates-given-a-chromosome-contig&#34;&gt;print coordinates given a chromosome / contig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#calculate-coordinates&#34;&gt;calculate coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#print-em&#34;&gt;print ’em&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#output-em-for-python-input-snakemake&#34;&gt;output ’em for python input (Snakemake)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rscript&#34;&gt;rscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-script-output&#34;&gt;Using the script output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sessioninfo&#34;&gt;sessionInfo()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bcftools view -r 1:40000-50000 vcf.gz&lt;/code&gt; will output (to stdout) a vcf containing the header and variants on chromosome 1 between coordinates 40,000 and 50,000 base pairs.&lt;/p&gt;
&lt;p&gt;I need to break down a large vcf into smaller pieces to dramatically speed up annotation. Let’s try 100 pieces.&lt;/p&gt;
&lt;p&gt;The human genome is &lt;em&gt;approximately&lt;/em&gt; 3 gigabases or 3e9 base pairs.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \frac{3 * 10^9\ base\ pairs}{100\ pieces} = 3*10^7\ base\ pairs\ per\ piece \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;That’s our target size.&lt;/p&gt;
&lt;p&gt;This is made a bit tricky since the genome is laid by chromosome. So we have to break into 3e7 pieces, accounting for chromosomes. There are also &lt;strong&gt;many&lt;/strong&gt; contigs, most of which are well under 3e7 in size. Those can be processed as a group with &lt;code&gt;bcftools&lt;/code&gt; by splitting each contig by a &lt;code&gt;,&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s read in the header. It contains chromosome (and contig) sizes, which I’ve extracted from the vcf with &lt;code&gt;zcat EGAD00001002656.GATK.vcf.gz | head -n 1000 | grep ^## &amp;gt; /home/mcgaugheyd/git/OGVFB_one_offs/mcgaughey/split_VCFs_into_n_pieces/EGAD00001002656.header&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;read-in-vcf-header&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Read in vcf header&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.5
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
vcf_header = scan(&amp;#39;~/git/OGVFB_one_offs/mcgaughey/split_VCFs_into_n_pieces/EGAD00001002656.header&amp;#39;, what=&amp;#39;character&amp;#39;)
vcf_header[grepl(&amp;#39;contig&amp;#39;,vcf_header)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;##contig=&amp;lt;ID=1,length=249250621,assembly=b37&amp;gt;&amp;quot;      
##  [2] &amp;quot;##contig=&amp;lt;ID=2,length=243199373,assembly=b37&amp;gt;&amp;quot;      
##  [3] &amp;quot;##contig=&amp;lt;ID=3,length=198022430,assembly=b37&amp;gt;&amp;quot;      
##  [4] &amp;quot;##contig=&amp;lt;ID=4,length=191154276,assembly=b37&amp;gt;&amp;quot;      
##  [5] &amp;quot;##contig=&amp;lt;ID=5,length=180915260,assembly=b37&amp;gt;&amp;quot;      
##  [6] &amp;quot;##contig=&amp;lt;ID=6,length=171115067,assembly=b37&amp;gt;&amp;quot;      
##  [7] &amp;quot;##contig=&amp;lt;ID=7,length=159138663,assembly=b37&amp;gt;&amp;quot;      
##  [8] &amp;quot;##contig=&amp;lt;ID=8,length=146364022,assembly=b37&amp;gt;&amp;quot;      
##  [9] &amp;quot;##contig=&amp;lt;ID=9,length=141213431,assembly=b37&amp;gt;&amp;quot;      
## [10] &amp;quot;##contig=&amp;lt;ID=10,length=135534747,assembly=b37&amp;gt;&amp;quot;     
## [11] &amp;quot;##contig=&amp;lt;ID=11,length=135006516,assembly=b37&amp;gt;&amp;quot;     
## [12] &amp;quot;##contig=&amp;lt;ID=12,length=133851895,assembly=b37&amp;gt;&amp;quot;     
## [13] &amp;quot;##contig=&amp;lt;ID=13,length=115169878,assembly=b37&amp;gt;&amp;quot;     
## [14] &amp;quot;##contig=&amp;lt;ID=14,length=107349540,assembly=b37&amp;gt;&amp;quot;     
## [15] &amp;quot;##contig=&amp;lt;ID=15,length=102531392,assembly=b37&amp;gt;&amp;quot;     
## [16] &amp;quot;##contig=&amp;lt;ID=16,length=90354753,assembly=b37&amp;gt;&amp;quot;      
## [17] &amp;quot;##contig=&amp;lt;ID=17,length=81195210,assembly=b37&amp;gt;&amp;quot;      
## [18] &amp;quot;##contig=&amp;lt;ID=18,length=78077248,assembly=b37&amp;gt;&amp;quot;      
## [19] &amp;quot;##contig=&amp;lt;ID=19,length=59128983,assembly=b37&amp;gt;&amp;quot;      
## [20] &amp;quot;##contig=&amp;lt;ID=20,length=63025520,assembly=b37&amp;gt;&amp;quot;      
## [21] &amp;quot;##contig=&amp;lt;ID=21,length=48129895,assembly=b37&amp;gt;&amp;quot;      
## [22] &amp;quot;##contig=&amp;lt;ID=22,length=51304566,assembly=b37&amp;gt;&amp;quot;      
## [23] &amp;quot;##contig=&amp;lt;ID=X,length=155270560,assembly=b37&amp;gt;&amp;quot;      
## [24] &amp;quot;##contig=&amp;lt;ID=Y,length=59373566,assembly=b37&amp;gt;&amp;quot;       
## [25] &amp;quot;##contig=&amp;lt;ID=MT,length=16569,assembly=b37&amp;gt;&amp;quot;         
## [26] &amp;quot;##contig=&amp;lt;ID=GL000207.1,length=4262,assembly=b37&amp;gt;&amp;quot;  
## [27] &amp;quot;##contig=&amp;lt;ID=GL000226.1,length=15008,assembly=b37&amp;gt;&amp;quot; 
## [28] &amp;quot;##contig=&amp;lt;ID=GL000229.1,length=19913,assembly=b37&amp;gt;&amp;quot; 
## [29] &amp;quot;##contig=&amp;lt;ID=GL000231.1,length=27386,assembly=b37&amp;gt;&amp;quot; 
## [30] &amp;quot;##contig=&amp;lt;ID=GL000210.1,length=27682,assembly=b37&amp;gt;&amp;quot; 
## [31] &amp;quot;##contig=&amp;lt;ID=GL000239.1,length=33824,assembly=b37&amp;gt;&amp;quot; 
## [32] &amp;quot;##contig=&amp;lt;ID=GL000235.1,length=34474,assembly=b37&amp;gt;&amp;quot; 
## [33] &amp;quot;##contig=&amp;lt;ID=GL000201.1,length=36148,assembly=b37&amp;gt;&amp;quot; 
## [34] &amp;quot;##contig=&amp;lt;ID=GL000247.1,length=36422,assembly=b37&amp;gt;&amp;quot; 
## [35] &amp;quot;##contig=&amp;lt;ID=GL000245.1,length=36651,assembly=b37&amp;gt;&amp;quot; 
## [36] &amp;quot;##contig=&amp;lt;ID=GL000197.1,length=37175,assembly=b37&amp;gt;&amp;quot; 
## [37] &amp;quot;##contig=&amp;lt;ID=GL000203.1,length=37498,assembly=b37&amp;gt;&amp;quot; 
## [38] &amp;quot;##contig=&amp;lt;ID=GL000246.1,length=38154,assembly=b37&amp;gt;&amp;quot; 
## [39] &amp;quot;##contig=&amp;lt;ID=GL000249.1,length=38502,assembly=b37&amp;gt;&amp;quot; 
## [40] &amp;quot;##contig=&amp;lt;ID=GL000196.1,length=38914,assembly=b37&amp;gt;&amp;quot; 
## [41] &amp;quot;##contig=&amp;lt;ID=GL000248.1,length=39786,assembly=b37&amp;gt;&amp;quot; 
## [42] &amp;quot;##contig=&amp;lt;ID=GL000244.1,length=39929,assembly=b37&amp;gt;&amp;quot; 
## [43] &amp;quot;##contig=&amp;lt;ID=GL000238.1,length=39939,assembly=b37&amp;gt;&amp;quot; 
## [44] &amp;quot;##contig=&amp;lt;ID=GL000202.1,length=40103,assembly=b37&amp;gt;&amp;quot; 
## [45] &amp;quot;##contig=&amp;lt;ID=GL000234.1,length=40531,assembly=b37&amp;gt;&amp;quot; 
## [46] &amp;quot;##contig=&amp;lt;ID=GL000232.1,length=40652,assembly=b37&amp;gt;&amp;quot; 
## [47] &amp;quot;##contig=&amp;lt;ID=GL000206.1,length=41001,assembly=b37&amp;gt;&amp;quot; 
## [48] &amp;quot;##contig=&amp;lt;ID=GL000240.1,length=41933,assembly=b37&amp;gt;&amp;quot; 
## [49] &amp;quot;##contig=&amp;lt;ID=GL000236.1,length=41934,assembly=b37&amp;gt;&amp;quot; 
## [50] &amp;quot;##contig=&amp;lt;ID=GL000241.1,length=42152,assembly=b37&amp;gt;&amp;quot; 
## [51] &amp;quot;##contig=&amp;lt;ID=GL000243.1,length=43341,assembly=b37&amp;gt;&amp;quot; 
## [52] &amp;quot;##contig=&amp;lt;ID=GL000242.1,length=43523,assembly=b37&amp;gt;&amp;quot; 
## [53] &amp;quot;##contig=&amp;lt;ID=GL000230.1,length=43691,assembly=b37&amp;gt;&amp;quot; 
## [54] &amp;quot;##contig=&amp;lt;ID=GL000237.1,length=45867,assembly=b37&amp;gt;&amp;quot; 
## [55] &amp;quot;##contig=&amp;lt;ID=GL000233.1,length=45941,assembly=b37&amp;gt;&amp;quot; 
## [56] &amp;quot;##contig=&amp;lt;ID=GL000204.1,length=81310,assembly=b37&amp;gt;&amp;quot; 
## [57] &amp;quot;##contig=&amp;lt;ID=GL000198.1,length=90085,assembly=b37&amp;gt;&amp;quot; 
## [58] &amp;quot;##contig=&amp;lt;ID=GL000208.1,length=92689,assembly=b37&amp;gt;&amp;quot; 
## [59] &amp;quot;##contig=&amp;lt;ID=GL000191.1,length=106433,assembly=b37&amp;gt;&amp;quot;
## [60] &amp;quot;##contig=&amp;lt;ID=GL000227.1,length=128374,assembly=b37&amp;gt;&amp;quot;
## [61] &amp;quot;##contig=&amp;lt;ID=GL000228.1,length=129120,assembly=b37&amp;gt;&amp;quot;
## [62] &amp;quot;##contig=&amp;lt;ID=GL000214.1,length=137718,assembly=b37&amp;gt;&amp;quot;
## [63] &amp;quot;##contig=&amp;lt;ID=GL000221.1,length=155397,assembly=b37&amp;gt;&amp;quot;
## [64] &amp;quot;##contig=&amp;lt;ID=GL000209.1,length=159169,assembly=b37&amp;gt;&amp;quot;
## [65] &amp;quot;##contig=&amp;lt;ID=GL000218.1,length=161147,assembly=b37&amp;gt;&amp;quot;
## [66] &amp;quot;##contig=&amp;lt;ID=GL000220.1,length=161802,assembly=b37&amp;gt;&amp;quot;
## [67] &amp;quot;##contig=&amp;lt;ID=GL000213.1,length=164239,assembly=b37&amp;gt;&amp;quot;
## [68] &amp;quot;##contig=&amp;lt;ID=GL000211.1,length=166566,assembly=b37&amp;gt;&amp;quot;
## [69] &amp;quot;##contig=&amp;lt;ID=GL000199.1,length=169874,assembly=b37&amp;gt;&amp;quot;
## [70] &amp;quot;##contig=&amp;lt;ID=GL000217.1,length=172149,assembly=b37&amp;gt;&amp;quot;
## [71] &amp;quot;##contig=&amp;lt;ID=GL000216.1,length=172294,assembly=b37&amp;gt;&amp;quot;
## [72] &amp;quot;##contig=&amp;lt;ID=GL000215.1,length=172545,assembly=b37&amp;gt;&amp;quot;
## [73] &amp;quot;##contig=&amp;lt;ID=GL000205.1,length=174588,assembly=b37&amp;gt;&amp;quot;
## [74] &amp;quot;##contig=&amp;lt;ID=GL000219.1,length=179198,assembly=b37&amp;gt;&amp;quot;
## [75] &amp;quot;##contig=&amp;lt;ID=GL000224.1,length=179693,assembly=b37&amp;gt;&amp;quot;
## [76] &amp;quot;##contig=&amp;lt;ID=GL000223.1,length=180455,assembly=b37&amp;gt;&amp;quot;
## [77] &amp;quot;##contig=&amp;lt;ID=GL000195.1,length=182896,assembly=b37&amp;gt;&amp;quot;
## [78] &amp;quot;##contig=&amp;lt;ID=GL000212.1,length=186858,assembly=b37&amp;gt;&amp;quot;
## [79] &amp;quot;##contig=&amp;lt;ID=GL000222.1,length=186861,assembly=b37&amp;gt;&amp;quot;
## [80] &amp;quot;##contig=&amp;lt;ID=GL000200.1,length=187035,assembly=b37&amp;gt;&amp;quot;
## [81] &amp;quot;##contig=&amp;lt;ID=GL000193.1,length=189789,assembly=b37&amp;gt;&amp;quot;
## [82] &amp;quot;##contig=&amp;lt;ID=GL000194.1,length=191469,assembly=b37&amp;gt;&amp;quot;
## [83] &amp;quot;##contig=&amp;lt;ID=GL000225.1,length=211173,assembly=b37&amp;gt;&amp;quot;
## [84] &amp;quot;##contig=&amp;lt;ID=GL000192.1,length=547496,assembly=b37&amp;gt;&amp;quot;
## [85] &amp;quot;##contig=&amp;lt;ID=NC_007605,length=171823,assembly=b37&amp;gt;&amp;quot; 
## [86] &amp;quot;##contig=&amp;lt;ID=hs37d5,length=35477943,assembly=b37&amp;gt;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;parse-out-chr-contig-sizes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Parse out chr / contig sizes&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# turn into data frame (well, a tibble)
contig_size &amp;lt;- vcf_header[grepl(&amp;#39;contig&amp;#39;, vcf_header)] %&amp;gt;% 
  data.frame() %&amp;gt;% 
  select(1, &amp;#39;header&amp;#39; = 1) %&amp;gt;% 
  # separate by ,
  separate(header, c(&amp;#39;contig&amp;#39;,&amp;#39;length&amp;#39;,&amp;#39;assembly&amp;#39;),&amp;#39;,&amp;#39;) %&amp;gt;% 
  # extract values by splitting against = and taking the last element (first after reversing)
  rowwise() %&amp;gt;% 
  mutate(contig = str_split(contig,&amp;#39;=&amp;#39;)[[1]] %&amp;gt;% gsub(&amp;#39;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;,.) %&amp;gt;% rev() %&amp;gt;% .[[1]],
         length = str_split(length,&amp;#39;=&amp;#39;)[[1]] %&amp;gt;% gsub(&amp;#39;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;,.) %&amp;gt;% rev() %&amp;gt;% .[[1]] %&amp;gt;% as.numeric(),
         assembly = str_split(assembly,&amp;#39;=&amp;#39;)[[1]] %&amp;gt;% gsub(&amp;#39;&amp;gt;&amp;#39;,&amp;#39;&amp;#39;,.) %&amp;gt;% rev() %&amp;gt;% .[[1]])
contig_size&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Source: local data frame [86 x 3]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 86 x 3
##    contig    length assembly
##    &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   
##  1 1      249250621 b37     
##  2 2      243199373 b37     
##  3 3      198022430 b37     
##  4 4      191154276 b37     
##  5 5      180915260 b37     
##  6 6      171115067 b37     
##  7 7      159138663 b37     
##  8 8      146364022 b37     
##  9 9      141213431 b37     
## 10 10     135534747 b37     
## # ... with 76 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;split-chr-above-3e7-base-pairs-into-equalish-size-pieces&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Split chr above 3e7 base pairs into equal(ish) size pieces&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ceiling&lt;/code&gt; will allow intervals a bit less than 3e7 by rounding up the number of pieces per chromsome. Would rather have more splits with less than the target size.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_split &amp;lt;- function(size){
  pieces &amp;lt;- ceiling(size / 3e7)
  seq(1, size, size/pieces)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;print-coordinates-given-a-chromosome-contig&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;print coordinates given a chromosome / contig&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_printer &amp;lt;- function(chr) {
  # grab the legnth of chr or contig
  size &amp;lt;- contig_size %&amp;gt;% filter(contig == chr) %&amp;gt;% pull(length)
  # split into ~30e7 sized pieces
  sequence &amp;lt;- n_split(size)
  # add the max size to end (plus another base pair since the loop below reduces size by 1 to eliminate overlaps)
  sequence &amp;lt;- c(sequence, size+1)
  df &amp;lt;- data.frame()
  for(i in 1:length(sequence)){
    row &amp;lt;- cbind(chr, as.integer(sequence[max(i-1,1)]), # for first row, makes sure you don&amp;#39;t pick the 0 position, which doesn&amp;#39;t exit
                 as.integer(sequence[i]-1)) # decrements by one so you don&amp;#39;t overlap
    df &amp;lt;- rbind(df, row)
  }
  colnames(df) &amp;lt;- c(&amp;#39;chr&amp;#39;,&amp;#39;start&amp;#39;,&amp;#39;end&amp;#39;)
  # skip first row which has dummy values
  df[-1,]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-coordinates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;calculate coordinates&lt;/h2&gt;
&lt;p&gt;Will skip contig &amp;lt; 3e7 (all but hs37d5, which I don’t process, so it will be eliminated). The contigs will be printed comma separated for &lt;code&gt;bcftools view -r&lt;/code&gt; purposes.&lt;/p&gt;
&lt;p&gt;How many regions do we have? Should have a bit more than 100.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;regions &amp;lt;- data.frame()
for (i in contig_size %&amp;gt;% filter(length &amp;gt; 3e7, contig != &amp;#39;hs37d5&amp;#39;) %&amp;gt;% pull(contig)){
  regions &amp;lt;- rbind(regions,(n_printer(i)))
}
regions %&amp;gt;% nrow()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 115&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;print-em&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;print ’em&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;regions %&amp;gt;% mutate(f = paste(paste(chr, start, sep =&amp;#39;:&amp;#39;), end, sep=&amp;#39;-&amp;#39;)) %&amp;gt;% select(f)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                          f
## 1             1:1-27694513
## 2      1:27694514-55389026
## 3      1:55389027-83083540
## 4     1:83083541-110778053
## 5    1:110778054-138472567
## 6    1:138472568-166167080
## 7    1:166167081-193861594
## 8    1:193861595-221556107
## 9    1:221556108-249250621
## 10            2:1-27022152
## 11     2:27022153-54044305
## 12     2:54044306-81066457
## 13    2:81066458-108088610
## 14   2:108088611-135110762
## 15   2:135110763-162132915
## 16   2:162132916-189155067
## 17   2:189155068-216177220
## 18   2:216177221-243199373
## 19            3:1-28288918
## 20     3:28288919-56577837
## 21     3:56577838-84866755
## 22    3:84866756-113155674
## 23   3:113155675-141444592
## 24   3:141444593-169733511
## 25   3:169733512-198022430
## 26            4:1-27307753
## 27     4:27307754-54615507
## 28     4:54615508-81923261
## 29    4:81923262-109231014
## 30   4:109231015-136538768
## 31   4:136538769-163846522
## 32   4:163846523-191154276
## 33            5:1-25845037
## 34     5:25845038-51690074
## 35     5:51690075-77535111
## 36    5:77535112-103380148
## 37   5:103380149-129225185
## 38   5:129225186-155070222
## 39   5:155070223-180915260
## 40            6:1-28519177
## 41     6:28519178-57038355
## 42     6:57038356-85557533
## 43    6:85557534-114076711
## 44   6:114076712-142595889
## 45   6:142595890-171115067
## 46            7:1-26523110
## 47     7:26523111-53046221
## 48     7:53046222-79569331
## 49    7:79569332-106092442
## 50   7:106092443-132615552
## 51   7:132615553-159138663
## 52            8:1-29272804
## 53     8:29272805-58545608
## 54     8:58545609-87818413
## 55    8:87818414-117091217
## 56   8:117091218-146364022
## 57            9:1-28242686
## 58     9:28242687-56485372
## 59     9:56485373-84728058
## 60    9:84728059-112970744
## 61   9:112970745-141213431
## 62           10:1-27106949
## 63    10:27106950-54213898
## 64    10:54213899-81320848
## 65   10:81320849-108427797
## 66  10:108427798-135534747
## 67           11:1-27001303
## 68    11:27001304-54002606
## 69    11:54002607-81003909
## 70   11:81003910-108005212
## 71  11:108005213-135006516
## 72           12:1-26770379
## 73    12:26770380-53540758
## 74    12:53540759-80311137
## 75   12:80311138-107081516
## 76  12:107081517-133851895
## 77           13:1-28792469
## 78    13:28792470-57584939
## 79    13:57584940-86377408
## 80   13:86377409-115169878
## 81           14:1-26837385
## 82    14:26837386-53674770
## 83    14:53674771-80512155
## 84   14:80512156-107349540
## 85           15:1-25632848
## 86    15:25632849-51265696
## 87    15:51265697-76898544
## 88   15:76898545-102531392
## 89           16:1-22588688
## 90    16:22588689-45177376
## 91    16:45177377-67766064
## 92    16:67766065-90354753
## 93           17:1-27065070
## 94    17:27065071-54130140
## 95    17:54130141-81195210
## 96           18:1-26025749
## 97    18:26025750-52051498
## 98    18:52051499-78077248
## 99           19:1-29564491
## 100   19:29564492-59128983
## 101          20:1-21008506
## 102   20:21008507-42017013
## 103   20:42017014-63025520
## 104          21:1-24064947
## 105   21:24064948-48129895
## 106          22:1-25652283
## 107   22:25652284-51304566
## 108           X:1-25878426
## 109    X:25878427-51756853
## 110    X:51756854-77635280
## 111   X:77635281-103513706
## 112  X:103513707-129392133
## 113  X:129392134-155270560
## 114           Y:1-29686783
## 115    Y:29686784-59373566&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;output-em-for-python-input-snakemake&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;output ’em for python input (Snakemake)&lt;/h2&gt;
&lt;p&gt;The second write command appends all of the chromosomes or contigs (in this case, just contigs) that are less than 3e7 in length to the output file. It comma separates them, which is how &lt;code&gt;bcftools view -r&lt;/code&gt; takes in multiple chromosomes or contigs. The &lt;code&gt;paste(., collapse=&#39;,&#39;)&lt;/code&gt; command at the end collapses the vector of contigs into a string with comma separation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write(regions %&amp;gt;% mutate(f = paste(paste(chr, start, sep =&amp;#39;:&amp;#39;), end, sep=&amp;#39;-&amp;#39;)) %&amp;gt;% pull(f), file=&amp;#39;vcf_region_split_coords.txt&amp;#39;)
write(contig_size %&amp;gt;% filter(length &amp;lt; 3e7, contig != &amp;#39;hs37d5&amp;#39;) %&amp;gt;% pull(contig) %&amp;gt;% paste(., collapse=&amp;#39;,&amp;#39;), file=&amp;#39;vcf_region_split_coords.txt&amp;#39;, append = T)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rscript&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;rscript&lt;/h2&gt;
&lt;p&gt;I’ve wrapped up the functions and handling as a Rscript that takes the header of a vcf as input and outputs and writes to a user-given file the regions. The script also allows you to select desired number of regions (you will almost always get a few more), the output file name, and the genome size (defaults to human genome). The script is &lt;a href=&#34;/./files/scripts/split_vcf_into_n_pieces.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-script-output&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the script output&lt;/h2&gt;
&lt;p&gt;I’m using it in a Snakemake pipeline. &lt;code&gt;bcftools&lt;/code&gt; can use it with &lt;code&gt;-R&lt;/code&gt; (region) if you run the script like this (see source for comments): &lt;code&gt;Rscript split_vcf_into_n_pieces.R yourVCF.header 200 vcf_region_split_200_coords.txt 3e9 bed&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sessioninfo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;sessionInfo()&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.5.0 (2018-04-23)
##  system   x86_64, darwin15.6.0        
##  ui       X11                         
##  language (EN)                        
##  collate  en_US.UTF-8                 
##  tz       Europe/London               
##  date     2018-09-17&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package    * version date       source        
##  assertthat   0.2.0   2017-04-11 CRAN (R 3.5.0)
##  backports    1.1.2   2017-12-13 CRAN (R 3.5.0)
##  base       * 3.5.0   2018-04-24 local         
##  bindr        0.1.1   2018-03-13 CRAN (R 3.5.0)
##  bindrcpp   * 0.2.2   2018-03-29 CRAN (R 3.5.0)
##  blogdown     0.8     2018-07-15 CRAN (R 3.5.0)
##  bookdown     0.7     2018-02-18 CRAN (R 3.5.0)
##  broom        0.4.4   2018-03-29 CRAN (R 3.5.0)
##  cellranger   1.1.0   2016-07-27 CRAN (R 3.5.0)
##  cli          1.0.0   2017-11-05 CRAN (R 3.5.0)
##  colorspace   1.3-2   2016-12-14 CRAN (R 3.5.0)
##  compiler     3.5.0   2018-04-24 local         
##  crayon       1.3.4   2017-09-16 CRAN (R 3.5.0)
##  datasets   * 3.5.0   2018-04-24 local         
##  devtools     1.13.6  2018-06-27 CRAN (R 3.5.0)
##  digest       0.6.15  2018-01-28 CRAN (R 3.5.0)
##  dplyr      * 0.7.6   2018-06-29 cran (@0.7.6) 
##  evaluate     0.10.1  2017-06-24 CRAN (R 3.5.0)
##  forcats    * 0.3.0   2018-02-19 CRAN (R 3.5.0)
##  foreign      0.8-70  2017-11-28 CRAN (R 3.5.0)
##  ggplot2    * 3.0.0   2018-07-03 cran (@3.0.0) 
##  glue         1.2.0   2017-10-29 CRAN (R 3.5.0)
##  graphics   * 3.5.0   2018-04-24 local         
##  grDevices  * 3.5.0   2018-04-24 local         
##  grid         3.5.0   2018-04-24 local         
##  gtable       0.2.0   2016-02-26 CRAN (R 3.5.0)
##  haven        1.1.1   2018-01-18 CRAN (R 3.5.0)
##  hms          0.4.2   2018-03-10 CRAN (R 3.5.0)
##  htmltools    0.3.6   2017-04-28 CRAN (R 3.5.0)
##  httr         1.3.1   2017-08-20 CRAN (R 3.5.0)
##  jsonlite     1.5     2017-06-01 CRAN (R 3.5.0)
##  knitr        1.20    2018-02-20 CRAN (R 3.5.0)
##  lattice      0.20-35 2017-03-25 CRAN (R 3.5.0)
##  lazyeval     0.2.1   2017-10-29 CRAN (R 3.5.0)
##  lubridate    1.7.4   2018-04-11 CRAN (R 3.5.0)
##  magrittr     1.5     2014-11-22 CRAN (R 3.5.0)
##  memoise      1.1.0   2017-04-21 CRAN (R 3.5.0)
##  methods    * 3.5.0   2018-04-24 local         
##  mnormt       1.5-5   2016-10-15 CRAN (R 3.5.0)
##  modelr       0.1.2   2018-05-11 CRAN (R 3.5.0)
##  munsell      0.4.3   2016-02-13 CRAN (R 3.5.0)
##  nlme         3.1-137 2018-04-07 CRAN (R 3.5.0)
##  parallel     3.5.0   2018-04-24 local         
##  pillar       1.2.3   2018-05-25 CRAN (R 3.5.0)
##  pkgconfig    2.0.1   2017-03-21 CRAN (R 3.5.0)
##  plyr         1.8.4   2016-06-08 CRAN (R 3.5.0)
##  psych        1.8.4   2018-05-06 CRAN (R 3.5.0)
##  purrr      * 0.2.5   2018-05-29 CRAN (R 3.5.0)
##  R6           2.2.2   2017-06-17 CRAN (R 3.5.0)
##  Rcpp         0.12.17 2018-05-18 CRAN (R 3.5.0)
##  readr      * 1.1.1   2017-05-16 CRAN (R 3.5.0)
##  readxl       1.1.0   2018-04-20 CRAN (R 3.5.0)
##  reshape2     1.4.3   2017-12-11 CRAN (R 3.5.0)
##  rlang        0.2.1   2018-05-30 CRAN (R 3.5.0)
##  rmarkdown    1.10    2018-06-11 cran (@1.10)  
##  rprojroot    1.3-2   2018-01-03 CRAN (R 3.5.0)
##  rstudioapi   0.7     2017-09-07 CRAN (R 3.5.0)
##  rvest        0.3.2   2016-06-17 CRAN (R 3.5.0)
##  scales       0.5.0   2017-08-24 CRAN (R 3.5.0)
##  stats      * 3.5.0   2018-04-24 local         
##  stringi      1.2.2   2018-05-02 CRAN (R 3.5.0)
##  stringr    * 1.3.1   2018-05-10 CRAN (R 3.5.0)
##  tibble     * 1.4.2   2018-01-22 CRAN (R 3.5.0)
##  tidyr      * 0.8.1   2018-05-18 CRAN (R 3.5.0)
##  tidyselect   0.2.4   2018-02-26 CRAN (R 3.5.0)
##  tidyverse  * 1.2.1   2017-11-14 CRAN (R 3.5.0)
##  tools        3.5.0   2018-04-24 local         
##  utf8         1.1.4   2018-05-24 CRAN (R 3.5.0)
##  utils      * 3.5.0   2018-04-24 local         
##  withr        2.1.2   2018-03-15 CRAN (R 3.5.0)
##  xfun         0.3     2018-07-06 CRAN (R 3.5.0)
##  xml2         1.2.0   2018-01-24 CRAN (R 3.5.0)
##  yaml         2.1.19  2018-05-01 CRAN (R 3.5.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
